
microphonesampler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bffc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013520  0800c1e0  0800c1e0  0001c1e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f700  0801f700  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801f700  0801f700  0002f700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f708  0801f708  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f708  0801f708  0002f708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f70c  0801f70c  0002f70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801f710  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014660  200001f0  0801f900  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20014850  0801f900  00034850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024b93  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fa3  00000000  00000000  00054e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ba0  00000000  00000000  00058e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000148c  00000000  00000000  0005a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028184  00000000  00000000  0005be3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d8a5  00000000  00000000  00083fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011d654  00000000  00000000  000a1865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008d0c  00000000  00000000  001beebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001c7bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002f41  00000000  00000000  001c7c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000b8  00000000  00000000  001cab74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c1c4 	.word	0x0800c1c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800c1c4 	.word	0x0800c1c4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	; 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	bf28      	it	cs
 8000d54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d58:	d2ed      	bcs.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_uldivmod>:
 8000eb4:	b953      	cbnz	r3, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb6:	b94a      	cbnz	r2, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	bf08      	it	eq
 8000ebc:	2800      	cmpeq	r0, #0
 8000ebe:	bf1c      	itt	ne
 8000ec0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ec4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ec8:	f000 b970 	b.w	80011ac <__aeabi_idiv0>
 8000ecc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ed0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ed4:	f000 f806 	bl	8000ee4 <__udivmoddi4>
 8000ed8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee0:	b004      	add	sp, #16
 8000ee2:	4770      	bx	lr

08000ee4 <__udivmoddi4>:
 8000ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ee8:	9e08      	ldr	r6, [sp, #32]
 8000eea:	460d      	mov	r5, r1
 8000eec:	4604      	mov	r4, r0
 8000eee:	460f      	mov	r7, r1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d14a      	bne.n	8000f8a <__udivmoddi4+0xa6>
 8000ef4:	428a      	cmp	r2, r1
 8000ef6:	4694      	mov	ip, r2
 8000ef8:	d965      	bls.n	8000fc6 <__udivmoddi4+0xe2>
 8000efa:	fab2 f382 	clz	r3, r2
 8000efe:	b143      	cbz	r3, 8000f12 <__udivmoddi4+0x2e>
 8000f00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f04:	f1c3 0220 	rsb	r2, r3, #32
 8000f08:	409f      	lsls	r7, r3
 8000f0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000f0e:	4317      	orrs	r7, r2
 8000f10:	409c      	lsls	r4, r3
 8000f12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f16:	fa1f f58c 	uxth.w	r5, ip
 8000f1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000f1e:	0c22      	lsrs	r2, r4, #16
 8000f20:	fb0e 7711 	mls	r7, lr, r1, r7
 8000f24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000f28:	fb01 f005 	mul.w	r0, r1, r5
 8000f2c:	4290      	cmp	r0, r2
 8000f2e:	d90a      	bls.n	8000f46 <__udivmoddi4+0x62>
 8000f30:	eb1c 0202 	adds.w	r2, ip, r2
 8000f34:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000f38:	f080 811c 	bcs.w	8001174 <__udivmoddi4+0x290>
 8000f3c:	4290      	cmp	r0, r2
 8000f3e:	f240 8119 	bls.w	8001174 <__udivmoddi4+0x290>
 8000f42:	3902      	subs	r1, #2
 8000f44:	4462      	add	r2, ip
 8000f46:	1a12      	subs	r2, r2, r0
 8000f48:	b2a4      	uxth	r4, r4
 8000f4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f56:	fb00 f505 	mul.w	r5, r0, r5
 8000f5a:	42a5      	cmp	r5, r4
 8000f5c:	d90a      	bls.n	8000f74 <__udivmoddi4+0x90>
 8000f5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000f62:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000f66:	f080 8107 	bcs.w	8001178 <__udivmoddi4+0x294>
 8000f6a:	42a5      	cmp	r5, r4
 8000f6c:	f240 8104 	bls.w	8001178 <__udivmoddi4+0x294>
 8000f70:	4464      	add	r4, ip
 8000f72:	3802      	subs	r0, #2
 8000f74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f78:	1b64      	subs	r4, r4, r5
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	b11e      	cbz	r6, 8000f86 <__udivmoddi4+0xa2>
 8000f7e:	40dc      	lsrs	r4, r3
 8000f80:	2300      	movs	r3, #0
 8000f82:	e9c6 4300 	strd	r4, r3, [r6]
 8000f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0xbc>
 8000f8e:	2e00      	cmp	r6, #0
 8000f90:	f000 80ed 	beq.w	800116e <__udivmoddi4+0x28a>
 8000f94:	2100      	movs	r1, #0
 8000f96:	e9c6 0500 	strd	r0, r5, [r6]
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa0:	fab3 f183 	clz	r1, r3
 8000fa4:	2900      	cmp	r1, #0
 8000fa6:	d149      	bne.n	800103c <__udivmoddi4+0x158>
 8000fa8:	42ab      	cmp	r3, r5
 8000faa:	d302      	bcc.n	8000fb2 <__udivmoddi4+0xce>
 8000fac:	4282      	cmp	r2, r0
 8000fae:	f200 80f8 	bhi.w	80011a2 <__udivmoddi4+0x2be>
 8000fb2:	1a84      	subs	r4, r0, r2
 8000fb4:	eb65 0203 	sbc.w	r2, r5, r3
 8000fb8:	2001      	movs	r0, #1
 8000fba:	4617      	mov	r7, r2
 8000fbc:	2e00      	cmp	r6, #0
 8000fbe:	d0e2      	beq.n	8000f86 <__udivmoddi4+0xa2>
 8000fc0:	e9c6 4700 	strd	r4, r7, [r6]
 8000fc4:	e7df      	b.n	8000f86 <__udivmoddi4+0xa2>
 8000fc6:	b902      	cbnz	r2, 8000fca <__udivmoddi4+0xe6>
 8000fc8:	deff      	udf	#255	; 0xff
 8000fca:	fab2 f382 	clz	r3, r2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f040 8090 	bne.w	80010f4 <__udivmoddi4+0x210>
 8000fd4:	1a8a      	subs	r2, r1, r2
 8000fd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fda:	fa1f fe8c 	uxth.w	lr, ip
 8000fde:	2101      	movs	r1, #1
 8000fe0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000fe4:	fb07 2015 	mls	r0, r7, r5, r2
 8000fe8:	0c22      	lsrs	r2, r4, #16
 8000fea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000fee:	fb0e f005 	mul.w	r0, lr, r5
 8000ff2:	4290      	cmp	r0, r2
 8000ff4:	d908      	bls.n	8001008 <__udivmoddi4+0x124>
 8000ff6:	eb1c 0202 	adds.w	r2, ip, r2
 8000ffa:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ffe:	d202      	bcs.n	8001006 <__udivmoddi4+0x122>
 8001000:	4290      	cmp	r0, r2
 8001002:	f200 80cb 	bhi.w	800119c <__udivmoddi4+0x2b8>
 8001006:	4645      	mov	r5, r8
 8001008:	1a12      	subs	r2, r2, r0
 800100a:	b2a4      	uxth	r4, r4
 800100c:	fbb2 f0f7 	udiv	r0, r2, r7
 8001010:	fb07 2210 	mls	r2, r7, r0, r2
 8001014:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001018:	fb0e fe00 	mul.w	lr, lr, r0
 800101c:	45a6      	cmp	lr, r4
 800101e:	d908      	bls.n	8001032 <__udivmoddi4+0x14e>
 8001020:	eb1c 0404 	adds.w	r4, ip, r4
 8001024:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001028:	d202      	bcs.n	8001030 <__udivmoddi4+0x14c>
 800102a:	45a6      	cmp	lr, r4
 800102c:	f200 80bb 	bhi.w	80011a6 <__udivmoddi4+0x2c2>
 8001030:	4610      	mov	r0, r2
 8001032:	eba4 040e 	sub.w	r4, r4, lr
 8001036:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800103a:	e79f      	b.n	8000f7c <__udivmoddi4+0x98>
 800103c:	f1c1 0720 	rsb	r7, r1, #32
 8001040:	408b      	lsls	r3, r1
 8001042:	fa22 fc07 	lsr.w	ip, r2, r7
 8001046:	ea4c 0c03 	orr.w	ip, ip, r3
 800104a:	fa05 f401 	lsl.w	r4, r5, r1
 800104e:	fa20 f307 	lsr.w	r3, r0, r7
 8001052:	40fd      	lsrs	r5, r7
 8001054:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001058:	4323      	orrs	r3, r4
 800105a:	fbb5 f8f9 	udiv	r8, r5, r9
 800105e:	fa1f fe8c 	uxth.w	lr, ip
 8001062:	fb09 5518 	mls	r5, r9, r8, r5
 8001066:	0c1c      	lsrs	r4, r3, #16
 8001068:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800106c:	fb08 f50e 	mul.w	r5, r8, lr
 8001070:	42a5      	cmp	r5, r4
 8001072:	fa02 f201 	lsl.w	r2, r2, r1
 8001076:	fa00 f001 	lsl.w	r0, r0, r1
 800107a:	d90b      	bls.n	8001094 <__udivmoddi4+0x1b0>
 800107c:	eb1c 0404 	adds.w	r4, ip, r4
 8001080:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8001084:	f080 8088 	bcs.w	8001198 <__udivmoddi4+0x2b4>
 8001088:	42a5      	cmp	r5, r4
 800108a:	f240 8085 	bls.w	8001198 <__udivmoddi4+0x2b4>
 800108e:	f1a8 0802 	sub.w	r8, r8, #2
 8001092:	4464      	add	r4, ip
 8001094:	1b64      	subs	r4, r4, r5
 8001096:	b29d      	uxth	r5, r3
 8001098:	fbb4 f3f9 	udiv	r3, r4, r9
 800109c:	fb09 4413 	mls	r4, r9, r3, r4
 80010a0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80010a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80010a8:	45a6      	cmp	lr, r4
 80010aa:	d908      	bls.n	80010be <__udivmoddi4+0x1da>
 80010ac:	eb1c 0404 	adds.w	r4, ip, r4
 80010b0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80010b4:	d26c      	bcs.n	8001190 <__udivmoddi4+0x2ac>
 80010b6:	45a6      	cmp	lr, r4
 80010b8:	d96a      	bls.n	8001190 <__udivmoddi4+0x2ac>
 80010ba:	3b02      	subs	r3, #2
 80010bc:	4464      	add	r4, ip
 80010be:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010c2:	fba3 9502 	umull	r9, r5, r3, r2
 80010c6:	eba4 040e 	sub.w	r4, r4, lr
 80010ca:	42ac      	cmp	r4, r5
 80010cc:	46c8      	mov	r8, r9
 80010ce:	46ae      	mov	lr, r5
 80010d0:	d356      	bcc.n	8001180 <__udivmoddi4+0x29c>
 80010d2:	d053      	beq.n	800117c <__udivmoddi4+0x298>
 80010d4:	b156      	cbz	r6, 80010ec <__udivmoddi4+0x208>
 80010d6:	ebb0 0208 	subs.w	r2, r0, r8
 80010da:	eb64 040e 	sbc.w	r4, r4, lr
 80010de:	fa04 f707 	lsl.w	r7, r4, r7
 80010e2:	40ca      	lsrs	r2, r1
 80010e4:	40cc      	lsrs	r4, r1
 80010e6:	4317      	orrs	r7, r2
 80010e8:	e9c6 7400 	strd	r7, r4, [r6]
 80010ec:	4618      	mov	r0, r3
 80010ee:	2100      	movs	r1, #0
 80010f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010f4:	f1c3 0120 	rsb	r1, r3, #32
 80010f8:	fa02 fc03 	lsl.w	ip, r2, r3
 80010fc:	fa20 f201 	lsr.w	r2, r0, r1
 8001100:	fa25 f101 	lsr.w	r1, r5, r1
 8001104:	409d      	lsls	r5, r3
 8001106:	432a      	orrs	r2, r5
 8001108:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800110c:	fa1f fe8c 	uxth.w	lr, ip
 8001110:	fbb1 f0f7 	udiv	r0, r1, r7
 8001114:	fb07 1510 	mls	r5, r7, r0, r1
 8001118:	0c11      	lsrs	r1, r2, #16
 800111a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800111e:	fb00 f50e 	mul.w	r5, r0, lr
 8001122:	428d      	cmp	r5, r1
 8001124:	fa04 f403 	lsl.w	r4, r4, r3
 8001128:	d908      	bls.n	800113c <__udivmoddi4+0x258>
 800112a:	eb1c 0101 	adds.w	r1, ip, r1
 800112e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001132:	d22f      	bcs.n	8001194 <__udivmoddi4+0x2b0>
 8001134:	428d      	cmp	r5, r1
 8001136:	d92d      	bls.n	8001194 <__udivmoddi4+0x2b0>
 8001138:	3802      	subs	r0, #2
 800113a:	4461      	add	r1, ip
 800113c:	1b49      	subs	r1, r1, r5
 800113e:	b292      	uxth	r2, r2
 8001140:	fbb1 f5f7 	udiv	r5, r1, r7
 8001144:	fb07 1115 	mls	r1, r7, r5, r1
 8001148:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800114c:	fb05 f10e 	mul.w	r1, r5, lr
 8001150:	4291      	cmp	r1, r2
 8001152:	d908      	bls.n	8001166 <__udivmoddi4+0x282>
 8001154:	eb1c 0202 	adds.w	r2, ip, r2
 8001158:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800115c:	d216      	bcs.n	800118c <__udivmoddi4+0x2a8>
 800115e:	4291      	cmp	r1, r2
 8001160:	d914      	bls.n	800118c <__udivmoddi4+0x2a8>
 8001162:	3d02      	subs	r5, #2
 8001164:	4462      	add	r2, ip
 8001166:	1a52      	subs	r2, r2, r1
 8001168:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800116c:	e738      	b.n	8000fe0 <__udivmoddi4+0xfc>
 800116e:	4631      	mov	r1, r6
 8001170:	4630      	mov	r0, r6
 8001172:	e708      	b.n	8000f86 <__udivmoddi4+0xa2>
 8001174:	4639      	mov	r1, r7
 8001176:	e6e6      	b.n	8000f46 <__udivmoddi4+0x62>
 8001178:	4610      	mov	r0, r2
 800117a:	e6fb      	b.n	8000f74 <__udivmoddi4+0x90>
 800117c:	4548      	cmp	r0, r9
 800117e:	d2a9      	bcs.n	80010d4 <__udivmoddi4+0x1f0>
 8001180:	ebb9 0802 	subs.w	r8, r9, r2
 8001184:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001188:	3b01      	subs	r3, #1
 800118a:	e7a3      	b.n	80010d4 <__udivmoddi4+0x1f0>
 800118c:	4645      	mov	r5, r8
 800118e:	e7ea      	b.n	8001166 <__udivmoddi4+0x282>
 8001190:	462b      	mov	r3, r5
 8001192:	e794      	b.n	80010be <__udivmoddi4+0x1da>
 8001194:	4640      	mov	r0, r8
 8001196:	e7d1      	b.n	800113c <__udivmoddi4+0x258>
 8001198:	46d0      	mov	r8, sl
 800119a:	e77b      	b.n	8001094 <__udivmoddi4+0x1b0>
 800119c:	3d02      	subs	r5, #2
 800119e:	4462      	add	r2, ip
 80011a0:	e732      	b.n	8001008 <__udivmoddi4+0x124>
 80011a2:	4608      	mov	r0, r1
 80011a4:	e70a      	b.n	8000fbc <__udivmoddi4+0xd8>
 80011a6:	4464      	add	r4, ip
 80011a8:	3802      	subs	r0, #2
 80011aa:	e742      	b.n	8001032 <__udivmoddi4+0x14e>

080011ac <__aeabi_idiv0>:
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  arm_rfft_fast_init_f32(&discrete_fourier_transform, processing_length);
 80011b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ba:	48b3      	ldr	r0, [pc, #716]	; (8001488 <main+0x2d8>)
 80011bc:	f006 fa86 	bl	80076cc <arm_rfft_fast_init_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c0:	f001 fb93 	bl	80028ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c4:	f000 fa6e 	bl	80016a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c8:	f000 fe20 	bl	8001e0c <MX_GPIO_Init>
  MX_DMA_Init();
 80011cc:	f000 fde4 	bl	8001d98 <MX_DMA_Init>
  MX_TIM7_Init();
 80011d0:	f000 fd60 	bl	8001c94 <MX_TIM7_Init>
  MX_TIM6_Init();
 80011d4:	f000 fd28 	bl	8001c28 <MX_TIM6_Init>
  MX_DAC3_Init();
 80011d8:	f000 fc1e 	bl	8001a18 <MX_DAC3_Init>
  MX_DAC4_Init();
 80011dc:	f000 fc60 	bl	8001aa0 <MX_DAC4_Init>
  MX_OPAMP4_Init();
 80011e0:	f000 fcc6 	bl	8001b70 <MX_OPAMP4_Init>
  MX_OPAMP6_Init();
 80011e4:	f000 fcf2 	bl	8001bcc <MX_OPAMP6_Init>
  MX_ADC5_Init();
 80011e8:	f000 fba2 	bl	8001930 <MX_ADC5_Init>
  MX_ADC4_Init();
 80011ec:	f000 fb2c 	bl	8001848 <MX_ADC4_Init>
  MX_ADC3_Init();
 80011f0:	f000 faa4 	bl	800173c <MX_ADC3_Init>
  MX_OPAMP3_Init();
 80011f4:	f000 fc8e 	bl	8001b14 <MX_OPAMP3_Init>
  MX_USART1_UART_Init();
 80011f8:	f000 fd82 	bl	8001d00 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac3, DAC_CHANNEL_1);
 80011fc:	2100      	movs	r1, #0
 80011fe:	48a3      	ldr	r0, [pc, #652]	; (800148c <main+0x2dc>)
 8001200:	f003 f971 	bl	80044e6 <HAL_DAC_Start>
  HAL_OPAMP_Start(&hopamp6);
 8001204:	48a2      	ldr	r0, [pc, #648]	; (8001490 <main+0x2e0>)
 8001206:	f004 f891 	bl	800532c <HAL_OPAMP_Start>

  HAL_DAC_Start(&hdac3, DAC_CHANNEL_2);
 800120a:	2110      	movs	r1, #16
 800120c:	489f      	ldr	r0, [pc, #636]	; (800148c <main+0x2dc>)
 800120e:	f003 f96a 	bl	80044e6 <HAL_DAC_Start>
  HAL_OPAMP_Start(&hopamp3);
 8001212:	48a0      	ldr	r0, [pc, #640]	; (8001494 <main+0x2e4>)
 8001214:	f004 f88a 	bl	800532c <HAL_OPAMP_Start>

  HAL_DAC_Start(&hdac4, DAC_CHANNEL_1);
 8001218:	2100      	movs	r1, #0
 800121a:	489f      	ldr	r0, [pc, #636]	; (8001498 <main+0x2e8>)
 800121c:	f003 f963 	bl	80044e6 <HAL_DAC_Start>
  HAL_OPAMP_Start(&hopamp4);
 8001220:	489e      	ldr	r0, [pc, #632]	; (800149c <main+0x2ec>)
 8001222:	f004 f883 	bl	800532c <HAL_OPAMP_Start>

  HAL_ADCEx_Calibration_Start(&hadc3,ADC_SINGLE_ENDED);
 8001226:	217f      	movs	r1, #127	; 0x7f
 8001228:	489d      	ldr	r0, [pc, #628]	; (80014a0 <main+0x2f0>)
 800122a:	f002 fec1 	bl	8003fb0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc3, adc_3_buffer, buffer_size);
 800122e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001232:	499c      	ldr	r1, [pc, #624]	; (80014a4 <main+0x2f4>)
 8001234:	489a      	ldr	r0, [pc, #616]	; (80014a0 <main+0x2f0>)
 8001236:	f001 fff5 	bl	8003224 <HAL_ADC_Start_DMA>

  HAL_ADCEx_Calibration_Start(&hadc4,ADC_SINGLE_ENDED);
 800123a:	217f      	movs	r1, #127	; 0x7f
 800123c:	489a      	ldr	r0, [pc, #616]	; (80014a8 <main+0x2f8>)
 800123e:	f002 feb7 	bl	8003fb0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc4, adc_4_buffer, buffer_size);
 8001242:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001246:	4999      	ldr	r1, [pc, #612]	; (80014ac <main+0x2fc>)
 8001248:	4897      	ldr	r0, [pc, #604]	; (80014a8 <main+0x2f8>)
 800124a:	f001 ffeb 	bl	8003224 <HAL_ADC_Start_DMA>

  HAL_ADCEx_Calibration_Start(&hadc5,ADC_SINGLE_ENDED);
 800124e:	217f      	movs	r1, #127	; 0x7f
 8001250:	4897      	ldr	r0, [pc, #604]	; (80014b0 <main+0x300>)
 8001252:	f002 fead 	bl	8003fb0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc5, adc_5_buffer, buffer_size);
 8001256:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800125a:	4996      	ldr	r1, [pc, #600]	; (80014b4 <main+0x304>)
 800125c:	4894      	ldr	r0, [pc, #592]	; (80014b0 <main+0x300>)
 800125e:	f001 ffe1 	bl	8003224 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim7);
 8001262:	4895      	ldr	r0, [pc, #596]	; (80014b8 <main+0x308>)
 8001264:	f005 f922 	bl	80064ac <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim6);
 8001268:	4894      	ldr	r0, [pc, #592]	; (80014bc <main+0x30c>)
 800126a:	f005 f91f 	bl	80064ac <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  /* USER CODE END WHILE */
	    HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, valdac_1);
 800126e:	4b94      	ldr	r3, [pc, #592]	; (80014c0 <main+0x310>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	4885      	ldr	r0, [pc, #532]	; (800148c <main+0x2dc>)
 8001278:	f003 f988 	bl	800458c <HAL_DAC_SetValue>
	    HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_2, DAC_ALIGN_12B_R, valdac_2);
 800127c:	4b91      	ldr	r3, [pc, #580]	; (80014c4 <main+0x314>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	2200      	movs	r2, #0
 8001282:	2110      	movs	r1, #16
 8001284:	4881      	ldr	r0, [pc, #516]	; (800148c <main+0x2dc>)
 8001286:	f003 f981 	bl	800458c <HAL_DAC_SetValue>
	    HAL_DAC_SetValue(&hdac4, DAC_CHANNEL_1, DAC_ALIGN_12B_R, valdac_3);
 800128a:	4b8f      	ldr	r3, [pc, #572]	; (80014c8 <main+0x318>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	4881      	ldr	r0, [pc, #516]	; (8001498 <main+0x2e8>)
 8001294:	f003 f97a 	bl	800458c <HAL_DAC_SetValue>

	    if(finished_1 || finished_2 || finished_3){
 8001298:	4b8c      	ldr	r3, [pc, #560]	; (80014cc <main+0x31c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	f040 81d9 	bne.w	8001654 <main+0x4a4>
 80012a2:	4b8b      	ldr	r3, [pc, #556]	; (80014d0 <main+0x320>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f040 81d4 	bne.w	8001654 <main+0x4a4>
 80012ac:	4b89      	ldr	r3, [pc, #548]	; (80014d4 <main+0x324>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f040 81cf 	bne.w	8001654 <main+0x4a4>
	      continue;
	    }

	    if(count < 30){
 80012b6:	4b88      	ldr	r3, [pc, #544]	; (80014d8 <main+0x328>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	2a1e      	cmp	r2, #30
 80012be:	f173 0300 	sbcs.w	r3, r3, #0
 80012c2:	d209      	bcs.n	80012d8 <main+0x128>
	      finished_1 = true;
 80012c4:	4b81      	ldr	r3, [pc, #516]	; (80014cc <main+0x31c>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
	      finished_2 = true;
 80012ca:	4b81      	ldr	r3, [pc, #516]	; (80014d0 <main+0x320>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
	      finished_3 = true;
 80012d0:	4b80      	ldr	r3, [pc, #512]	; (80014d4 <main+0x324>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]
	      continue;
 80012d6:	e1c0      	b.n	800165a <main+0x4aa>
	    }

	    found = false;
 80012d8:	4b80      	ldr	r3, [pc, #512]	; (80014dc <main+0x32c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]

	    if(adc3_current == adc4_current && adc3_current == adc5_current){
 80012de:	4b80      	ldr	r3, [pc, #512]	; (80014e0 <main+0x330>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4b80      	ldr	r3, [pc, #512]	; (80014e4 <main+0x334>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	f040 81b6 	bne.w	8001658 <main+0x4a8>
 80012ec:	4b7c      	ldr	r3, [pc, #496]	; (80014e0 <main+0x330>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b7d      	ldr	r3, [pc, #500]	; (80014e8 <main+0x338>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	f040 81af 	bne.w	8001658 <main+0x4a8>
	    	valadc_1 = sample1[0];
 80012fa:	4b7c      	ldr	r3, [pc, #496]	; (80014ec <main+0x33c>)
 80012fc:	881a      	ldrh	r2, [r3, #0]
 80012fe:	4b7c      	ldr	r3, [pc, #496]	; (80014f0 <main+0x340>)
 8001300:	801a      	strh	r2, [r3, #0]
	    	valadc_2 = sample2[0];
 8001302:	4b7c      	ldr	r3, [pc, #496]	; (80014f4 <main+0x344>)
 8001304:	881a      	ldrh	r2, [r3, #0]
 8001306:	4b7c      	ldr	r3, [pc, #496]	; (80014f8 <main+0x348>)
 8001308:	801a      	strh	r2, [r3, #0]
	    	valadc_3 = sample3[0];
 800130a:	4b7c      	ldr	r3, [pc, #496]	; (80014fc <main+0x34c>)
 800130c:	881a      	ldrh	r2, [r3, #0]
 800130e:	4b7c      	ldr	r3, [pc, #496]	; (8001500 <main+0x350>)
 8001310:	801a      	strh	r2, [r3, #0]

	    	//Check for frequency of interest in first buffer
	    	//Check in 128-sample increments
	    	for(int i = 0 ; i < buffer_size / processing_length ; i++){
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	e18e      	b.n	8001636 <main+0x486>
	    		for(int j = 0 ; j < processing_length ; j++){
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	e017      	b.n	800134e <main+0x19e>
	    			fft_input[j] = (float32_t) sample1[processing_length * i + j] / 8192.;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	029a      	lsls	r2, r3, #10
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	4413      	add	r3, r2
 8001326:	4a71      	ldr	r2, [pc, #452]	; (80014ec <main+0x33c>)
 8001328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001334:	eddf 6a73 	vldr	s13, [pc, #460]	; 8001504 <main+0x354>
 8001338:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800133c:	4a72      	ldr	r2, [pc, #456]	; (8001508 <main+0x358>)
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	edc3 7a00 	vstr	s15, [r3]
	    		for(int j = 0 ; j < processing_length ; j++){
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	3301      	adds	r3, #1
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001354:	dbe3      	blt.n	800131e <main+0x16e>
	    		}
	    		arm_rfft_fast_f32(&discrete_fourier_transform, fft_input, fft_output, 0);
 8001356:	2300      	movs	r3, #0
 8001358:	4a6c      	ldr	r2, [pc, #432]	; (800150c <main+0x35c>)
 800135a:	496b      	ldr	r1, [pc, #428]	; (8001508 <main+0x358>)
 800135c:	484a      	ldr	r0, [pc, #296]	; (8001488 <main+0x2d8>)
 800135e:	f006 fa99 	bl	8007894 <arm_rfft_fast_f32>

	    		peakVal = 0;
 8001362:	4b6b      	ldr	r3, [pc, #428]	; (8001510 <main+0x360>)
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
	    		peakFreq = 0;
 800136a:	4b6a      	ldr	r3, [pc, #424]	; (8001514 <main+0x364>)
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
	    		freq_count = 0;
 8001372:	4b69      	ldr	r3, [pc, #420]	; (8001518 <main+0x368>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
	    		avg_val = 0;
 8001378:	4b68      	ldr	r3, [pc, #416]	; (800151c <main+0x36c>)
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	601a      	str	r2, [r3, #0]

	    		//Peak finding
	    		for(int j = 0 ; j < processing_length ; j += 2){
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	e0dc      	b.n	8001540 <main+0x390>
	    			current_freq = (float) (fs * j) / (float) (2 * processing_length) ;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a65      	ldr	r2, [pc, #404]	; (8001520 <main+0x370>)
 800138a:	fb02 f303 	mul.w	r3, r2, r3
 800138e:	ee07 3a90 	vmov	s15, r3
 8001392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001396:	eddf 6a63 	vldr	s13, [pc, #396]	; 8001524 <main+0x374>
 800139a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800139e:	4b62      	ldr	r3, [pc, #392]	; (8001528 <main+0x378>)
 80013a0:	edc3 7a00 	vstr	s15, [r3]
	    			if(current_freq < 8750){
 80013a4:	4b60      	ldr	r3, [pc, #384]	; (8001528 <main+0x378>)
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800152c <main+0x37c>
 80013ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b6:	f100 80bf 	bmi.w	8001538 <main+0x388>
	    				continue;
	    			}

	    			current_val = sqrtf( pow( fft_output[j] , 2. ) + pow( fft_output[j + 1], 2. ) );
 80013ba:	4a54      	ldr	r2, [pc, #336]	; (800150c <main+0x35c>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f8e7 	bl	8000598 <__aeabi_f2d>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8001480 <main+0x2d0>
 80013d2:	ec43 2b10 	vmov	d0, r2, r3
 80013d6:	f007 f8fb 	bl	80085d0 <pow>
 80013da:	ec55 4b10 	vmov	r4, r5, d0
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3301      	adds	r3, #1
 80013e2:	4a4a      	ldr	r2, [pc, #296]	; (800150c <main+0x35c>)
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f8d4 	bl	8000598 <__aeabi_f2d>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8001480 <main+0x2d0>
 80013f8:	ec43 2b10 	vmov	d0, r2, r3
 80013fc:	f007 f8e8 	bl	80085d0 <pow>
 8001400:	ec53 2b10 	vmov	r2, r3, d0
 8001404:	4620      	mov	r0, r4
 8001406:	4629      	mov	r1, r5
 8001408:	f7fe ff68 	bl	80002dc <__adddf3>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4610      	mov	r0, r2
 8001412:	4619      	mov	r1, r3
 8001414:	f7ff fbf0 	bl	8000bf8 <__aeabi_d2f>
 8001418:	4603      	mov	r3, r0
 800141a:	ee00 3a10 	vmov	s0, r3
 800141e:	f007 f951 	bl	80086c4 <sqrtf>
 8001422:	eef0 7a40 	vmov.f32	s15, s0
 8001426:	4b42      	ldr	r3, [pc, #264]	; (8001530 <main+0x380>)
 8001428:	edc3 7a00 	vstr	s15, [r3]
	    			avg_val += current_val;
 800142c:	4b3b      	ldr	r3, [pc, #236]	; (800151c <main+0x36c>)
 800142e:	ed93 7a00 	vldr	s14, [r3]
 8001432:	4b3f      	ldr	r3, [pc, #252]	; (8001530 <main+0x380>)
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143c:	4b37      	ldr	r3, [pc, #220]	; (800151c <main+0x36c>)
 800143e:	edc3 7a00 	vstr	s15, [r3]
	    			freq_count++;
 8001442:	4b35      	ldr	r3, [pc, #212]	; (8001518 <main+0x368>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	4a33      	ldr	r2, [pc, #204]	; (8001518 <main+0x368>)
 800144a:	6013      	str	r3, [r2, #0]

	    			if(current_val > peakVal){
 800144c:	4b38      	ldr	r3, [pc, #224]	; (8001530 <main+0x380>)
 800144e:	ed93 7a00 	vldr	s14, [r3]
 8001452:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <main+0x360>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	dd6b      	ble.n	800153a <main+0x38a>
	    				peakVal = current_val;
 8001462:	4b33      	ldr	r3, [pc, #204]	; (8001530 <main+0x380>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a2a      	ldr	r2, [pc, #168]	; (8001510 <main+0x360>)
 8001468:	6013      	str	r3, [r2, #0]
	    				peakFreq = current_freq;
 800146a:	4b2f      	ldr	r3, [pc, #188]	; (8001528 <main+0x378>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a29      	ldr	r2, [pc, #164]	; (8001514 <main+0x364>)
 8001470:	6013      	str	r3, [r2, #0]
	    				peakEntry = j;
 8001472:	4a30      	ldr	r2, [pc, #192]	; (8001534 <main+0x384>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	e05f      	b.n	800153a <main+0x38a>
 800147a:	bf00      	nop
 800147c:	f3af 8000 	nop.w
 8001480:	00000000 	.word	0x00000000
 8001484:	40000000 	.word	0x40000000
 8001488:	200126b8 	.word	0x200126b8
 800148c:	20000470 	.word	0x20000470
 8001490:	20000510 	.word	0x20000510
 8001494:	20000498 	.word	0x20000498
 8001498:	20000484 	.word	0x20000484
 800149c:	200004d4 	.word	0x200004d4
 80014a0:	2000020c 	.word	0x2000020c
 80014a4:	20000674 	.word	0x20000674
 80014a8:	20000278 	.word	0x20000278
 80014ac:	20004674 	.word	0x20004674
 80014b0:	200002e4 	.word	0x200002e4
 80014b4:	20008674 	.word	0x20008674
 80014b8:	20000598 	.word	0x20000598
 80014bc:	2000054c 	.word	0x2000054c
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000002 	.word	0x20000002
 80014c8:	20000004 	.word	0x20000004
 80014cc:	20000006 	.word	0x20000006
 80014d0:	20000007 	.word	0x20000007
 80014d4:	20000008 	.word	0x20000008
 80014d8:	20012688 	.word	0x20012688
 80014dc:	200146f0 	.word	0x200146f0
 80014e0:	200126ac 	.word	0x200126ac
 80014e4:	200126b0 	.word	0x200126b0
 80014e8:	200126b4 	.word	0x200126b4
 80014ec:	2000c674 	.word	0x2000c674
 80014f0:	20012680 	.word	0x20012680
 80014f4:	2000e674 	.word	0x2000e674
 80014f8:	20012682 	.word	0x20012682
 80014fc:	20010674 	.word	0x20010674
 8001500:	20012684 	.word	0x20012684
 8001504:	46000000 	.word	0x46000000
 8001508:	200126d0 	.word	0x200126d0
 800150c:	200136d0 	.word	0x200136d0
 8001510:	200146d0 	.word	0x200146d0
 8001514:	200146d4 	.word	0x200146d4
 8001518:	200146e8 	.word	0x200146e8
 800151c:	200146e4 	.word	0x200146e4
 8001520:	0001e848 	.word	0x0001e848
 8001524:	45000000 	.word	0x45000000
 8001528:	200146e0 	.word	0x200146e0
 800152c:	4608b800 	.word	0x4608b800
 8001530:	200146dc 	.word	0x200146dc
 8001534:	200146d8 	.word	0x200146d8
	    				continue;
 8001538:	bf00      	nop
	    		for(int j = 0 ; j < processing_length ; j += 2){
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3302      	adds	r3, #2
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001546:	f6ff af1e 	blt.w	8001386 <main+0x1d6>
	    			}
	    		}

	    		avg_val /= (float) freq_count;
 800154a:	4b44      	ldr	r3, [pc, #272]	; (800165c <main+0x4ac>)
 800154c:	edd3 6a00 	vldr	s13, [r3]
 8001550:	4b43      	ldr	r3, [pc, #268]	; (8001660 <main+0x4b0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	ee07 3a90 	vmov	s15, r3
 8001558:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800155c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001560:	4b3e      	ldr	r3, [pc, #248]	; (800165c <main+0x4ac>)
 8001562:	edc3 7a00 	vstr	s15, [r3]

	    		if(peakVal >= 6 && peakFreq > 8750){
 8001566:	4b3f      	ldr	r3, [pc, #252]	; (8001664 <main+0x4b4>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001578:	db5a      	blt.n	8001630 <main+0x480>
 800157a:	4b3b      	ldr	r3, [pc, #236]	; (8001668 <main+0x4b8>)
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800166c <main+0x4bc>
 8001584:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158c:	dd50      	ble.n	8001630 <main+0x480>
	    			//Contains peak sound signal
	    			found = true;
 800158e:	4b38      	ldr	r3, [pc, #224]	; (8001670 <main+0x4c0>)
 8001590:	2201      	movs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]
	    			snprintf(dma_result_buffer, 20, "start\r\n");
 8001594:	4a37      	ldr	r2, [pc, #220]	; (8001674 <main+0x4c4>)
 8001596:	2114      	movs	r1, #20
 8001598:	4837      	ldr	r0, [pc, #220]	; (8001678 <main+0x4c8>)
 800159a:	f008 fe4b 	bl	800a234 <sniprintf>
	    			HAL_UART_Transmit(&huart1, (uint8_t *) dma_result_buffer, sizeof(dma_result_buffer), HAL_MAX_DELAY);
 800159e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015a2:	2214      	movs	r2, #20
 80015a4:	4934      	ldr	r1, [pc, #208]	; (8001678 <main+0x4c8>)
 80015a6:	4835      	ldr	r0, [pc, #212]	; (800167c <main+0x4cc>)
 80015a8:	f005 f97e 	bl	80068a8 <HAL_UART_Transmit>
	    			for(int j = 0 ; j < processing_length ; j++){
 80015ac:	2300      	movs	r3, #0
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	e028      	b.n	8001604 <main+0x454>
	    				snprintf(dma_result_buffer, 20, "%.4d %.4d %.4d\r\n", sample1[processing_length * i + j], sample2[processing_length * i + j], sample3[processing_length * i + j]);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	029a      	lsls	r2, r3, #10
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	4413      	add	r3, r2
 80015ba:	4a31      	ldr	r2, [pc, #196]	; (8001680 <main+0x4d0>)
 80015bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015c0:	4618      	mov	r0, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	029a      	lsls	r2, r3, #10
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	4413      	add	r3, r2
 80015ca:	4a2e      	ldr	r2, [pc, #184]	; (8001684 <main+0x4d4>)
 80015cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015d0:	4619      	mov	r1, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	029a      	lsls	r2, r3, #10
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	4413      	add	r3, r2
 80015da:	4a2b      	ldr	r2, [pc, #172]	; (8001688 <main+0x4d8>)
 80015dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	9100      	str	r1, [sp, #0]
 80015e4:	4603      	mov	r3, r0
 80015e6:	4a29      	ldr	r2, [pc, #164]	; (800168c <main+0x4dc>)
 80015e8:	2114      	movs	r1, #20
 80015ea:	4823      	ldr	r0, [pc, #140]	; (8001678 <main+0x4c8>)
 80015ec:	f008 fe22 	bl	800a234 <sniprintf>
	    				HAL_UART_Transmit(&huart1, (uint8_t *) dma_result_buffer, sizeof(dma_result_buffer), HAL_MAX_DELAY);
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015f4:	2214      	movs	r2, #20
 80015f6:	4920      	ldr	r1, [pc, #128]	; (8001678 <main+0x4c8>)
 80015f8:	4820      	ldr	r0, [pc, #128]	; (800167c <main+0x4cc>)
 80015fa:	f005 f955 	bl	80068a8 <HAL_UART_Transmit>
	    			for(int j = 0 ; j < processing_length ; j++){
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	3301      	adds	r3, #1
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800160a:	dbd2      	blt.n	80015b2 <main+0x402>
	    			}

	    			snprintf(dma_result_buffer, 20, "end\r\n");
 800160c:	4a20      	ldr	r2, [pc, #128]	; (8001690 <main+0x4e0>)
 800160e:	2114      	movs	r1, #20
 8001610:	4819      	ldr	r0, [pc, #100]	; (8001678 <main+0x4c8>)
 8001612:	f008 fe0f 	bl	800a234 <sniprintf>
	    			HAL_UART_Transmit(&huart1, (uint8_t *) dma_result_buffer, sizeof(dma_result_buffer), HAL_MAX_DELAY);
 8001616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800161a:	2214      	movs	r2, #20
 800161c:	4916      	ldr	r1, [pc, #88]	; (8001678 <main+0x4c8>)
 800161e:	4817      	ldr	r0, [pc, #92]	; (800167c <main+0x4cc>)
 8001620:	f005 f942 	bl	80068a8 <HAL_UART_Transmit>

	    			success++;
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <main+0x4e4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	4a1a      	ldr	r2, [pc, #104]	; (8001694 <main+0x4e4>)
 800162c:	6013      	str	r3, [r2, #0]
	    			break;
 800162e:	e006      	b.n	800163e <main+0x48e>
	    	for(int i = 0 ; i < buffer_size / processing_length ; i++){
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3301      	adds	r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2b03      	cmp	r3, #3
 800163a:	f77f ae6d 	ble.w	8001318 <main+0x168>
 800163e:	bf00      	nop
	    HAL_UART_Transmit(&huart1, (uint8_t *) dma_result_buffer, sizeof(dma_result_buffer), HAL_MAX_DELAY);

	    snprintf(dma_result_buffer, 110, "%.10e %.10e %.10e %.10e %.10e %.10e\r\n", creal(R[2][0]), cimag(R[2][0]), creal(R[2][1]), cimag(R[2][1]), creal(R[2][2]), cimag(R[2][2]));
	    HAL_UART_Transmit(&huart1, (uint8_t *) dma_result_buffer, sizeof(dma_result_buffer), HAL_MAX_DELAY);*/

	    finished_1 = true;
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <main+0x4e8>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
	    finished_2 = true;
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <main+0x4ec>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
	    finished_3 = true;
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <main+0x4f0>)
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
 8001652:	e60c      	b.n	800126e <main+0xbe>
	      continue;
 8001654:	bf00      	nop
 8001656:	e60a      	b.n	800126e <main+0xbe>
	      continue;
 8001658:	bf00      	nop
	    HAL_DAC_SetValue(&hdac3, DAC_CHANNEL_1, DAC_ALIGN_12B_R, valdac_1);
 800165a:	e608      	b.n	800126e <main+0xbe>
 800165c:	200146e4 	.word	0x200146e4
 8001660:	200146e8 	.word	0x200146e8
 8001664:	200146d0 	.word	0x200146d0
 8001668:	200146d4 	.word	0x200146d4
 800166c:	4608b800 	.word	0x4608b800
 8001670:	200146f0 	.word	0x200146f0
 8001674:	0800c308 	.word	0x0800c308
 8001678:	20012698 	.word	0x20012698
 800167c:	200005e4 	.word	0x200005e4
 8001680:	2000c674 	.word	0x2000c674
 8001684:	2000e674 	.word	0x2000e674
 8001688:	20010674 	.word	0x20010674
 800168c:	0800c310 	.word	0x0800c310
 8001690:	0800c324 	.word	0x0800c324
 8001694:	200146ec 	.word	0x200146ec
 8001698:	20000006 	.word	0x20000006
 800169c:	20000007 	.word	0x20000007
 80016a0:	20000008 	.word	0x20000008

080016a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b094      	sub	sp, #80	; 0x50
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 0318 	add.w	r3, r7, #24
 80016ae:	2238      	movs	r2, #56	; 0x38
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f008 feca 	bl	800a44c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016c6:	2000      	movs	r0, #0
 80016c8:	f003 fe62 	bl	8005390 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016cc:	2302      	movs	r3, #2
 80016ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d6:	2340      	movs	r3, #64	; 0x40
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016da:	2302      	movs	r3, #2
 80016dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016de:	2302      	movs	r3, #2
 80016e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80016e2:	2304      	movs	r3, #4
 80016e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016e6:	2355      	movs	r3, #85	; 0x55
 80016e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ea:	2302      	movs	r3, #2
 80016ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016ee:	2302      	movs	r3, #2
 80016f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016f2:	2302      	movs	r3, #2
 80016f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f6:	f107 0318 	add.w	r3, r7, #24
 80016fa:	4618      	mov	r0, r3
 80016fc:	f003 fefc 	bl	80054f8 <HAL_RCC_OscConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001706:	f000 fd19 	bl	800213c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800170a:	230f      	movs	r3, #15
 800170c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170e:	2303      	movs	r3, #3
 8001710:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2104      	movs	r1, #4
 8001722:	4618      	mov	r0, r3
 8001724:	f004 fa00 	bl	8005b28 <HAL_RCC_ClockConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800172e:	f000 fd05 	bl	800213c <Error_Handler>
  }
}
 8001732:	bf00      	nop
 8001734:	3750      	adds	r7, #80	; 0x50
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08c      	sub	sp, #48	; 0x30
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2220      	movs	r2, #32
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f008 fe79 	bl	800a44c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800175a:	4b38      	ldr	r3, [pc, #224]	; (800183c <MX_ADC3_Init+0x100>)
 800175c:	4a38      	ldr	r2, [pc, #224]	; (8001840 <MX_ADC3_Init+0x104>)
 800175e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001760:	4b36      	ldr	r3, [pc, #216]	; (800183c <MX_ADC3_Init+0x100>)
 8001762:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001766:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001768:	4b34      	ldr	r3, [pc, #208]	; (800183c <MX_ADC3_Init+0x100>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800176e:	4b33      	ldr	r3, [pc, #204]	; (800183c <MX_ADC3_Init+0x100>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001774:	4b31      	ldr	r3, [pc, #196]	; (800183c <MX_ADC3_Init+0x100>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800177a:	4b30      	ldr	r3, [pc, #192]	; (800183c <MX_ADC3_Init+0x100>)
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001780:	4b2e      	ldr	r3, [pc, #184]	; (800183c <MX_ADC3_Init+0x100>)
 8001782:	2204      	movs	r2, #4
 8001784:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001786:	4b2d      	ldr	r3, [pc, #180]	; (800183c <MX_ADC3_Init+0x100>)
 8001788:	2200      	movs	r2, #0
 800178a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800178c:	4b2b      	ldr	r3, [pc, #172]	; (800183c <MX_ADC3_Init+0x100>)
 800178e:	2200      	movs	r2, #0
 8001790:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001792:	4b2a      	ldr	r3, [pc, #168]	; (800183c <MX_ADC3_Init+0x100>)
 8001794:	2201      	movs	r2, #1
 8001796:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001798:	4b28      	ldr	r3, [pc, #160]	; (800183c <MX_ADC3_Init+0x100>)
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 80017a0:	4b26      	ldr	r3, [pc, #152]	; (800183c <MX_ADC3_Init+0x100>)
 80017a2:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <MX_ADC3_Init+0x100>)
 80017aa:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80017ae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80017b0:	4b22      	ldr	r3, [pc, #136]	; (800183c <MX_ADC3_Init+0x100>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017b8:	4b20      	ldr	r3, [pc, #128]	; (800183c <MX_ADC3_Init+0x100>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <MX_ADC3_Init+0x100>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_2;
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <MX_ADC3_Init+0x100>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <MX_ADC3_Init+0x100>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	649a      	str	r2, [r3, #72]	; 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_ADC3_Init+0x100>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_ADC3_Init+0x100>)
 80017da:	2201      	movs	r2, #1
 80017dc:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80017de:	4817      	ldr	r0, [pc, #92]	; (800183c <MX_ADC3_Init+0x100>)
 80017e0:	f001 fb5e 	bl	8002ea0 <HAL_ADC_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80017ea:	f000 fca7 	bl	800213c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80017f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f6:	4619      	mov	r1, r3
 80017f8:	4810      	ldr	r0, [pc, #64]	; (800183c <MX_ADC3_Init+0x100>)
 80017fa:	f002 fc3b 	bl	8004074 <HAL_ADCEx_MultiModeConfigChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8001804:	f000 fc9a 	bl	800213c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <MX_ADC3_Init+0x108>)
 800180a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800180c:	2306      	movs	r3, #6
 800180e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001814:	237f      	movs	r3, #127	; 0x7f
 8001816:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001818:	2304      	movs	r3, #4
 800181a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_ADC3_Init+0x100>)
 8001826:	f001 fddb 	bl	80033e0 <HAL_ADC_ConfigChannel>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_ADC3_Init+0xf8>
  {
    Error_Handler();
 8001830:	f000 fc84 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	3730      	adds	r7, #48	; 0x30
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	2000020c 	.word	0x2000020c
 8001840:	50000400 	.word	0x50000400
 8001844:	b6982000 	.word	0xb6982000

08001848 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800184e:	463b      	mov	r3, r7
 8001850:	2220      	movs	r2, #32
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f008 fdf9 	bl	800a44c <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800185a:	4b32      	ldr	r3, [pc, #200]	; (8001924 <MX_ADC4_Init+0xdc>)
 800185c:	4a32      	ldr	r2, [pc, #200]	; (8001928 <MX_ADC4_Init+0xe0>)
 800185e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001860:	4b30      	ldr	r3, [pc, #192]	; (8001924 <MX_ADC4_Init+0xdc>)
 8001862:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001866:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001868:	4b2e      	ldr	r3, [pc, #184]	; (8001924 <MX_ADC4_Init+0xdc>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800186e:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <MX_ADC4_Init+0xdc>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001874:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <MX_ADC4_Init+0xdc>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800187a:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <MX_ADC4_Init+0xdc>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001880:	4b28      	ldr	r3, [pc, #160]	; (8001924 <MX_ADC4_Init+0xdc>)
 8001882:	2204      	movs	r2, #4
 8001884:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001886:	4b27      	ldr	r3, [pc, #156]	; (8001924 <MX_ADC4_Init+0xdc>)
 8001888:	2200      	movs	r2, #0
 800188a:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800188c:	4b25      	ldr	r3, [pc, #148]	; (8001924 <MX_ADC4_Init+0xdc>)
 800188e:	2200      	movs	r2, #0
 8001890:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <MX_ADC4_Init+0xdc>)
 8001894:	2201      	movs	r2, #1
 8001896:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <MX_ADC4_Init+0xdc>)
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 80018a0:	4b20      	ldr	r3, [pc, #128]	; (8001924 <MX_ADC4_Init+0xdc>)
 80018a2:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80018a8:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <MX_ADC4_Init+0xdc>)
 80018aa:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80018ae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80018b0:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <MX_ADC4_Init+0xdc>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <MX_ADC4_Init+0xdc>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 80018be:	4b19      	ldr	r3, [pc, #100]	; (8001924 <MX_ADC4_Init+0xdc>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_2;
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <MX_ADC4_Init+0xdc>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80018cc:	4b15      	ldr	r3, [pc, #84]	; (8001924 <MX_ADC4_Init+0xdc>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <MX_ADC4_Init+0xdc>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <MX_ADC4_Init+0xdc>)
 80018da:	2201      	movs	r2, #1
 80018dc:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80018de:	4811      	ldr	r0, [pc, #68]	; (8001924 <MX_ADC4_Init+0xdc>)
 80018e0:	f001 fade 	bl	8002ea0 <HAL_ADC_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_ADC4_Init+0xa6>
  {
    Error_Handler();
 80018ea:	f000 fc27 	bl	800213c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP6;
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <MX_ADC4_Init+0xe4>)
 80018f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018f2:	2306      	movs	r3, #6
 80018f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018fa:	237f      	movs	r3, #127	; 0x7f
 80018fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018fe:	2304      	movs	r3, #4
 8001900:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001906:	463b      	mov	r3, r7
 8001908:	4619      	mov	r1, r3
 800190a:	4806      	ldr	r0, [pc, #24]	; (8001924 <MX_ADC4_Init+0xdc>)
 800190c:	f001 fd68 	bl	80033e0 <HAL_ADC_ConfigChannel>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_ADC4_Init+0xd2>
  {
    Error_Handler();
 8001916:	f000 fc11 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	3720      	adds	r7, #32
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000278 	.word	0x20000278
 8001928:	50000500 	.word	0x50000500
 800192c:	c75a0000 	.word	0xc75a0000

08001930 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001936:	463b      	mov	r3, r7
 8001938:	2220      	movs	r2, #32
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f008 fd85 	bl	800a44c <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001942:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <MX_ADC5_Init+0xdc>)
 8001944:	4a32      	ldr	r2, [pc, #200]	; (8001a10 <MX_ADC5_Init+0xe0>)
 8001946:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001948:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <MX_ADC5_Init+0xdc>)
 800194a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800194e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001950:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <MX_ADC5_Init+0xdc>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001956:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <MX_ADC5_Init+0xdc>)
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 800195c:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <MX_ADC5_Init+0xdc>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001962:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <MX_ADC5_Init+0xdc>)
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001968:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <MX_ADC5_Init+0xdc>)
 800196a:	2204      	movs	r2, #4
 800196c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800196e:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <MX_ADC5_Init+0xdc>)
 8001970:	2200      	movs	r2, #0
 8001972:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 8001974:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <MX_ADC5_Init+0xdc>)
 8001976:	2200      	movs	r2, #0
 8001978:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800197a:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <MX_ADC5_Init+0xdc>)
 800197c:	2201      	movs	r2, #1
 800197e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001980:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <MX_ADC5_Init+0xdc>)
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T7_TRGO;
 8001988:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <MX_ADC5_Init+0xdc>)
 800198a:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
 800198e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001990:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <MX_ADC5_Init+0xdc>)
 8001992:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001996:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001998:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <MX_ADC5_Init+0xdc>)
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019a0:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <MX_ADC5_Init+0xdc>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 80019a6:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <MX_ADC5_Init+0xdc>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_2;
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <MX_ADC5_Init+0xdc>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	645a      	str	r2, [r3, #68]	; 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <MX_ADC5_Init+0xdc>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	649a      	str	r2, [r3, #72]	; 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80019ba:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <MX_ADC5_Init+0xdc>)
 80019bc:	2200      	movs	r2, #0
 80019be:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <MX_ADC5_Init+0xdc>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80019c6:	4811      	ldr	r0, [pc, #68]	; (8001a0c <MX_ADC5_Init+0xdc>)
 80019c8:	f001 fa6a 	bl	8002ea0 <HAL_ADC_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_ADC5_Init+0xa6>
  {
    Error_Handler();
 80019d2:	f000 fbb3 	bl	800213c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP4;
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <MX_ADC5_Init+0xe4>)
 80019d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019da:	2306      	movs	r3, #6
 80019dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019e2:	237f      	movs	r3, #127	; 0x7f
 80019e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019e6:	2304      	movs	r3, #4
 80019e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80019ee:	463b      	mov	r3, r7
 80019f0:	4619      	mov	r1, r3
 80019f2:	4806      	ldr	r0, [pc, #24]	; (8001a0c <MX_ADC5_Init+0xdc>)
 80019f4:	f001 fcf4 	bl	80033e0 <HAL_ADC_ConfigChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_ADC5_Init+0xd2>
  {
    Error_Handler();
 80019fe:	f000 fb9d 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	3720      	adds	r7, #32
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200002e4 	.word	0x200002e4
 8001a10:	50000600 	.word	0x50000600
 8001a14:	94f00020 	.word	0x94f00020

08001a18 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	; 0x30
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001a1e:	463b      	mov	r3, r7
 8001a20:	2230      	movs	r2, #48	; 0x30
 8001a22:	2100      	movs	r1, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f008 fd11 	bl	800a44c <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <MX_DAC3_Init+0x80>)
 8001a2c:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <MX_DAC3_Init+0x84>)
 8001a2e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001a30:	4819      	ldr	r0, [pc, #100]	; (8001a98 <MX_DAC3_Init+0x80>)
 8001a32:	f002 fd36 	bl	80044a2 <HAL_DAC_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8001a3c:	f000 fb7e 	bl	800213c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001a40:	2302      	movs	r3, #2
 8001a42:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001a64:	463b      	mov	r3, r7
 8001a66:	2200      	movs	r2, #0
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480b      	ldr	r0, [pc, #44]	; (8001a98 <MX_DAC3_Init+0x80>)
 8001a6c:	f002 fdb6 	bl	80045dc <HAL_DAC_ConfigChannel>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8001a76:	f000 fb61 	bl	800213c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	2210      	movs	r2, #16
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_DAC3_Init+0x80>)
 8001a82:	f002 fdab 	bl	80045dc <HAL_DAC_ConfigChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8001a8c:	f000 fb56 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	3730      	adds	r7, #48	; 0x30
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000470 	.word	0x20000470
 8001a9c:	50001000 	.word	0x50001000

08001aa0 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	; 0x30
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	2230      	movs	r2, #48	; 0x30
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f008 fccd 	bl	800a44c <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <MX_DAC4_Init+0x6c>)
 8001ab4:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <MX_DAC4_Init+0x70>)
 8001ab6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8001ab8:	4814      	ldr	r0, [pc, #80]	; (8001b0c <MX_DAC4_Init+0x6c>)
 8001aba:	f002 fcf2 	bl	80044a2 <HAL_DAC_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 8001ac4:	f000 fb3a 	bl	800213c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001aec:	463b      	mov	r3, r7
 8001aee:	2200      	movs	r2, #0
 8001af0:	4619      	mov	r1, r3
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <MX_DAC4_Init+0x6c>)
 8001af4:	f002 fd72 	bl	80045dc <HAL_DAC_ConfigChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 8001afe:	f000 fb1d 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	3730      	adds	r7, #48	; 0x30
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000484 	.word	0x20000484
 8001b10:	50001400 	.word	0x50001400

08001b14 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <MX_OPAMP3_Init+0x54>)
 8001b1a:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <MX_OPAMP3_Init+0x58>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <MX_OPAMP3_Init+0x54>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <MX_OPAMP3_Init+0x54>)
 8001b26:	2240      	movs	r2, #64	; 0x40
 8001b28:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MX_OPAMP3_Init+0x54>)
 8001b2c:	220c      	movs	r2, #12
 8001b2e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <MX_OPAMP3_Init+0x54>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <MX_OPAMP3_Init+0x54>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <MX_OPAMP3_Init+0x54>)
 8001b3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <MX_OPAMP3_Init+0x54>)
 8001b46:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001b4a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <MX_OPAMP3_Init+0x54>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_OPAMP3_Init+0x54>)
 8001b54:	f003 fb1a 	bl	800518c <HAL_OPAMP_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8001b5e:	f000 faed 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000498 	.word	0x20000498
 8001b6c:	40010308 	.word	0x40010308

08001b70 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <MX_OPAMP4_Init+0x54>)
 8001b76:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <MX_OPAMP4_Init+0x58>)
 8001b78:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <MX_OPAMP4_Init+0x54>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_PGA_MODE;
 8001b80:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <MX_OPAMP4_Init+0x54>)
 8001b82:	2240      	movs	r2, #64	; 0x40
 8001b84:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <MX_OPAMP4_Init+0x54>)
 8001b88:	220c      	movs	r2, #12
 8001b8a:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = ENABLE;
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <MX_OPAMP4_Init+0x54>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001b92:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <MX_OPAMP4_Init+0x54>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  hopamp4.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001b98:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <MX_OPAMP4_Init+0x54>)
 8001b9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b9e:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp4.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <MX_OPAMP4_Init+0x54>)
 8001ba2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001ba6:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <MX_OPAMP4_Init+0x54>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_OPAMP4_Init+0x54>)
 8001bb0:	f003 faec 	bl	800518c <HAL_OPAMP_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_OPAMP4_Init+0x4e>
  {
    Error_Handler();
 8001bba:	f000 fabf 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200004d4 	.word	0x200004d4
 8001bc8:	4001030c 	.word	0x4001030c

08001bcc <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_OPAMP6_Init+0x54>)
 8001bd2:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <MX_OPAMP6_Init+0x58>)
 8001bd4:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <MX_OPAMP6_Init+0x54>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_PGA_MODE;
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_OPAMP6_Init+0x54>)
 8001bde:	2240      	movs	r2, #64	; 0x40
 8001be0:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <MX_OPAMP6_Init+0x54>)
 8001be4:	220c      	movs	r2, #12
 8001be6:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = ENABLE;
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <MX_OPAMP6_Init+0x54>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_OPAMP6_Init+0x54>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  hopamp6.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <MX_OPAMP6_Init+0x54>)
 8001bf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp6.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <MX_OPAMP6_Init+0x54>)
 8001bfe:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_OPAMP6_Init+0x54>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_OPAMP6_Init+0x54>)
 8001c0c:	f003 fabe 	bl	800518c <HAL_OPAMP_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_OPAMP6_Init+0x4e>
  {
    Error_Handler();
 8001c16:	f000 fa91 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000510 	.word	0x20000510
 8001c24:	40010314 	.word	0x40010314

08001c28 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c3a:	4a15      	ldr	r2, [pc, #84]	; (8001c90 <MX_TIM6_Init+0x68>)
 8001c3c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 170 - 1;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c40:	22a9      	movs	r2, #169	; 0xa9
 8001c42:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c50:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c58:	480c      	ldr	r0, [pc, #48]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c5a:	f004 fbcf 	bl	80063fc <HAL_TIM_Base_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c64:	f000 fa6a 	bl	800213c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4619      	mov	r1, r3
 8001c74:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_TIM6_Init+0x64>)
 8001c76:	f004 fd31 	bl	80066dc <HAL_TIMEx_MasterConfigSynchronization>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c80:	f000 fa5c 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000054c 	.word	0x2000054c
 8001c90:	40001000 	.word	0x40001000

08001c94 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <MX_TIM7_Init+0x64>)
 8001ca6:	4a15      	ldr	r2, [pc, #84]	; (8001cfc <MX_TIM7_Init+0x68>)
 8001ca8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10 - 1;
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <MX_TIM7_Init+0x64>)
 8001cac:	2209      	movs	r2, #9
 8001cae:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_TIM7_Init+0x64>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 136 - 1;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <MX_TIM7_Init+0x64>)
 8001cb8:	2287      	movs	r2, #135	; 0x87
 8001cba:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <MX_TIM7_Init+0x64>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001cc2:	480d      	ldr	r0, [pc, #52]	; (8001cf8 <MX_TIM7_Init+0x64>)
 8001cc4:	f004 fb9a 	bl	80063fc <HAL_TIM_Base_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001cce:	f000 fa35 	bl	800213c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cd2:	2320      	movs	r3, #32
 8001cd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4806      	ldr	r0, [pc, #24]	; (8001cf8 <MX_TIM7_Init+0x64>)
 8001ce0:	f004 fcfc 	bl	80066dc <HAL_TIMEx_MasterConfigSynchronization>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001cea:	f000 fa27 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000598 	.word	0x20000598
 8001cfc:	40001400 	.word	0x40001400

08001d00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <MX_USART1_UART_Init+0x90>)
 8001d06:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <MX_USART1_UART_Init+0x94>)
 8001d08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001d0a:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <MX_USART1_UART_Init+0x90>)
 8001d0c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001d10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d12:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <MX_USART1_UART_Init+0x90>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <MX_USART1_UART_Init+0x90>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <MX_USART1_UART_Init+0x90>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d24:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <MX_USART1_UART_Init+0x90>)
 8001d26:	220c      	movs	r2, #12
 8001d28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d2a:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <MX_USART1_UART_Init+0x90>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d30:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <MX_USART1_UART_Init+0x90>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <MX_USART1_UART_Init+0x90>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <MX_USART1_UART_Init+0x90>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <MX_USART1_UART_Init+0x90>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d48:	4811      	ldr	r0, [pc, #68]	; (8001d90 <MX_USART1_UART_Init+0x90>)
 8001d4a:	f004 fd5d 	bl	8006808 <HAL_UART_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d54:	f000 f9f2 	bl	800213c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d58:	2100      	movs	r1, #0
 8001d5a:	480d      	ldr	r0, [pc, #52]	; (8001d90 <MX_USART1_UART_Init+0x90>)
 8001d5c:	f005 fb24 	bl	80073a8 <HAL_UARTEx_SetTxFifoThreshold>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d66:	f000 f9e9 	bl	800213c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4808      	ldr	r0, [pc, #32]	; (8001d90 <MX_USART1_UART_Init+0x90>)
 8001d6e:	f005 fb59 	bl	8007424 <HAL_UARTEx_SetRxFifoThreshold>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d78:	f000 f9e0 	bl	800213c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d7c:	4804      	ldr	r0, [pc, #16]	; (8001d90 <MX_USART1_UART_Init+0x90>)
 8001d7e:	f005 fada 	bl	8007336 <HAL_UARTEx_DisableFifoMode>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d88:	f000 f9d8 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	200005e4 	.word	0x200005e4
 8001d94:	40013800 	.word	0x40013800

08001d98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <MX_DMA_Init+0x70>)
 8001da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da2:	4a19      	ldr	r2, [pc, #100]	; (8001e08 <MX_DMA_Init+0x70>)
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	6493      	str	r3, [r2, #72]	; 0x48
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <MX_DMA_Init+0x70>)
 8001dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <MX_DMA_Init+0x70>)
 8001db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dba:	4a13      	ldr	r2, [pc, #76]	; (8001e08 <MX_DMA_Init+0x70>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6493      	str	r3, [r2, #72]	; 0x48
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_DMA_Init+0x70>)
 8001dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	603b      	str	r3, [r7, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	200b      	movs	r0, #11
 8001dd4:	f002 fb31 	bl	800443a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001dd8:	200b      	movs	r0, #11
 8001dda:	f002 fb48 	bl	800446e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2100      	movs	r1, #0
 8001de2:	200c      	movs	r0, #12
 8001de4:	f002 fb29 	bl	800443a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001de8:	200c      	movs	r0, #12
 8001dea:	f002 fb40 	bl	800446e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2100      	movs	r1, #0
 8001df2:	200d      	movs	r0, #13
 8001df4:	f002 fb21 	bl	800443a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001df8:	200d      	movs	r0, #13
 8001dfa:	f002 fb38 	bl	800446e <HAL_NVIC_EnableIRQ>

}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000

08001e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
 8001e20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e22:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <MX_GPIO_Init+0xf8>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	4a37      	ldr	r2, [pc, #220]	; (8001f04 <MX_GPIO_Init+0xf8>)
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2e:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <MX_GPIO_Init+0xf8>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e3a:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <MX_GPIO_Init+0xf8>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	4a31      	ldr	r2, [pc, #196]	; (8001f04 <MX_GPIO_Init+0xf8>)
 8001e40:	f043 0320 	orr.w	r3, r3, #32
 8001e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e46:	4b2f      	ldr	r3, [pc, #188]	; (8001f04 <MX_GPIO_Init+0xf8>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <MX_GPIO_Init+0xf8>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	4a2b      	ldr	r2, [pc, #172]	; (8001f04 <MX_GPIO_Init+0xf8>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5e:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <MX_GPIO_Init+0xf8>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6a:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <MX_GPIO_Init+0xf8>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <MX_GPIO_Init+0xf8>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e76:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <MX_GPIO_Init+0xf8>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2120      	movs	r1, #32
 8001e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8a:	f003 f943 	bl	8005114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4818      	ldr	r0, [pc, #96]	; (8001f08 <MX_GPIO_Init+0xfc>)
 8001ea6:	f002 ffb3 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin PA3 */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|GPIO_PIN_3;
 8001eaa:	230c      	movs	r3, #12
 8001eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001eba:	230c      	movs	r3, #12
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec8:	f002 ffa2 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ecc:	2320      	movs	r3, #32
 8001ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee6:	f002 ff93 	bl	8004e10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	2028      	movs	r0, #40	; 0x28
 8001ef0:	f002 faa3 	bl	800443a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ef4:	2028      	movs	r0, #40	; 0x28
 8001ef6:	f002 faba 	bl	800446e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001efa:	bf00      	nop
 8001efc:	3728      	adds	r7, #40	; 0x28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	48000800 	.word	0x48000800

08001f0c <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  start = htim6.Instance->CNT;
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_ADC_ConvHalfCpltCallback+0x20>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	4a05      	ldr	r2, [pc, #20]	; (8001f30 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8001f1c:	6013      	str	r3, [r2, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	2000054c 	.word	0x2000054c
 8001f30:	20012674 	.word	0x20012674

08001f34 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001f34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  end = htim6.Instance->CNT;
 8001f3e:	4b69      	ldr	r3, [pc, #420]	; (80020e4 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	4a68      	ldr	r2, [pc, #416]	; (80020e8 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001f46:	6013      	str	r3, [r2, #0]
  if(end > start){
 8001f48:	4b67      	ldr	r3, [pc, #412]	; (80020e8 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b67      	ldr	r3, [pc, #412]	; (80020ec <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d948      	bls.n	8001fe6 <HAL_ADC_ConvCpltCallback+0xb2>
    dt = end - start;
 8001f54:	4b64      	ldr	r3, [pc, #400]	; (80020e8 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b64      	ldr	r3, [pc, #400]	; (80020ec <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	4a64      	ldr	r2, [pc, #400]	; (80020f0 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001f60:	6013      	str	r3, [r2, #0]
    count++;
 8001f62:	4b64      	ldr	r3, [pc, #400]	; (80020f4 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	1c54      	adds	r4, r2, #1
 8001f6a:	f143 0500 	adc.w	r5, r3, #0
 8001f6e:	4b61      	ldr	r3, [pc, #388]	; (80020f4 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8001f70:	e9c3 4500 	strd	r4, r5, [r3]
    avgtime = ( ( ( (count - 1)  * avgtime) + dt ) / (float) count);
 8001f74:	4b5f      	ldr	r3, [pc, #380]	; (80020f4 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f112 38ff 	adds.w	r8, r2, #4294967295	; 0xffffffff
 8001f7e:	f143 39ff 	adc.w	r9, r3, #4294967295	; 0xffffffff
 8001f82:	4640      	mov	r0, r8
 8001f84:	4649      	mov	r1, r9
 8001f86:	f7fe fb29 	bl	80005dc <__aeabi_ul2d>
 8001f8a:	4b5b      	ldr	r3, [pc, #364]	; (80020f8 <HAL_ADC_ConvCpltCallback+0x1c4>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f7fe fb5a 	bl	8000648 <__aeabi_dmul>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4614      	mov	r4, r2
 8001f9a:	461d      	mov	r5, r3
 8001f9c:	4b54      	ldr	r3, [pc, #336]	; (80020f0 <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fad7 	bl	8000554 <__aeabi_ui2d>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4620      	mov	r0, r4
 8001fac:	4629      	mov	r1, r5
 8001fae:	f7fe f995 	bl	80002dc <__adddf3>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4614      	mov	r4, r2
 8001fb8:	461d      	mov	r5, r3
 8001fba:	4b4e      	ldr	r3, [pc, #312]	; (80020f4 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f7fe ff30 	bl	8000e28 <__aeabi_ul2f>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fae4 	bl	8000598 <__aeabi_f2d>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	4629      	mov	r1, r5
 8001fd8:	f7fe fc60 	bl	800089c <__aeabi_ddiv>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4945      	ldr	r1, [pc, #276]	; (80020f8 <HAL_ADC_ConvCpltCallback+0x1c4>)
 8001fe2:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if(finished_1 && hadc == &hadc3){
 8001fe6:	4b45      	ldr	r3, [pc, #276]	; (80020fc <HAL_ADC_ConvCpltCallback+0x1c8>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d01f      	beq.n	800202e <HAL_ADC_ConvCpltCallback+0xfa>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a43      	ldr	r2, [pc, #268]	; (8002100 <HAL_ADC_ConvCpltCallback+0x1cc>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d11b      	bne.n	800202e <HAL_ADC_ConvCpltCallback+0xfa>
	  adc3_current++;
 8001ff6:	4b43      	ldr	r3, [pc, #268]	; (8002104 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	4a41      	ldr	r2, [pc, #260]	; (8002104 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8001ffe:	6013      	str	r3, [r2, #0]
	  //Not using memcpy because we want to convert to 16-bit unsigned int
	  //memcpy(sample1, adc_3_buffer, sizeof(adc_3_buffer));
	  for(int i = 0 ; i < buffer_size ; i++){
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
 8002004:	e00b      	b.n	800201e <HAL_ADC_ConvCpltCallback+0xea>
		  sample1[i] = (uint16_t) adc_3_buffer[i];
 8002006:	4a40      	ldr	r2, [pc, #256]	; (8002108 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200e:	b299      	uxth	r1, r3
 8002010:	4a3e      	ldr	r2, [pc, #248]	; (800210c <HAL_ADC_ConvCpltCallback+0x1d8>)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int i = 0 ; i < buffer_size ; i++){
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	3301      	adds	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002024:	dbef      	blt.n	8002006 <HAL_ADC_ConvCpltCallback+0xd2>
	  }

	  finished_1 = false;
 8002026:	4b35      	ldr	r3, [pc, #212]	; (80020fc <HAL_ADC_ConvCpltCallback+0x1c8>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	e054      	b.n	80020d8 <HAL_ADC_ConvCpltCallback+0x1a4>
  } else if(finished_2 && hadc == &hadc4){
 800202e:	4b38      	ldr	r3, [pc, #224]	; (8002110 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01f      	beq.n	8002076 <HAL_ADC_ConvCpltCallback+0x142>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a36      	ldr	r2, [pc, #216]	; (8002114 <HAL_ADC_ConvCpltCallback+0x1e0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d11b      	bne.n	8002076 <HAL_ADC_ConvCpltCallback+0x142>
	  adc4_current++;
 800203e:	4b36      	ldr	r3, [pc, #216]	; (8002118 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	4a34      	ldr	r2, [pc, #208]	; (8002118 <HAL_ADC_ConvCpltCallback+0x1e4>)
 8002046:	6013      	str	r3, [r2, #0]
	  for(int i = 0 ; i < buffer_size ; i++){
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	e00b      	b.n	8002066 <HAL_ADC_ConvCpltCallback+0x132>
		  sample2[i] = (uint16_t) adc_4_buffer[i];
 800204e:	4a33      	ldr	r2, [pc, #204]	; (800211c <HAL_ADC_ConvCpltCallback+0x1e8>)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002056:	b299      	uxth	r1, r3
 8002058:	4a31      	ldr	r2, [pc, #196]	; (8002120 <HAL_ADC_ConvCpltCallback+0x1ec>)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int i = 0 ; i < buffer_size ; i++){
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	3301      	adds	r3, #1
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800206c:	dbef      	blt.n	800204e <HAL_ADC_ConvCpltCallback+0x11a>
	  }

	  finished_2 = false;
 800206e:	4b28      	ldr	r3, [pc, #160]	; (8002110 <HAL_ADC_ConvCpltCallback+0x1dc>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	e030      	b.n	80020d8 <HAL_ADC_ConvCpltCallback+0x1a4>
  } else if(finished_3 && hadc == &hadc5){
 8002076:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d01f      	beq.n	80020be <HAL_ADC_ConvCpltCallback+0x18a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a29      	ldr	r2, [pc, #164]	; (8002128 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d11b      	bne.n	80020be <HAL_ADC_ConvCpltCallback+0x18a>
	  adc5_current++;
 8002086:	4b29      	ldr	r3, [pc, #164]	; (800212c <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	4a27      	ldr	r2, [pc, #156]	; (800212c <HAL_ADC_ConvCpltCallback+0x1f8>)
 800208e:	6013      	str	r3, [r2, #0]

	  for(int i = 0 ; i < buffer_size ; i++){
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	e00b      	b.n	80020ae <HAL_ADC_ConvCpltCallback+0x17a>
		  sample3[i] = (uint16_t) adc_5_buffer[i];
 8002096:	4a26      	ldr	r2, [pc, #152]	; (8002130 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209e:	b299      	uxth	r1, r3
 80020a0:	4a24      	ldr	r2, [pc, #144]	; (8002134 <HAL_ADC_ConvCpltCallback+0x200>)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int i = 0 ; i < buffer_size ; i++){
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3301      	adds	r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b4:	dbef      	blt.n	8002096 <HAL_ADC_ConvCpltCallback+0x162>
	  }

	  finished_3 = false;
 80020b6:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	e00c      	b.n	80020d8 <HAL_ADC_ConvCpltCallback+0x1a4>
  } else if(count > 30){
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_ADC_ConvCpltCallback+0x1c0>)
 80020c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c4:	2a1f      	cmp	r2, #31
 80020c6:	f173 0300 	sbcs.w	r3, r3, #0
 80020ca:	d305      	bcc.n	80020d8 <HAL_ADC_ConvCpltCallback+0x1a4>
	  missed_samples++;
 80020cc:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <HAL_ADC_ConvCpltCallback+0x204>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	3301      	adds	r3, #1
 80020d2:	4a19      	ldr	r2, [pc, #100]	; (8002138 <HAL_ADC_ConvCpltCallback+0x204>)
 80020d4:	6013      	str	r3, [r2, #0]
  }
}
 80020d6:	e7ff      	b.n	80020d8 <HAL_ADC_ConvCpltCallback+0x1a4>
 80020d8:	bf00      	nop
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020e2:	bf00      	nop
 80020e4:	2000054c 	.word	0x2000054c
 80020e8:	20012678 	.word	0x20012678
 80020ec:	20012674 	.word	0x20012674
 80020f0:	2001267c 	.word	0x2001267c
 80020f4:	20012688 	.word	0x20012688
 80020f8:	20012690 	.word	0x20012690
 80020fc:	20000006 	.word	0x20000006
 8002100:	2000020c 	.word	0x2000020c
 8002104:	200126ac 	.word	0x200126ac
 8002108:	20000674 	.word	0x20000674
 800210c:	2000c674 	.word	0x2000c674
 8002110:	20000007 	.word	0x20000007
 8002114:	20000278 	.word	0x20000278
 8002118:	200126b0 	.word	0x200126b0
 800211c:	20004674 	.word	0x20004674
 8002120:	2000e674 	.word	0x2000e674
 8002124:	20000008 	.word	0x20000008
 8002128:	200002e4 	.word	0x200002e4
 800212c:	200126b4 	.word	0x200126b4
 8002130:	20008674 	.word	0x20008674
 8002134:	20010674 	.word	0x20010674
 8002138:	200146f4 	.word	0x200146f4

0800213c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002140:	b672      	cpsid	i
}
 8002142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002144:	e7fe      	b.n	8002144 <Error_Handler+0x8>
	...

08002148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <HAL_MspInit+0x44>)
 8002150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002152:	4a0e      	ldr	r2, [pc, #56]	; (800218c <HAL_MspInit+0x44>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6613      	str	r3, [r2, #96]	; 0x60
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_MspInit+0x44>)
 800215c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_MspInit+0x44>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	4a08      	ldr	r2, [pc, #32]	; (800218c <HAL_MspInit+0x44>)
 800216c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002170:	6593      	str	r3, [r2, #88]	; 0x58
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_MspInit+0x44>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800217e:	f003 f9ab 	bl	80054d8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000

08002190 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b09a      	sub	sp, #104	; 0x68
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2254      	movs	r2, #84	; 0x54
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f008 f953 	bl	800a44c <memset>
  if(hadc->Instance==ADC3)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a81      	ldr	r2, [pc, #516]	; (80023b0 <HAL_ADC_MspInit+0x220>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d150      	bne.n	8002252 <HAL_ADC_MspInit+0xc2>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80021b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021b4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80021b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80021ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	4618      	mov	r0, r3
 80021c2:	f003 fecd 	bl	8005f60 <HAL_RCCEx_PeriphCLKConfig>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 80021cc:	f7ff ffb6 	bl	800213c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC345_CLK_ENABLED++;
 80021d0:	4b78      	ldr	r3, [pc, #480]	; (80023b4 <HAL_ADC_MspInit+0x224>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	3301      	adds	r3, #1
 80021d6:	4a77      	ldr	r2, [pc, #476]	; (80023b4 <HAL_ADC_MspInit+0x224>)
 80021d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80021da:	4b76      	ldr	r3, [pc, #472]	; (80023b4 <HAL_ADC_MspInit+0x224>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d10b      	bne.n	80021fa <HAL_ADC_MspInit+0x6a>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80021e2:	4b75      	ldr	r3, [pc, #468]	; (80023b8 <HAL_ADC_MspInit+0x228>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e6:	4a74      	ldr	r2, [pc, #464]	; (80023b8 <HAL_ADC_MspInit+0x228>)
 80021e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ee:	4b72      	ldr	r3, [pc, #456]	; (80023b8 <HAL_ADC_MspInit+0x228>)
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]
    }

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Channel1;
 80021fa:	4b70      	ldr	r3, [pc, #448]	; (80023bc <HAL_ADC_MspInit+0x22c>)
 80021fc:	4a70      	ldr	r2, [pc, #448]	; (80023c0 <HAL_ADC_MspInit+0x230>)
 80021fe:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002200:	4b6e      	ldr	r3, [pc, #440]	; (80023bc <HAL_ADC_MspInit+0x22c>)
 8002202:	2225      	movs	r2, #37	; 0x25
 8002204:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002206:	4b6d      	ldr	r3, [pc, #436]	; (80023bc <HAL_ADC_MspInit+0x22c>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800220c:	4b6b      	ldr	r3, [pc, #428]	; (80023bc <HAL_ADC_MspInit+0x22c>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002212:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <HAL_ADC_MspInit+0x22c>)
 8002214:	2280      	movs	r2, #128	; 0x80
 8002216:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002218:	4b68      	ldr	r3, [pc, #416]	; (80023bc <HAL_ADC_MspInit+0x22c>)
 800221a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800221e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002220:	4b66      	ldr	r3, [pc, #408]	; (80023bc <HAL_ADC_MspInit+0x22c>)
 8002222:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002226:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002228:	4b64      	ldr	r3, [pc, #400]	; (80023bc <HAL_ADC_MspInit+0x22c>)
 800222a:	2220      	movs	r2, #32
 800222c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800222e:	4b63      	ldr	r3, [pc, #396]	; (80023bc <HAL_ADC_MspInit+0x22c>)
 8002230:	2200      	movs	r2, #0
 8002232:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002234:	4861      	ldr	r0, [pc, #388]	; (80023bc <HAL_ADC_MspInit+0x22c>)
 8002236:	f002 fb79 	bl	800492c <HAL_DMA_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8002240:	f7ff ff7c 	bl	800213c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a5d      	ldr	r2, [pc, #372]	; (80023bc <HAL_ADC_MspInit+0x22c>)
 8002248:	655a      	str	r2, [r3, #84]	; 0x54
 800224a:	4a5c      	ldr	r2, [pc, #368]	; (80023bc <HAL_ADC_MspInit+0x22c>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8002250:	e0aa      	b.n	80023a8 <HAL_ADC_MspInit+0x218>
  else if(hadc->Instance==ADC4)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a5b      	ldr	r2, [pc, #364]	; (80023c4 <HAL_ADC_MspInit+0x234>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d150      	bne.n	80022fe <HAL_ADC_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800225c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002260:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8002262:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002266:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	4618      	mov	r0, r3
 800226e:	f003 fe77 	bl	8005f60 <HAL_RCCEx_PeriphCLKConfig>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_ADC_MspInit+0xec>
      Error_Handler();
 8002278:	f7ff ff60 	bl	800213c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800227c:	4b4d      	ldr	r3, [pc, #308]	; (80023b4 <HAL_ADC_MspInit+0x224>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3301      	adds	r3, #1
 8002282:	4a4c      	ldr	r2, [pc, #304]	; (80023b4 <HAL_ADC_MspInit+0x224>)
 8002284:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8002286:	4b4b      	ldr	r3, [pc, #300]	; (80023b4 <HAL_ADC_MspInit+0x224>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d10b      	bne.n	80022a6 <HAL_ADC_MspInit+0x116>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800228e:	4b4a      	ldr	r3, [pc, #296]	; (80023b8 <HAL_ADC_MspInit+0x228>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	4a49      	ldr	r2, [pc, #292]	; (80023b8 <HAL_ADC_MspInit+0x228>)
 8002294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229a:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <HAL_ADC_MspInit+0x228>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
    hdma_adc4.Instance = DMA1_Channel2;
 80022a6:	4b48      	ldr	r3, [pc, #288]	; (80023c8 <HAL_ADC_MspInit+0x238>)
 80022a8:	4a48      	ldr	r2, [pc, #288]	; (80023cc <HAL_ADC_MspInit+0x23c>)
 80022aa:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80022ac:	4b46      	ldr	r3, [pc, #280]	; (80023c8 <HAL_ADC_MspInit+0x238>)
 80022ae:	2226      	movs	r2, #38	; 0x26
 80022b0:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022b2:	4b45      	ldr	r3, [pc, #276]	; (80023c8 <HAL_ADC_MspInit+0x238>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b8:	4b43      	ldr	r3, [pc, #268]	; (80023c8 <HAL_ADC_MspInit+0x238>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80022be:	4b42      	ldr	r3, [pc, #264]	; (80023c8 <HAL_ADC_MspInit+0x238>)
 80022c0:	2280      	movs	r2, #128	; 0x80
 80022c2:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022c4:	4b40      	ldr	r3, [pc, #256]	; (80023c8 <HAL_ADC_MspInit+0x238>)
 80022c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ca:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022cc:	4b3e      	ldr	r3, [pc, #248]	; (80023c8 <HAL_ADC_MspInit+0x238>)
 80022ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022d2:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80022d4:	4b3c      	ldr	r3, [pc, #240]	; (80023c8 <HAL_ADC_MspInit+0x238>)
 80022d6:	2220      	movs	r2, #32
 80022d8:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80022da:	4b3b      	ldr	r3, [pc, #236]	; (80023c8 <HAL_ADC_MspInit+0x238>)
 80022dc:	2200      	movs	r2, #0
 80022de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80022e0:	4839      	ldr	r0, [pc, #228]	; (80023c8 <HAL_ADC_MspInit+0x238>)
 80022e2:	f002 fb23 	bl	800492c <HAL_DMA_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_ADC_MspInit+0x160>
      Error_Handler();
 80022ec:	f7ff ff26 	bl	800213c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a35      	ldr	r2, [pc, #212]	; (80023c8 <HAL_ADC_MspInit+0x238>)
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54
 80022f6:	4a34      	ldr	r2, [pc, #208]	; (80023c8 <HAL_ADC_MspInit+0x238>)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6293      	str	r3, [r2, #40]	; 0x28
}
 80022fc:	e054      	b.n	80023a8 <HAL_ADC_MspInit+0x218>
  else if(hadc->Instance==ADC5)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a33      	ldr	r2, [pc, #204]	; (80023d0 <HAL_ADC_MspInit+0x240>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d14f      	bne.n	80023a8 <HAL_ADC_MspInit+0x218>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8002308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800230c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800230e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002312:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4618      	mov	r0, r3
 800231a:	f003 fe21 	bl	8005f60 <HAL_RCCEx_PeriphCLKConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_ADC_MspInit+0x198>
      Error_Handler();
 8002324:	f7ff ff0a 	bl	800213c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8002328:	4b22      	ldr	r3, [pc, #136]	; (80023b4 <HAL_ADC_MspInit+0x224>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	4a21      	ldr	r2, [pc, #132]	; (80023b4 <HAL_ADC_MspInit+0x224>)
 8002330:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_ADC_MspInit+0x224>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10b      	bne.n	8002352 <HAL_ADC_MspInit+0x1c2>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800233a:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <HAL_ADC_MspInit+0x228>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	4a1e      	ldr	r2, [pc, #120]	; (80023b8 <HAL_ADC_MspInit+0x228>)
 8002340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <HAL_ADC_MspInit+0x228>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
    hdma_adc5.Instance = DMA1_Channel3;
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 8002354:	4a20      	ldr	r2, [pc, #128]	; (80023d8 <HAL_ADC_MspInit+0x248>)
 8002356:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 800235a:	2227      	movs	r2, #39	; 0x27
 800235c:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800235e:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8002364:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 8002366:	2200      	movs	r2, #0
 8002368:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 800236c:	2280      	movs	r2, #128	; 0x80
 800236e:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002370:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 8002372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002376:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002378:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 800237a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800237e:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 8002382:	2220      	movs	r2, #32
 8002384:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8002386:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 8002388:	2200      	movs	r2, #0
 800238a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800238c:	4811      	ldr	r0, [pc, #68]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 800238e:	f002 facd 	bl	800492c <HAL_DMA_Init>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_ADC_MspInit+0x20c>
      Error_Handler();
 8002398:	f7ff fed0 	bl	800213c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a0d      	ldr	r2, [pc, #52]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 80023a0:	655a      	str	r2, [r3, #84]	; 0x54
 80023a2:	4a0c      	ldr	r2, [pc, #48]	; (80023d4 <HAL_ADC_MspInit+0x244>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80023a8:	bf00      	nop
 80023aa:	3768      	adds	r7, #104	; 0x68
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	50000400 	.word	0x50000400
 80023b4:	200146f8 	.word	0x200146f8
 80023b8:	40021000 	.word	0x40021000
 80023bc:	20000350 	.word	0x20000350
 80023c0:	40020008 	.word	0x40020008
 80023c4:	50000500 	.word	0x50000500
 80023c8:	200003b0 	.word	0x200003b0
 80023cc:	4002001c 	.word	0x4002001c
 80023d0:	50000600 	.word	0x50000600
 80023d4:	20000410 	.word	0x20000410
 80023d8:	40020030 	.word	0x40020030

080023dc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC3)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a13      	ldr	r2, [pc, #76]	; (8002438 <HAL_DAC_MspInit+0x5c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d10c      	bne.n	8002408 <HAL_DAC_MspInit+0x2c>
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80023ee:	4b13      	ldr	r3, [pc, #76]	; (800243c <HAL_DAC_MspInit+0x60>)
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	4a12      	ldr	r2, [pc, #72]	; (800243c <HAL_DAC_MspInit+0x60>)
 80023f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <HAL_DAC_MspInit+0x60>)
 80023fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8002406:	e010      	b.n	800242a <HAL_DAC_MspInit+0x4e>
  else if(hdac->Instance==DAC4)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0c      	ldr	r2, [pc, #48]	; (8002440 <HAL_DAC_MspInit+0x64>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d10b      	bne.n	800242a <HAL_DAC_MspInit+0x4e>
    __HAL_RCC_DAC4_CLK_ENABLE();
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_DAC_MspInit+0x60>)
 8002414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002416:	4a09      	ldr	r2, [pc, #36]	; (800243c <HAL_DAC_MspInit+0x60>)
 8002418:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800241c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800241e:	4b07      	ldr	r3, [pc, #28]	; (800243c <HAL_DAC_MspInit+0x60>)
 8002420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002422:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	50001000 	.word	0x50001000
 800243c:	40021000 	.word	0x40021000
 8002440:	50001400 	.word	0x50001400

08002444 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP3)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a2e      	ldr	r2, [pc, #184]	; (800251c <HAL_OPAMP_MspInit+0xd8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d118      	bne.n	8002498 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP3_MspInit 0 */

  /* USER CODE END OPAMP3_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002466:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <HAL_OPAMP_MspInit+0xdc>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246a:	4a2d      	ldr	r2, [pc, #180]	; (8002520 <HAL_OPAMP_MspInit+0xdc>)
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002472:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <HAL_OPAMP_MspInit+0xdc>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]
    /**OPAMP3 GPIO Configuration
    PB2     ------> OPAMP3_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800247e:	2304      	movs	r3, #4
 8002480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002482:	2303      	movs	r3, #3
 8002484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4619      	mov	r1, r3
 8002490:	4824      	ldr	r0, [pc, #144]	; (8002524 <HAL_OPAMP_MspInit+0xe0>)
 8002492:	f002 fcbd 	bl	8004e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 8002496:	e03c      	b.n	8002512 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP4)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a22      	ldr	r2, [pc, #136]	; (8002528 <HAL_OPAMP_MspInit+0xe4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d119      	bne.n	80024d6 <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a2:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <HAL_OPAMP_MspInit+0xdc>)
 80024a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a6:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <HAL_OPAMP_MspInit+0xdc>)
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ae:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HAL_OPAMP_MspInit+0xdc>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024c0:	2303      	movs	r3, #3
 80024c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4619      	mov	r1, r3
 80024ce:	4815      	ldr	r0, [pc, #84]	; (8002524 <HAL_OPAMP_MspInit+0xe0>)
 80024d0:	f002 fc9e 	bl	8004e10 <HAL_GPIO_Init>
}
 80024d4:	e01d      	b.n	8002512 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP6)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a14      	ldr	r2, [pc, #80]	; (800252c <HAL_OPAMP_MspInit+0xe8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d118      	bne.n	8002512 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HAL_OPAMP_MspInit+0xdc>)
 80024e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e4:	4a0e      	ldr	r2, [pc, #56]	; (8002520 <HAL_OPAMP_MspInit+0xdc>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <HAL_OPAMP_MspInit+0xdc>)
 80024ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024f8:	2302      	movs	r3, #2
 80024fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024fc:	2303      	movs	r3, #3
 80024fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	4619      	mov	r1, r3
 800250a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800250e:	f002 fc7f 	bl	8004e10 <HAL_GPIO_Init>
}
 8002512:	bf00      	nop
 8002514:	3728      	adds	r7, #40	; 0x28
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40010308 	.word	0x40010308
 8002520:	40021000 	.word	0x40021000
 8002524:	48000400 	.word	0x48000400
 8002528:	4001030c 	.word	0x4001030c
 800252c:	40010314 	.word	0x40010314

08002530 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a13      	ldr	r2, [pc, #76]	; (800258c <HAL_TIM_Base_MspInit+0x5c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d10c      	bne.n	800255c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002542:	4b13      	ldr	r3, [pc, #76]	; (8002590 <HAL_TIM_Base_MspInit+0x60>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	4a12      	ldr	r2, [pc, #72]	; (8002590 <HAL_TIM_Base_MspInit+0x60>)
 8002548:	f043 0310 	orr.w	r3, r3, #16
 800254c:	6593      	str	r3, [r2, #88]	; 0x58
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <HAL_TIM_Base_MspInit+0x60>)
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800255a:	e010      	b.n	800257e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a0c      	ldr	r2, [pc, #48]	; (8002594 <HAL_TIM_Base_MspInit+0x64>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d10b      	bne.n	800257e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_TIM_Base_MspInit+0x60>)
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	4a09      	ldr	r2, [pc, #36]	; (8002590 <HAL_TIM_Base_MspInit+0x60>)
 800256c:	f043 0320 	orr.w	r3, r3, #32
 8002570:	6593      	str	r3, [r2, #88]	; 0x58
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <HAL_TIM_Base_MspInit+0x60>)
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
}
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40001000 	.word	0x40001000
 8002590:	40021000 	.word	0x40021000
 8002594:	40001400 	.word	0x40001400

08002598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b09e      	sub	sp, #120	; 0x78
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025b0:	f107 0310 	add.w	r3, r7, #16
 80025b4:	2254      	movs	r2, #84	; 0x54
 80025b6:	2100      	movs	r1, #0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f007 ff47 	bl	800a44c <memset>
  if(huart->Instance==USART1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1e      	ldr	r2, [pc, #120]	; (800263c <HAL_UART_MspInit+0xa4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d135      	bne.n	8002634 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025c8:	2301      	movs	r3, #1
 80025ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	4618      	mov	r0, r3
 80025d6:	f003 fcc3 	bl	8005f60 <HAL_RCCEx_PeriphCLKConfig>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025e0:	f7ff fdac 	bl	800213c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025e4:	4b16      	ldr	r3, [pc, #88]	; (8002640 <HAL_UART_MspInit+0xa8>)
 80025e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e8:	4a15      	ldr	r2, [pc, #84]	; (8002640 <HAL_UART_MspInit+0xa8>)
 80025ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ee:	6613      	str	r3, [r2, #96]	; 0x60
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <HAL_UART_MspInit+0xa8>)
 80025f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fc:	4b10      	ldr	r3, [pc, #64]	; (8002640 <HAL_UART_MspInit+0xa8>)
 80025fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002600:	4a0f      	ldr	r2, [pc, #60]	; (8002640 <HAL_UART_MspInit+0xa8>)
 8002602:	f043 0304 	orr.w	r3, r3, #4
 8002606:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002608:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_UART_MspInit+0xa8>)
 800260a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002614:	2330      	movs	r3, #48	; 0x30
 8002616:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002624:	2307      	movs	r3, #7
 8002626:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002628:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800262c:	4619      	mov	r1, r3
 800262e:	4805      	ldr	r0, [pc, #20]	; (8002644 <HAL_UART_MspInit+0xac>)
 8002630:	f002 fbee 	bl	8004e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002634:	bf00      	nop
 8002636:	3778      	adds	r7, #120	; 0x78
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40013800 	.word	0x40013800
 8002640:	40021000 	.word	0x40021000
 8002644:	48000800 	.word	0x48000800

08002648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800264c:	e7fe      	b.n	800264c <NMI_Handler+0x4>

0800264e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002652:	e7fe      	b.n	8002652 <HardFault_Handler+0x4>

08002654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <MemManage_Handler+0x4>

0800265a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800265e:	e7fe      	b.n	800265e <BusFault_Handler+0x4>

08002660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002664:	e7fe      	b.n	8002664 <UsageFault_Handler+0x4>

08002666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002694:	f000 f97c 	bl	8002990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}

0800269c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80026a0:	4802      	ldr	r0, [pc, #8]	; (80026ac <DMA1_Channel1_IRQHandler+0x10>)
 80026a2:	f002 fa66 	bl	8004b72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000350 	.word	0x20000350

080026b0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <DMA1_Channel2_IRQHandler+0x10>)
 80026b6:	f002 fa5c 	bl	8004b72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200003b0 	.word	0x200003b0

080026c4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80026c8:	4802      	ldr	r0, [pc, #8]	; (80026d4 <DMA1_Channel3_IRQHandler+0x10>)
 80026ca:	f002 fa52 	bl	8004b72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000410 	.word	0x20000410

080026d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80026dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026e0:	f002 fd30 	bl	8005144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return 1;
 80026ec:	2301      	movs	r3, #1
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <_kill>:

int _kill(int pid, int sig)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002702:	f007 ff49 	bl	800a598 <__errno>
 8002706:	4603      	mov	r3, r0
 8002708:	2216      	movs	r2, #22
 800270a:	601a      	str	r2, [r3, #0]
  return -1;
 800270c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002710:	4618      	mov	r0, r3
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <_exit>:

void _exit (int status)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002720:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ffe7 	bl	80026f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800272a:	e7fe      	b.n	800272a <_exit+0x12>

0800272c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	e00a      	b.n	8002754 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800273e:	f3af 8000 	nop.w
 8002742:	4601      	mov	r1, r0
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	60ba      	str	r2, [r7, #8]
 800274a:	b2ca      	uxtb	r2, r1
 800274c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	3301      	adds	r3, #1
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	429a      	cmp	r2, r3
 800275a:	dbf0      	blt.n	800273e <_read+0x12>
  }

  return len;
 800275c:	687b      	ldr	r3, [r7, #4]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	e009      	b.n	800278c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	60ba      	str	r2, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3301      	adds	r3, #1
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	429a      	cmp	r2, r3
 8002792:	dbf1      	blt.n	8002778 <_write+0x12>
  }
  return len;
 8002794:	687b      	ldr	r3, [r7, #4]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <_close>:

int _close(int file)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027c6:	605a      	str	r2, [r3, #4]
  return 0;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <_isatty>:

int _isatty(int file)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027de:	2301      	movs	r3, #1
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002810:	4a14      	ldr	r2, [pc, #80]	; (8002864 <_sbrk+0x5c>)
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <_sbrk+0x60>)
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800281c:	4b13      	ldr	r3, [pc, #76]	; (800286c <_sbrk+0x64>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d102      	bne.n	800282a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <_sbrk+0x64>)
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <_sbrk+0x68>)
 8002828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <_sbrk+0x64>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	429a      	cmp	r2, r3
 8002836:	d207      	bcs.n	8002848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002838:	f007 feae 	bl	800a598 <__errno>
 800283c:	4603      	mov	r3, r0
 800283e:	220c      	movs	r2, #12
 8002840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002846:	e009      	b.n	800285c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <_sbrk+0x64>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <_sbrk+0x64>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	4a05      	ldr	r2, [pc, #20]	; (800286c <_sbrk+0x64>)
 8002858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800285a:	68fb      	ldr	r3, [r7, #12]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20020000 	.word	0x20020000
 8002868:	00000400 	.word	0x00000400
 800286c:	200146fc 	.word	0x200146fc
 8002870:	20014850 	.word	0x20014850

08002874 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <SystemInit+0x20>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	4a05      	ldr	r2, [pc, #20]	; (8002894 <SystemInit+0x20>)
 8002880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002898:	480d      	ldr	r0, [pc, #52]	; (80028d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800289a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800289c:	480d      	ldr	r0, [pc, #52]	; (80028d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800289e:	490e      	ldr	r1, [pc, #56]	; (80028d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028a0:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <LoopForever+0xe>)
  movs r3, #0
 80028a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80028a4:	e002      	b.n	80028ac <LoopCopyDataInit>

080028a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028aa:	3304      	adds	r3, #4

080028ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028b0:	d3f9      	bcc.n	80028a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028b2:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028b4:	4c0b      	ldr	r4, [pc, #44]	; (80028e4 <LoopForever+0x16>)
  movs r3, #0
 80028b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b8:	e001      	b.n	80028be <LoopFillZerobss>

080028ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028bc:	3204      	adds	r2, #4

080028be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028c0:	d3fb      	bcc.n	80028ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028c2:	f7ff ffd7 	bl	8002874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028c6:	f007 fe6d 	bl	800a5a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028ca:	f7fe fc71 	bl	80011b0 <main>

080028ce <LoopForever>:

LoopForever:
    b LoopForever
 80028ce:	e7fe      	b.n	80028ce <LoopForever>
  ldr   r0, =_estack
 80028d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028d8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80028dc:	0801f710 	.word	0x0801f710
  ldr r2, =_sbss
 80028e0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80028e4:	20014850 	.word	0x20014850

080028e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028e8:	e7fe      	b.n	80028e8 <ADC1_2_IRQHandler>

080028ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028f4:	2003      	movs	r0, #3
 80028f6:	f001 fd95 	bl	8004424 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028fa:	2000      	movs	r0, #0
 80028fc:	f000 f80e 	bl	800291c <HAL_InitTick>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	71fb      	strb	r3, [r7, #7]
 800290a:	e001      	b.n	8002910 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800290c:	f7ff fc1c 	bl	8002148 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002910:	79fb      	ldrb	r3, [r7, #7]

}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002928:	4b16      	ldr	r3, [pc, #88]	; (8002984 <HAL_InitTick+0x68>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d022      	beq.n	8002976 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002930:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_InitTick+0x6c>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b13      	ldr	r3, [pc, #76]	; (8002984 <HAL_InitTick+0x68>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800293c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002940:	fbb2 f3f3 	udiv	r3, r2, r3
 8002944:	4618      	mov	r0, r3
 8002946:	f001 fda0 	bl	800448a <HAL_SYSTICK_Config>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10f      	bne.n	8002970 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b0f      	cmp	r3, #15
 8002954:	d809      	bhi.n	800296a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002956:	2200      	movs	r2, #0
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800295e:	f001 fd6c 	bl	800443a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002962:	4a0a      	ldr	r2, [pc, #40]	; (800298c <HAL_InitTick+0x70>)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	e007      	b.n	800297a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	73fb      	strb	r3, [r7, #15]
 800296e:	e004      	b.n	800297a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
 8002974:	e001      	b.n	800297a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800297a:	7bfb      	ldrb	r3, [r7, #15]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20000014 	.word	0x20000014
 8002988:	2000000c 	.word	0x2000000c
 800298c:	20000010 	.word	0x20000010

08002990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_IncTick+0x1c>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_IncTick+0x20>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4413      	add	r3, r2
 800299e:	4a03      	ldr	r2, [pc, #12]	; (80029ac <HAL_IncTick+0x1c>)
 80029a0:	6013      	str	r3, [r2, #0]
}
 80029a2:	bf00      	nop
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	20014700 	.word	0x20014700
 80029b0:	20000014 	.word	0x20000014

080029b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return uwTick;
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <HAL_GetTick+0x14>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20014700 	.word	0x20014700

080029cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff ffee 	bl	80029b4 <HAL_GetTick>
 80029d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029e4:	d004      	beq.n	80029f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <HAL_Delay+0x40>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4413      	add	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029f0:	bf00      	nop
 80029f2:	f7ff ffdf 	bl	80029b4 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d8f7      	bhi.n	80029f2 <HAL_Delay+0x26>
  {
  }
}
 8002a02:	bf00      	nop
 8002a04:	bf00      	nop
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000014 	.word	0x20000014

08002a10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	609a      	str	r2, [r3, #8]
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3360      	adds	r3, #96	; 0x60
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b08      	ldr	r3, [pc, #32]	; (8002abc <LL_ADC_SetOffset+0x44>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ab0:	bf00      	nop
 8002ab2:	371c      	adds	r7, #28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	03fff000 	.word	0x03fff000

08002ac0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3360      	adds	r3, #96	; 0x60
 8002ace:	461a      	mov	r2, r3
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	3360      	adds	r3, #96	; 0x60
 8002afc:	461a      	mov	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b16:	bf00      	nop
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b087      	sub	sp, #28
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	3360      	adds	r3, #96	; 0x60
 8002b32:	461a      	mov	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b4c:	bf00      	nop
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	3360      	adds	r3, #96	; 0x60
 8002b68:	461a      	mov	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	615a      	str	r2, [r3, #20]
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b087      	sub	sp, #28
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	3330      	adds	r3, #48	; 0x30
 8002bea:	461a      	mov	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	0a1b      	lsrs	r3, r3, #8
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	4413      	add	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	211f      	movs	r1, #31
 8002c06:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	401a      	ands	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	0e9b      	lsrs	r3, r3, #26
 8002c12:	f003 011f 	and.w	r1, r3, #31
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	431a      	orrs	r2, r3
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c26:	bf00      	nop
 8002c28:	371c      	adds	r7, #28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b087      	sub	sp, #28
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3314      	adds	r3, #20
 8002c42:	461a      	mov	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	0e5b      	lsrs	r3, r3, #25
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	4413      	add	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	0d1b      	lsrs	r3, r3, #20
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	2107      	movs	r1, #7
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	401a      	ands	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	0d1b      	lsrs	r3, r3, #20
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	431a      	orrs	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c7c:	bf00      	nop
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a0f      	ldr	r2, [pc, #60]	; (8002cd4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d10a      	bne.n	8002cb2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002cb0:	e00a      	b.n	8002cc8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	401a      	ands	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	407f0000 	.word	0x407f0000

08002cd8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002d04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6093      	str	r3, [r2, #8]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d2c:	d101      	bne.n	8002d32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d7c:	d101      	bne.n	8002d82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002da0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002da4:	f043 0201 	orr.w	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dcc:	f043 0202 	orr.w	r2, r3, #2
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <LL_ADC_IsEnabled+0x18>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <LL_ADC_IsEnabled+0x1a>
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d101      	bne.n	8002e1e <LL_ADC_IsDisableOngoing+0x18>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <LL_ADC_IsDisableOngoing+0x1a>
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e40:	f043 0204 	orr.w	r2, r3, #4
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d101      	bne.n	8002e6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d101      	bne.n	8002e92 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e1af      	b.n	800321a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d109      	bne.n	8002edc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff f961 	bl	8002190 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff19 	bl	8002d18 <LL_ADC_IsDeepPowerDownEnabled>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d004      	beq.n	8002ef6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff feff 	bl	8002cf4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ff34 	bl	8002d68 <LL_ADC_IsInternalRegulatorEnabled>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d115      	bne.n	8002f32 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff ff18 	bl	8002d40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f10:	4b9f      	ldr	r3, [pc, #636]	; (8003190 <HAL_ADC_Init+0x2f0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	099b      	lsrs	r3, r3, #6
 8002f16:	4a9f      	ldr	r2, [pc, #636]	; (8003194 <HAL_ADC_Init+0x2f4>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	099b      	lsrs	r3, r3, #6
 8002f1e:	3301      	adds	r3, #1
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f24:	e002      	b.n	8002f2c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f9      	bne.n	8002f26 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff ff16 	bl	8002d68 <LL_ADC_IsInternalRegulatorEnabled>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10d      	bne.n	8002f5e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f46:	f043 0210 	orr.w	r2, r3, #16
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f52:	f043 0201 	orr.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff ff76 	bl	8002e54 <LL_ADC_REG_IsConversionOngoing>
 8002f68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 8148 	bne.w	8003208 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f040 8144 	bne.w	8003208 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f84:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f88:	f043 0202 	orr.w	r2, r3, #2
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff23 	bl	8002de0 <LL_ADC_IsEnabled>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d141      	bne.n	8003024 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fa8:	d004      	beq.n	8002fb4 <HAL_ADC_Init+0x114>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a7a      	ldr	r2, [pc, #488]	; (8003198 <HAL_ADC_Init+0x2f8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d10f      	bne.n	8002fd4 <HAL_ADC_Init+0x134>
 8002fb4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fb8:	f7ff ff12 	bl	8002de0 <LL_ADC_IsEnabled>
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	4876      	ldr	r0, [pc, #472]	; (8003198 <HAL_ADC_Init+0x2f8>)
 8002fc0:	f7ff ff0e 	bl	8002de0 <LL_ADC_IsEnabled>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4323      	orrs	r3, r4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e012      	b.n	8002ffa <HAL_ADC_Init+0x15a>
 8002fd4:	4871      	ldr	r0, [pc, #452]	; (800319c <HAL_ADC_Init+0x2fc>)
 8002fd6:	f7ff ff03 	bl	8002de0 <LL_ADC_IsEnabled>
 8002fda:	4604      	mov	r4, r0
 8002fdc:	4870      	ldr	r0, [pc, #448]	; (80031a0 <HAL_ADC_Init+0x300>)
 8002fde:	f7ff feff 	bl	8002de0 <LL_ADC_IsEnabled>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	431c      	orrs	r4, r3
 8002fe6:	486f      	ldr	r0, [pc, #444]	; (80031a4 <HAL_ADC_Init+0x304>)
 8002fe8:	f7ff fefa 	bl	8002de0 <LL_ADC_IsEnabled>
 8002fec:	4603      	mov	r3, r0
 8002fee:	4323      	orrs	r3, r4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d012      	beq.n	8003024 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003006:	d004      	beq.n	8003012 <HAL_ADC_Init+0x172>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a62      	ldr	r2, [pc, #392]	; (8003198 <HAL_ADC_Init+0x2f8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d101      	bne.n	8003016 <HAL_ADC_Init+0x176>
 8003012:	4a65      	ldr	r2, [pc, #404]	; (80031a8 <HAL_ADC_Init+0x308>)
 8003014:	e000      	b.n	8003018 <HAL_ADC_Init+0x178>
 8003016:	4a65      	ldr	r2, [pc, #404]	; (80031ac <HAL_ADC_Init+0x30c>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	4619      	mov	r1, r3
 800301e:	4610      	mov	r0, r2
 8003020:	f7ff fcf6 	bl	8002a10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	7f5b      	ldrb	r3, [r3, #29]
 8003028:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800302e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003034:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800303a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003042:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800304e:	2b01      	cmp	r3, #1
 8003050:	d106      	bne.n	8003060 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	3b01      	subs	r3, #1
 8003058:	045b      	lsls	r3, r3, #17
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	2b00      	cmp	r3, #0
 8003066:	d009      	beq.n	800307c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	4b4b      	ldr	r3, [pc, #300]	; (80031b0 <HAL_ADC_Init+0x310>)
 8003084:	4013      	ands	r3, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	69b9      	ldr	r1, [r7, #24]
 800308c:	430b      	orrs	r3, r1
 800308e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff fed2 	bl	8002e54 <LL_ADC_REG_IsConversionOngoing>
 80030b0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff fedf 	bl	8002e7a <LL_ADC_INJ_IsConversionOngoing>
 80030bc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d17f      	bne.n	80031c4 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d17c      	bne.n	80031c4 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80030ce:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030d6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030e6:	f023 0302 	bic.w	r3, r3, #2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	69b9      	ldr	r1, [r7, #24]
 80030f0:	430b      	orrs	r3, r1
 80030f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d017      	beq.n	800312c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800310a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003114:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003118:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6911      	ldr	r1, [r2, #16]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	430b      	orrs	r3, r1
 8003126:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800312a:	e013      	b.n	8003154 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800313a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800314c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003150:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800315a:	2b01      	cmp	r3, #1
 800315c:	d12a      	bne.n	80031b4 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003168:	f023 0304 	bic.w	r3, r3, #4
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003174:	4311      	orrs	r1, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800317a:	4311      	orrs	r1, r2
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003180:	430a      	orrs	r2, r1
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0201 	orr.w	r2, r2, #1
 800318c:	611a      	str	r2, [r3, #16]
 800318e:	e019      	b.n	80031c4 <HAL_ADC_Init+0x324>
 8003190:	2000000c 	.word	0x2000000c
 8003194:	053e2d63 	.word	0x053e2d63
 8003198:	50000100 	.word	0x50000100
 800319c:	50000400 	.word	0x50000400
 80031a0:	50000500 	.word	0x50000500
 80031a4:	50000600 	.word	0x50000600
 80031a8:	50000300 	.word	0x50000300
 80031ac:	50000700 	.word	0x50000700
 80031b0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0201 	bic.w	r2, r2, #1
 80031c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d10c      	bne.n	80031e6 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	f023 010f 	bic.w	r1, r3, #15
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	1e5a      	subs	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
 80031e4:	e007      	b.n	80031f6 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 020f 	bic.w	r2, r2, #15
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fa:	f023 0303 	bic.w	r3, r3, #3
 80031fe:	f043 0201 	orr.w	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	65da      	str	r2, [r3, #92]	; 0x5c
 8003206:	e007      	b.n	8003218 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320c:	f043 0210 	orr.w	r2, r3, #16
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003218:	7ffb      	ldrb	r3, [r7, #31]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3724      	adds	r7, #36	; 0x24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd90      	pop	{r4, r7, pc}
 8003222:	bf00      	nop

08003224 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003238:	d004      	beq.n	8003244 <HAL_ADC_Start_DMA+0x20>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a5a      	ldr	r2, [pc, #360]	; (80033a8 <HAL_ADC_Start_DMA+0x184>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d101      	bne.n	8003248 <HAL_ADC_Start_DMA+0x24>
 8003244:	4b59      	ldr	r3, [pc, #356]	; (80033ac <HAL_ADC_Start_DMA+0x188>)
 8003246:	e000      	b.n	800324a <HAL_ADC_Start_DMA+0x26>
 8003248:	4b59      	ldr	r3, [pc, #356]	; (80033b0 <HAL_ADC_Start_DMA+0x18c>)
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fd44 	bl	8002cd8 <LL_ADC_GetMultimode>
 8003250:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff fdfc 	bl	8002e54 <LL_ADC_REG_IsConversionOngoing>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	f040 809b 	bne.w	800339a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_ADC_Start_DMA+0x4e>
 800326e:	2302      	movs	r3, #2
 8003270:	e096      	b.n	80033a0 <HAL_ADC_Start_DMA+0x17c>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a4d      	ldr	r2, [pc, #308]	; (80033b4 <HAL_ADC_Start_DMA+0x190>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d008      	beq.n	8003296 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b05      	cmp	r3, #5
 800328e:	d002      	beq.n	8003296 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	2b09      	cmp	r3, #9
 8003294:	d17a      	bne.n	800338c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 fce2 	bl	8003c60 <ADC_Enable>
 800329c:	4603      	mov	r3, r0
 800329e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d16d      	bne.n	8003382 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032ae:	f023 0301 	bic.w	r3, r3, #1
 80032b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a3a      	ldr	r2, [pc, #232]	; (80033a8 <HAL_ADC_Start_DMA+0x184>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d009      	beq.n	80032d8 <HAL_ADC_Start_DMA+0xb4>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a3b      	ldr	r2, [pc, #236]	; (80033b8 <HAL_ADC_Start_DMA+0x194>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d002      	beq.n	80032d4 <HAL_ADC_Start_DMA+0xb0>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	e003      	b.n	80032dc <HAL_ADC_Start_DMA+0xb8>
 80032d4:	4b39      	ldr	r3, [pc, #228]	; (80033bc <HAL_ADC_Start_DMA+0x198>)
 80032d6:	e001      	b.n	80032dc <HAL_ADC_Start_DMA+0xb8>
 80032d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d002      	beq.n	80032ea <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d105      	bne.n	80032f6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d006      	beq.n	8003310 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003306:	f023 0206 	bic.w	r2, r3, #6
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	661a      	str	r2, [r3, #96]	; 0x60
 800330e:	e002      	b.n	8003316 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331a:	4a29      	ldr	r2, [pc, #164]	; (80033c0 <HAL_ADC_Start_DMA+0x19c>)
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003322:	4a28      	ldr	r2, [pc, #160]	; (80033c4 <HAL_ADC_Start_DMA+0x1a0>)
 8003324:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332a:	4a27      	ldr	r2, [pc, #156]	; (80033c8 <HAL_ADC_Start_DMA+0x1a4>)
 800332c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	221c      	movs	r2, #28
 8003334:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0210 	orr.w	r2, r2, #16
 800334c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0201 	orr.w	r2, r2, #1
 800335c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3340      	adds	r3, #64	; 0x40
 8003368:	4619      	mov	r1, r3
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f001 fb85 	bl	8004a7c <HAL_DMA_Start_IT>
 8003372:	4603      	mov	r3, r0
 8003374:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff fd56 	bl	8002e2c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003380:	e00d      	b.n	800339e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800338a:	e008      	b.n	800339e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003398:	e001      	b.n	800339e <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800339a:	2302      	movs	r3, #2
 800339c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800339e:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	50000100 	.word	0x50000100
 80033ac:	50000300 	.word	0x50000300
 80033b0:	50000700 	.word	0x50000700
 80033b4:	50000600 	.word	0x50000600
 80033b8:	50000500 	.word	0x50000500
 80033bc:	50000400 	.word	0x50000400
 80033c0:	08003de3 	.word	0x08003de3
 80033c4:	08003ebb 	.word	0x08003ebb
 80033c8:	08003ed7 	.word	0x08003ed7

080033cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b0b6      	sub	sp, #216	; 0xd8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d102      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x24>
 80033fe:	2302      	movs	r3, #2
 8003400:	f000 bc13 	b.w	8003c2a <HAL_ADC_ConfigChannel+0x84a>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fd1f 	bl	8002e54 <LL_ADC_REG_IsConversionOngoing>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	f040 83f3 	bne.w	8003c04 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6859      	ldr	r1, [r3, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	f7ff fbd5 	bl	8002bda <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fd0d 	bl	8002e54 <LL_ADC_REG_IsConversionOngoing>
 800343a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fd19 	bl	8002e7a <LL_ADC_INJ_IsConversionOngoing>
 8003448:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800344c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003450:	2b00      	cmp	r3, #0
 8003452:	f040 81d9 	bne.w	8003808 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003456:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800345a:	2b00      	cmp	r3, #0
 800345c:	f040 81d4 	bne.w	8003808 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003468:	d10f      	bne.n	800348a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2200      	movs	r2, #0
 8003474:	4619      	mov	r1, r3
 8003476:	f7ff fbdc 	bl	8002c32 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fb83 	bl	8002b8e <LL_ADC_SetSamplingTimeCommonConfig>
 8003488:	e00e      	b.n	80034a8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	6819      	ldr	r1, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	461a      	mov	r2, r3
 8003498:	f7ff fbcb 	bl	8002c32 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2100      	movs	r1, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fb73 	bl	8002b8e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	08db      	lsrs	r3, r3, #3
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d022      	beq.n	8003510 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6919      	ldr	r1, [r3, #16]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034da:	f7ff facd 	bl	8002a78 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	6919      	ldr	r1, [r3, #16]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	461a      	mov	r2, r3
 80034ec:	f7ff fb19 	bl	8002b22 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	6919      	ldr	r1, [r3, #16]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	7f1b      	ldrb	r3, [r3, #28]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d102      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x126>
 8003500:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003504:	e000      	b.n	8003508 <HAL_ADC_ConfigChannel+0x128>
 8003506:	2300      	movs	r3, #0
 8003508:	461a      	mov	r2, r3
 800350a:	f7ff fb25 	bl	8002b58 <LL_ADC_SetOffsetSaturation>
 800350e:	e17b      	b.n	8003808 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2100      	movs	r1, #0
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff fad2 	bl	8002ac0 <LL_ADC_GetOffsetChannel>
 800351c:	4603      	mov	r3, r0
 800351e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10a      	bne.n	800353c <HAL_ADC_ConfigChannel+0x15c>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2100      	movs	r1, #0
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fac7 	bl	8002ac0 <LL_ADC_GetOffsetChannel>
 8003532:	4603      	mov	r3, r0
 8003534:	0e9b      	lsrs	r3, r3, #26
 8003536:	f003 021f 	and.w	r2, r3, #31
 800353a:	e01e      	b.n	800357a <HAL_ADC_ConfigChannel+0x19a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2100      	movs	r1, #0
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fabc 	bl	8002ac0 <LL_ADC_GetOffsetChannel>
 8003548:	4603      	mov	r3, r0
 800354a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003552:	fa93 f3a3 	rbit	r3, r3
 8003556:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800355a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800355e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003562:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800356a:	2320      	movs	r3, #32
 800356c:	e004      	b.n	8003578 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800356e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003582:	2b00      	cmp	r3, #0
 8003584:	d105      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x1b2>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	0e9b      	lsrs	r3, r3, #26
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	e018      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x1e4>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800359e:	fa93 f3a3 	rbit	r3, r3
 80035a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80035a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80035ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80035b6:	2320      	movs	r3, #32
 80035b8:	e004      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80035ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d106      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2200      	movs	r2, #0
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fa8b 	bl	8002aec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2101      	movs	r1, #1
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fa6f 	bl	8002ac0 <LL_ADC_GetOffsetChannel>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x222>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2101      	movs	r1, #1
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fa64 	bl	8002ac0 <LL_ADC_GetOffsetChannel>
 80035f8:	4603      	mov	r3, r0
 80035fa:	0e9b      	lsrs	r3, r3, #26
 80035fc:	f003 021f 	and.w	r2, r3, #31
 8003600:	e01e      	b.n	8003640 <HAL_ADC_ConfigChannel+0x260>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2101      	movs	r1, #1
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff fa59 	bl	8002ac0 <LL_ADC_GetOffsetChannel>
 800360e:	4603      	mov	r3, r0
 8003610:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003620:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003624:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003628:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003630:	2320      	movs	r3, #32
 8003632:	e004      	b.n	800363e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003634:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003638:	fab3 f383 	clz	r3, r3
 800363c:	b2db      	uxtb	r3, r3
 800363e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003648:	2b00      	cmp	r3, #0
 800364a:	d105      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x278>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	0e9b      	lsrs	r3, r3, #26
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	e018      	b.n	800368a <HAL_ADC_ConfigChannel+0x2aa>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003660:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003664:	fa93 f3a3 	rbit	r3, r3
 8003668:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800366c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003670:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003674:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800367c:	2320      	movs	r3, #32
 800367e:	e004      	b.n	800368a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003680:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003684:	fab3 f383 	clz	r3, r3
 8003688:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800368a:	429a      	cmp	r2, r3
 800368c:	d106      	bne.n	800369c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2200      	movs	r2, #0
 8003694:	2101      	movs	r1, #1
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fa28 	bl	8002aec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2102      	movs	r1, #2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fa0c 	bl	8002ac0 <LL_ADC_GetOffsetChannel>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10a      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x2e8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2102      	movs	r1, #2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fa01 	bl	8002ac0 <LL_ADC_GetOffsetChannel>
 80036be:	4603      	mov	r3, r0
 80036c0:	0e9b      	lsrs	r3, r3, #26
 80036c2:	f003 021f 	and.w	r2, r3, #31
 80036c6:	e01e      	b.n	8003706 <HAL_ADC_ConfigChannel+0x326>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2102      	movs	r1, #2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff f9f6 	bl	8002ac0 <LL_ADC_GetOffsetChannel>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80036e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80036ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80036f6:	2320      	movs	r3, #32
 80036f8:	e004      	b.n	8003704 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80036fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370e:	2b00      	cmp	r3, #0
 8003710:	d105      	bne.n	800371e <HAL_ADC_ConfigChannel+0x33e>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	0e9b      	lsrs	r3, r3, #26
 8003718:	f003 031f 	and.w	r3, r3, #31
 800371c:	e016      	b.n	800374c <HAL_ADC_ConfigChannel+0x36c>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003730:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003732:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003736:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800373e:	2320      	movs	r3, #32
 8003740:	e004      	b.n	800374c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003742:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800374c:	429a      	cmp	r2, r3
 800374e:	d106      	bne.n	800375e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2200      	movs	r2, #0
 8003756:	2102      	movs	r1, #2
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff f9c7 	bl	8002aec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2103      	movs	r1, #3
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff f9ab 	bl	8002ac0 <LL_ADC_GetOffsetChannel>
 800376a:	4603      	mov	r3, r0
 800376c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <HAL_ADC_ConfigChannel+0x3aa>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2103      	movs	r1, #3
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff f9a0 	bl	8002ac0 <LL_ADC_GetOffsetChannel>
 8003780:	4603      	mov	r3, r0
 8003782:	0e9b      	lsrs	r3, r3, #26
 8003784:	f003 021f 	and.w	r2, r3, #31
 8003788:	e017      	b.n	80037ba <HAL_ADC_ConfigChannel+0x3da>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2103      	movs	r1, #3
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff f995 	bl	8002ac0 <LL_ADC_GetOffsetChannel>
 8003796:	4603      	mov	r3, r0
 8003798:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800379c:	fa93 f3a3 	rbit	r3, r3
 80037a0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80037a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037a4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80037a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80037ac:	2320      	movs	r3, #32
 80037ae:	e003      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80037b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037b2:	fab3 f383 	clz	r3, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d105      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x3f2>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	0e9b      	lsrs	r3, r3, #26
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	e011      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x416>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80037e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80037e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80037ea:	2320      	movs	r3, #32
 80037ec:	e003      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80037ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f0:	fab3 f383 	clz	r3, r3
 80037f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d106      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2200      	movs	r2, #0
 8003800:	2103      	movs	r1, #3
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff f972 	bl	8002aec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fae7 	bl	8002de0 <LL_ADC_IsEnabled>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	f040 813d 	bne.w	8003a94 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6819      	ldr	r1, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	461a      	mov	r2, r3
 8003828:	f7ff fa2e 	bl	8002c88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4aa2      	ldr	r2, [pc, #648]	; (8003abc <HAL_ADC_ConfigChannel+0x6dc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	f040 812e 	bne.w	8003a94 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10b      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x480>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	0e9b      	lsrs	r3, r3, #26
 800384e:	3301      	adds	r3, #1
 8003850:	f003 031f 	and.w	r3, r3, #31
 8003854:	2b09      	cmp	r3, #9
 8003856:	bf94      	ite	ls
 8003858:	2301      	movls	r3, #1
 800385a:	2300      	movhi	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	e019      	b.n	8003894 <HAL_ADC_ConfigChannel+0x4b4>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003868:	fa93 f3a3 	rbit	r3, r3
 800386c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800386e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003870:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003878:	2320      	movs	r3, #32
 800387a:	e003      	b.n	8003884 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800387c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800387e:	fab3 f383 	clz	r3, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	3301      	adds	r3, #1
 8003886:	f003 031f 	and.w	r3, r3, #31
 800388a:	2b09      	cmp	r3, #9
 800388c:	bf94      	ite	ls
 800388e:	2301      	movls	r3, #1
 8003890:	2300      	movhi	r3, #0
 8003892:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003894:	2b00      	cmp	r3, #0
 8003896:	d079      	beq.n	800398c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d107      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x4d4>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	0e9b      	lsrs	r3, r3, #26
 80038aa:	3301      	adds	r3, #1
 80038ac:	069b      	lsls	r3, r3, #26
 80038ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038b2:	e015      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x500>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038bc:	fa93 f3a3 	rbit	r3, r3
 80038c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80038c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80038cc:	2320      	movs	r3, #32
 80038ce:	e003      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80038d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d2:	fab3 f383 	clz	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	3301      	adds	r3, #1
 80038da:	069b      	lsls	r3, r3, #26
 80038dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d109      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x520>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	0e9b      	lsrs	r3, r3, #26
 80038f2:	3301      	adds	r3, #1
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	2101      	movs	r1, #1
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	e017      	b.n	8003930 <HAL_ADC_ConfigChannel+0x550>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003908:	fa93 f3a3 	rbit	r3, r3
 800390c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800390e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003910:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003918:	2320      	movs	r3, #32
 800391a:	e003      	b.n	8003924 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800391c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
 8003924:	3301      	adds	r3, #1
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	2101      	movs	r1, #1
 800392c:	fa01 f303 	lsl.w	r3, r1, r3
 8003930:	ea42 0103 	orr.w	r1, r2, r3
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10a      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x576>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	0e9b      	lsrs	r3, r3, #26
 8003946:	3301      	adds	r3, #1
 8003948:	f003 021f 	and.w	r2, r3, #31
 800394c:	4613      	mov	r3, r2
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	4413      	add	r3, r2
 8003952:	051b      	lsls	r3, r3, #20
 8003954:	e018      	b.n	8003988 <HAL_ADC_ConfigChannel+0x5a8>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395e:	fa93 f3a3 	rbit	r3, r3
 8003962:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003966:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800396e:	2320      	movs	r3, #32
 8003970:	e003      	b.n	800397a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003974:	fab3 f383 	clz	r3, r3
 8003978:	b2db      	uxtb	r3, r3
 800397a:	3301      	adds	r3, #1
 800397c:	f003 021f 	and.w	r2, r3, #31
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003988:	430b      	orrs	r3, r1
 800398a:	e07e      	b.n	8003a8a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003994:	2b00      	cmp	r3, #0
 8003996:	d107      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x5c8>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	0e9b      	lsrs	r3, r3, #26
 800399e:	3301      	adds	r3, #1
 80039a0:	069b      	lsls	r3, r3, #26
 80039a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039a6:	e015      	b.n	80039d4 <HAL_ADC_ConfigChannel+0x5f4>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b0:	fa93 f3a3 	rbit	r3, r3
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80039c0:	2320      	movs	r3, #32
 80039c2:	e003      	b.n	80039cc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	fab3 f383 	clz	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	3301      	adds	r3, #1
 80039ce:	069b      	lsls	r3, r3, #26
 80039d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d109      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x614>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	0e9b      	lsrs	r3, r3, #26
 80039e6:	3301      	adds	r3, #1
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	2101      	movs	r1, #1
 80039ee:	fa01 f303 	lsl.w	r3, r1, r3
 80039f2:	e017      	b.n	8003a24 <HAL_ADC_ConfigChannel+0x644>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	61fb      	str	r3, [r7, #28]
  return result;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003a0c:	2320      	movs	r3, #32
 8003a0e:	e003      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	fab3 f383 	clz	r3, r3
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	3301      	adds	r3, #1
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	2101      	movs	r1, #1
 8003a20:	fa01 f303 	lsl.w	r3, r1, r3
 8003a24:	ea42 0103 	orr.w	r1, r2, r3
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10d      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x670>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	0e9b      	lsrs	r3, r3, #26
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	f003 021f 	and.w	r2, r3, #31
 8003a40:	4613      	mov	r3, r2
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	4413      	add	r3, r2
 8003a46:	3b1e      	subs	r3, #30
 8003a48:	051b      	lsls	r3, r3, #20
 8003a4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	e01b      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x6a8>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	613b      	str	r3, [r7, #16]
  return result;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003a68:	2320      	movs	r3, #32
 8003a6a:	e003      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	3301      	adds	r3, #1
 8003a76:	f003 021f 	and.w	r2, r3, #31
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	3b1e      	subs	r3, #30
 8003a82:	051b      	lsls	r3, r3, #20
 8003a84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	6892      	ldr	r2, [r2, #8]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f7ff f8cf 	bl	8002c32 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <HAL_ADC_ConfigChannel+0x6e0>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80be 	beq.w	8003c1e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aaa:	d004      	beq.n	8003ab6 <HAL_ADC_ConfigChannel+0x6d6>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <HAL_ADC_ConfigChannel+0x6e4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d10a      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x6ec>
 8003ab6:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <HAL_ADC_ConfigChannel+0x6e8>)
 8003ab8:	e009      	b.n	8003ace <HAL_ADC_ConfigChannel+0x6ee>
 8003aba:	bf00      	nop
 8003abc:	407f0000 	.word	0x407f0000
 8003ac0:	80080000 	.word	0x80080000
 8003ac4:	50000100 	.word	0x50000100
 8003ac8:	50000300 	.word	0x50000300
 8003acc:	4b59      	ldr	r3, [pc, #356]	; (8003c34 <HAL_ADC_ConfigChannel+0x854>)
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe ffc4 	bl	8002a5c <LL_ADC_GetCommonPathInternalCh>
 8003ad4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a56      	ldr	r2, [pc, #344]	; (8003c38 <HAL_ADC_ConfigChannel+0x858>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d004      	beq.n	8003aec <HAL_ADC_ConfigChannel+0x70c>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a55      	ldr	r2, [pc, #340]	; (8003c3c <HAL_ADC_ConfigChannel+0x85c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d13a      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003aec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003af0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d134      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b00:	d005      	beq.n	8003b0e <HAL_ADC_ConfigChannel+0x72e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a4e      	ldr	r2, [pc, #312]	; (8003c40 <HAL_ADC_ConfigChannel+0x860>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	f040 8085 	bne.w	8003c18 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b16:	d004      	beq.n	8003b22 <HAL_ADC_ConfigChannel+0x742>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a49      	ldr	r2, [pc, #292]	; (8003c44 <HAL_ADC_ConfigChannel+0x864>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d101      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x746>
 8003b22:	4a49      	ldr	r2, [pc, #292]	; (8003c48 <HAL_ADC_ConfigChannel+0x868>)
 8003b24:	e000      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x748>
 8003b26:	4a43      	ldr	r2, [pc, #268]	; (8003c34 <HAL_ADC_ConfigChannel+0x854>)
 8003b28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b30:	4619      	mov	r1, r3
 8003b32:	4610      	mov	r0, r2
 8003b34:	f7fe ff7f 	bl	8002a36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b38:	4b44      	ldr	r3, [pc, #272]	; (8003c4c <HAL_ADC_ConfigChannel+0x86c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	099b      	lsrs	r3, r3, #6
 8003b3e:	4a44      	ldr	r2, [pc, #272]	; (8003c50 <HAL_ADC_ConfigChannel+0x870>)
 8003b40:	fba2 2303 	umull	r2, r3, r2, r3
 8003b44:	099b      	lsrs	r3, r3, #6
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	4613      	mov	r3, r2
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b52:	e002      	b.n	8003b5a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1f9      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b60:	e05a      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a3b      	ldr	r2, [pc, #236]	; (8003c54 <HAL_ADC_ConfigChannel+0x874>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d125      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x7d8>
 8003b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d11f      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a31      	ldr	r2, [pc, #196]	; (8003c44 <HAL_ADC_ConfigChannel+0x864>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d104      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x7ac>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a34      	ldr	r2, [pc, #208]	; (8003c58 <HAL_ADC_ConfigChannel+0x878>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d047      	beq.n	8003c1c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b94:	d004      	beq.n	8003ba0 <HAL_ADC_ConfigChannel+0x7c0>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a2a      	ldr	r2, [pc, #168]	; (8003c44 <HAL_ADC_ConfigChannel+0x864>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d101      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x7c4>
 8003ba0:	4a29      	ldr	r2, [pc, #164]	; (8003c48 <HAL_ADC_ConfigChannel+0x868>)
 8003ba2:	e000      	b.n	8003ba6 <HAL_ADC_ConfigChannel+0x7c6>
 8003ba4:	4a23      	ldr	r2, [pc, #140]	; (8003c34 <HAL_ADC_ConfigChannel+0x854>)
 8003ba6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	f7fe ff40 	bl	8002a36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bb6:	e031      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <HAL_ADC_ConfigChannel+0x87c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d12d      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d127      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1c      	ldr	r2, [pc, #112]	; (8003c44 <HAL_ADC_ConfigChannel+0x864>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d022      	beq.n	8003c1e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003be0:	d004      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x80c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <HAL_ADC_ConfigChannel+0x864>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x810>
 8003bec:	4a16      	ldr	r2, [pc, #88]	; (8003c48 <HAL_ADC_ConfigChannel+0x868>)
 8003bee:	e000      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x812>
 8003bf0:	4a10      	ldr	r2, [pc, #64]	; (8003c34 <HAL_ADC_ConfigChannel+0x854>)
 8003bf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bf6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f7fe ff1a 	bl	8002a36 <LL_ADC_SetCommonPathInternalCh>
 8003c02:	e00c      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003c16:	e002      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c18:	bf00      	nop
 8003c1a:	e000      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c26:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	37d8      	adds	r7, #216	; 0xd8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	50000700 	.word	0x50000700
 8003c38:	c3210000 	.word	0xc3210000
 8003c3c:	90c00010 	.word	0x90c00010
 8003c40:	50000600 	.word	0x50000600
 8003c44:	50000100 	.word	0x50000100
 8003c48:	50000300 	.word	0x50000300
 8003c4c:	2000000c 	.word	0x2000000c
 8003c50:	053e2d63 	.word	0x053e2d63
 8003c54:	c7520000 	.word	0xc7520000
 8003c58:	50000500 	.word	0x50000500
 8003c5c:	cb840000 	.word	0xcb840000

08003c60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff f8b7 	bl	8002de0 <LL_ADC_IsEnabled>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d14d      	bne.n	8003d14 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	4b28      	ldr	r3, [pc, #160]	; (8003d20 <ADC_Enable+0xc0>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00d      	beq.n	8003ca2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8a:	f043 0210 	orr.w	r2, r3, #16
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c96:	f043 0201 	orr.w	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e039      	b.n	8003d16 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff f872 	bl	8002d90 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003cac:	f7fe fe82 	bl	80029b4 <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cb2:	e028      	b.n	8003d06 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff f891 	bl	8002de0 <LL_ADC_IsEnabled>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d104      	bne.n	8003cce <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff f861 	bl	8002d90 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003cce:	f7fe fe71 	bl	80029b4 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d914      	bls.n	8003d06 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d00d      	beq.n	8003d06 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cee:	f043 0210 	orr.w	r2, r3, #16
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfa:	f043 0201 	orr.w	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e007      	b.n	8003d16 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d1cf      	bne.n	8003cb4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	8000003f 	.word	0x8000003f

08003d24 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff f868 	bl	8002e06 <LL_ADC_IsDisableOngoing>
 8003d36:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff f84f 	bl	8002de0 <LL_ADC_IsEnabled>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d047      	beq.n	8003dd8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d144      	bne.n	8003dd8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 030d 	and.w	r3, r3, #13
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d10c      	bne.n	8003d76 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff f829 	bl	8002db8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d6e:	f7fe fe21 	bl	80029b4 <HAL_GetTick>
 8003d72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d74:	e029      	b.n	8003dca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7a:	f043 0210 	orr.w	r2, r3, #16
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d86:	f043 0201 	orr.w	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e023      	b.n	8003dda <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d92:	f7fe fe0f 	bl	80029b4 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d914      	bls.n	8003dca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00d      	beq.n	8003dca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db2:	f043 0210 	orr.w	r2, r3, #16
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbe:	f043 0201 	orr.w	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e007      	b.n	8003dda <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1dc      	bne.n	8003d92 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d14b      	bne.n	8003e94 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d021      	beq.n	8003e5a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fe feca 	bl	8002bb4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d032      	beq.n	8003e8c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d12b      	bne.n	8003e8c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d11f      	bne.n	8003e8c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e50:	f043 0201 	orr.w	r2, r3, #1
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e58:	e018      	b.n	8003e8c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d111      	bne.n	8003e8c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	f043 0201 	orr.w	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f7fe f851 	bl	8001f34 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e92:	e00e      	b.n	8003eb2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff fa93 	bl	80033cc <HAL_ADC_ErrorCallback>
}
 8003ea6:	e004      	b.n	8003eb2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	4798      	blx	r3
}
 8003eb2:	bf00      	nop
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f7fe f81f 	bl	8001f0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef4:	f043 0204 	orr.w	r2, r3, #4
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f7ff fa65 	bl	80033cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f02:	bf00      	nop
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <LL_ADC_IsEnabled>:
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <LL_ADC_IsEnabled+0x18>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <LL_ADC_IsEnabled+0x1a>
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <LL_ADC_StartCalibration>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003f42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	609a      	str	r2, [r3, #8]
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <LL_ADC_IsCalibrationOnGoing>:
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f76:	d101      	bne.n	8003f7c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <LL_ADC_REG_IsConversionOngoing>:
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d101      	bne.n	8003fa2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_ADCEx_Calibration_Start+0x1c>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e04d      	b.n	8004068 <HAL_ADCEx_Calibration_Start+0xb8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff fea5 	bl	8003d24 <ADC_Disable>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d136      	bne.n	8004052 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003fec:	f023 0302 	bic.w	r3, r3, #2
 8003ff0:	f043 0202 	orr.w	r2, r3, #2
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6839      	ldr	r1, [r7, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff ff96 	bl	8003f30 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004004:	e014      	b.n	8004030 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	3301      	adds	r3, #1
 800400a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4a18      	ldr	r2, [pc, #96]	; (8004070 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d90d      	bls.n	8004030 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004018:	f023 0312 	bic.w	r3, r3, #18
 800401c:	f043 0210 	orr.w	r2, r3, #16
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e01b      	b.n	8004068 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff ff94 	bl	8003f62 <LL_ADC_IsCalibrationOnGoing>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e2      	bne.n	8004006 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004044:	f023 0303 	bic.w	r3, r3, #3
 8004048:	f043 0201 	orr.w	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004050:	e005      	b.n	800405e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004056:	f043 0210 	orr.w	r2, r3, #16
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	0004de01 	.word	0x0004de01

08004074 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	b0a1      	sub	sp, #132	; 0x84
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800408e:	2302      	movs	r3, #2
 8004090:	e0e7      	b.n	8004262 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800409a:	2300      	movs	r3, #0
 800409c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800409e:	2300      	movs	r3, #0
 80040a0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040aa:	d102      	bne.n	80040b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80040ac:	4b6f      	ldr	r3, [pc, #444]	; (800426c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040ae:	60bb      	str	r3, [r7, #8]
 80040b0:	e009      	b.n	80040c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a6e      	ldr	r2, [pc, #440]	; (8004270 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d102      	bne.n	80040c2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80040bc:	4b6d      	ldr	r3, [pc, #436]	; (8004274 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	e001      	b.n	80040c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80040c2:	2300      	movs	r3, #0
 80040c4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10b      	bne.n	80040e4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d0:	f043 0220 	orr.w	r2, r3, #32
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0be      	b.n	8004262 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff ff4f 	bl	8003f8a <LL_ADC_REG_IsConversionOngoing>
 80040ec:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff ff49 	bl	8003f8a <LL_ADC_REG_IsConversionOngoing>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f040 80a0 	bne.w	8004240 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004102:	2b00      	cmp	r3, #0
 8004104:	f040 809c 	bne.w	8004240 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004110:	d004      	beq.n	800411c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a55      	ldr	r2, [pc, #340]	; (800426c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d101      	bne.n	8004120 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800411c:	4b56      	ldr	r3, [pc, #344]	; (8004278 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800411e:	e000      	b.n	8004122 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004120:	4b56      	ldr	r3, [pc, #344]	; (800427c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004122:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d04b      	beq.n	80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800412c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	6859      	ldr	r1, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800413e:	035b      	lsls	r3, r3, #13
 8004140:	430b      	orrs	r3, r1
 8004142:	431a      	orrs	r2, r3
 8004144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004146:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004150:	d004      	beq.n	800415c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a45      	ldr	r2, [pc, #276]	; (800426c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d10f      	bne.n	800417c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800415c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004160:	f7ff fed3 	bl	8003f0a <LL_ADC_IsEnabled>
 8004164:	4604      	mov	r4, r0
 8004166:	4841      	ldr	r0, [pc, #260]	; (800426c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004168:	f7ff fecf 	bl	8003f0a <LL_ADC_IsEnabled>
 800416c:	4603      	mov	r3, r0
 800416e:	4323      	orrs	r3, r4
 8004170:	2b00      	cmp	r3, #0
 8004172:	bf0c      	ite	eq
 8004174:	2301      	moveq	r3, #1
 8004176:	2300      	movne	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	e012      	b.n	80041a2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800417c:	483c      	ldr	r0, [pc, #240]	; (8004270 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800417e:	f7ff fec4 	bl	8003f0a <LL_ADC_IsEnabled>
 8004182:	4604      	mov	r4, r0
 8004184:	483b      	ldr	r0, [pc, #236]	; (8004274 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004186:	f7ff fec0 	bl	8003f0a <LL_ADC_IsEnabled>
 800418a:	4603      	mov	r3, r0
 800418c:	431c      	orrs	r4, r3
 800418e:	483c      	ldr	r0, [pc, #240]	; (8004280 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004190:	f7ff febb 	bl	8003f0a <LL_ADC_IsEnabled>
 8004194:	4603      	mov	r3, r0
 8004196:	4323      	orrs	r3, r4
 8004198:	2b00      	cmp	r3, #0
 800419a:	bf0c      	ite	eq
 800419c:	2301      	moveq	r3, #1
 800419e:	2300      	movne	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d056      	beq.n	8004254 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80041a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80041ae:	f023 030f 	bic.w	r3, r3, #15
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	6811      	ldr	r1, [r2, #0]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	6892      	ldr	r2, [r2, #8]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	431a      	orrs	r2, r3
 80041be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041c2:	e047      	b.n	8004254 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80041c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041d8:	d004      	beq.n	80041e4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a23      	ldr	r2, [pc, #140]	; (800426c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d10f      	bne.n	8004204 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80041e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80041e8:	f7ff fe8f 	bl	8003f0a <LL_ADC_IsEnabled>
 80041ec:	4604      	mov	r4, r0
 80041ee:	481f      	ldr	r0, [pc, #124]	; (800426c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041f0:	f7ff fe8b 	bl	8003f0a <LL_ADC_IsEnabled>
 80041f4:	4603      	mov	r3, r0
 80041f6:	4323      	orrs	r3, r4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bf0c      	ite	eq
 80041fc:	2301      	moveq	r3, #1
 80041fe:	2300      	movne	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	e012      	b.n	800422a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004204:	481a      	ldr	r0, [pc, #104]	; (8004270 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004206:	f7ff fe80 	bl	8003f0a <LL_ADC_IsEnabled>
 800420a:	4604      	mov	r4, r0
 800420c:	4819      	ldr	r0, [pc, #100]	; (8004274 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800420e:	f7ff fe7c 	bl	8003f0a <LL_ADC_IsEnabled>
 8004212:	4603      	mov	r3, r0
 8004214:	431c      	orrs	r4, r3
 8004216:	481a      	ldr	r0, [pc, #104]	; (8004280 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004218:	f7ff fe77 	bl	8003f0a <LL_ADC_IsEnabled>
 800421c:	4603      	mov	r3, r0
 800421e:	4323      	orrs	r3, r4
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d012      	beq.n	8004254 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800422e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004236:	f023 030f 	bic.w	r3, r3, #15
 800423a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800423c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800423e:	e009      	b.n	8004254 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004244:	f043 0220 	orr.w	r2, r3, #32
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004252:	e000      	b.n	8004256 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004254:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800425e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004262:	4618      	mov	r0, r3
 8004264:	3784      	adds	r7, #132	; 0x84
 8004266:	46bd      	mov	sp, r7
 8004268:	bd90      	pop	{r4, r7, pc}
 800426a:	bf00      	nop
 800426c:	50000100 	.word	0x50000100
 8004270:	50000400 	.word	0x50000400
 8004274:	50000500 	.word	0x50000500
 8004278:	50000300 	.word	0x50000300
 800427c:	50000700 	.word	0x50000700
 8004280:	50000600 	.word	0x50000600

08004284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004294:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042a0:	4013      	ands	r3, r2
 80042a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042b6:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <__NVIC_SetPriorityGrouping+0x44>)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	60d3      	str	r3, [r2, #12]
}
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	e000ed00 	.word	0xe000ed00

080042cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042d0:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <__NVIC_GetPriorityGrouping+0x18>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	0a1b      	lsrs	r3, r3, #8
 80042d6:	f003 0307 	and.w	r3, r3, #7
}
 80042da:	4618      	mov	r0, r3
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	e000ed00 	.word	0xe000ed00

080042e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	db0b      	blt.n	8004312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	f003 021f 	and.w	r2, r3, #31
 8004300:	4907      	ldr	r1, [pc, #28]	; (8004320 <__NVIC_EnableIRQ+0x38>)
 8004302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	2001      	movs	r0, #1
 800430a:	fa00 f202 	lsl.w	r2, r0, r2
 800430e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	e000e100 	.word	0xe000e100

08004324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	6039      	str	r1, [r7, #0]
 800432e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004334:	2b00      	cmp	r3, #0
 8004336:	db0a      	blt.n	800434e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	b2da      	uxtb	r2, r3
 800433c:	490c      	ldr	r1, [pc, #48]	; (8004370 <__NVIC_SetPriority+0x4c>)
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	0112      	lsls	r2, r2, #4
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	440b      	add	r3, r1
 8004348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800434c:	e00a      	b.n	8004364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	b2da      	uxtb	r2, r3
 8004352:	4908      	ldr	r1, [pc, #32]	; (8004374 <__NVIC_SetPriority+0x50>)
 8004354:	79fb      	ldrb	r3, [r7, #7]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	3b04      	subs	r3, #4
 800435c:	0112      	lsls	r2, r2, #4
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	440b      	add	r3, r1
 8004362:	761a      	strb	r2, [r3, #24]
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	e000e100 	.word	0xe000e100
 8004374:	e000ed00 	.word	0xe000ed00

08004378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004378:	b480      	push	{r7}
 800437a:	b089      	sub	sp, #36	; 0x24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f1c3 0307 	rsb	r3, r3, #7
 8004392:	2b04      	cmp	r3, #4
 8004394:	bf28      	it	cs
 8004396:	2304      	movcs	r3, #4
 8004398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3304      	adds	r3, #4
 800439e:	2b06      	cmp	r3, #6
 80043a0:	d902      	bls.n	80043a8 <NVIC_EncodePriority+0x30>
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	3b03      	subs	r3, #3
 80043a6:	e000      	b.n	80043aa <NVIC_EncodePriority+0x32>
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43da      	mvns	r2, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	401a      	ands	r2, r3
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ca:	43d9      	mvns	r1, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d0:	4313      	orrs	r3, r2
         );
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3724      	adds	r7, #36	; 0x24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
	...

080043e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043f0:	d301      	bcc.n	80043f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043f2:	2301      	movs	r3, #1
 80043f4:	e00f      	b.n	8004416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043f6:	4a0a      	ldr	r2, [pc, #40]	; (8004420 <SysTick_Config+0x40>)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043fe:	210f      	movs	r1, #15
 8004400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004404:	f7ff ff8e 	bl	8004324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <SysTick_Config+0x40>)
 800440a:	2200      	movs	r2, #0
 800440c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800440e:	4b04      	ldr	r3, [pc, #16]	; (8004420 <SysTick_Config+0x40>)
 8004410:	2207      	movs	r2, #7
 8004412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	e000e010 	.word	0xe000e010

08004424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff ff29 	bl	8004284 <__NVIC_SetPriorityGrouping>
}
 8004432:	bf00      	nop
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b086      	sub	sp, #24
 800443e:	af00      	add	r7, sp, #0
 8004440:	4603      	mov	r3, r0
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
 8004446:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004448:	f7ff ff40 	bl	80042cc <__NVIC_GetPriorityGrouping>
 800444c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	6978      	ldr	r0, [r7, #20]
 8004454:	f7ff ff90 	bl	8004378 <NVIC_EncodePriority>
 8004458:	4602      	mov	r2, r0
 800445a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800445e:	4611      	mov	r1, r2
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff ff5f 	bl	8004324 <__NVIC_SetPriority>
}
 8004466:	bf00      	nop
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	4603      	mov	r3, r0
 8004476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ff33 	bl	80042e8 <__NVIC_EnableIRQ>
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff ffa4 	bl	80043e0 <SysTick_Config>
 8004498:	4603      	mov	r3, r0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e014      	b.n	80044de <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	791b      	ldrb	r3, [r3, #4]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d105      	bne.n	80044ca <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7fd ff89 	bl	80023dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2202      	movs	r2, #2
 80044ce:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b082      	sub	sp, #8
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	795b      	ldrb	r3, [r3, #5]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_DAC_Start+0x16>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e043      	b.n	8004584 <HAL_DAC_Start+0x9e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2202      	movs	r2, #2
 8004506:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6819      	ldr	r1, [r3, #0]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2201      	movs	r2, #1
 8004516:	409a      	lsls	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8004520:	2001      	movs	r0, #1
 8004522:	f7fe fa53 	bl	80029cc <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10f      	bne.n	800454c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004536:	2b02      	cmp	r3, #2
 8004538:	d11d      	bne.n	8004576 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0201 	orr.w	r2, r2, #1
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	e014      	b.n	8004576 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2102      	movs	r1, #2
 800455e:	fa01 f303 	lsl.w	r3, r1, r3
 8004562:	429a      	cmp	r2, r3
 8004564:	d107      	bne.n	8004576 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0202 	orr.w	r2, r2, #2
 8004574:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800459a:	2300      	movs	r3, #0
 800459c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d105      	bne.n	80045bc <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4413      	add	r3, r2
 80045b6:	3308      	adds	r3, #8
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	e004      	b.n	80045c6 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4413      	add	r3, r2
 80045c2:	3314      	adds	r3, #20
 80045c4:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	461a      	mov	r2, r3
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	371c      	adds	r7, #28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08a      	sub	sp, #40	; 0x28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	795b      	ldrb	r3, [r3, #5]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d101      	bne.n	80045f4 <HAL_DAC_ConfigChannel+0x18>
 80045f0:	2302      	movs	r3, #2
 80045f2:	e192      	b.n	800491a <HAL_DAC_ConfigChannel+0x33e>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2201      	movs	r2, #1
 80045f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2202      	movs	r2, #2
 80045fe:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b04      	cmp	r3, #4
 8004606:	d174      	bne.n	80046f2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004608:	f7fe f9d4 	bl	80029b4 <HAL_GetTick>
 800460c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d134      	bne.n	800467e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004614:	e011      	b.n	800463a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004616:	f7fe f9cd 	bl	80029b4 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b01      	cmp	r3, #1
 8004622:	d90a      	bls.n	800463a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f043 0208 	orr.w	r2, r3, #8
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2203      	movs	r2, #3
 8004634:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e16f      	b.n	800491a <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e6      	bne.n	8004616 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004648:	2001      	movs	r0, #1
 800464a:	f7fe f9bf 	bl	80029cc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004656:	641a      	str	r2, [r3, #64]	; 0x40
 8004658:	e01e      	b.n	8004698 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800465a:	f7fe f9ab 	bl	80029b4 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	d90a      	bls.n	800467e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f043 0208 	orr.w	r2, r3, #8
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2203      	movs	r2, #3
 8004678:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e14d      	b.n	800491a <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004684:	2b00      	cmp	r3, #0
 8004686:	dbe8      	blt.n	800465a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004688:	2001      	movs	r0, #1
 800468a:	f7fe f99f 	bl	80029cc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004696:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80046a8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ac:	43db      	mvns	r3, r3
 80046ae:	ea02 0103 	and.w	r1, r2, r3
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	409a      	lsls	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f003 0310 	and.w	r3, r3, #16
 80046d2:	21ff      	movs	r1, #255	; 0xff
 80046d4:	fa01 f303 	lsl.w	r3, r1, r3
 80046d8:	43db      	mvns	r3, r3
 80046da:	ea02 0103 	and.w	r1, r2, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f003 0310 	and.w	r3, r3, #16
 80046e8:	409a      	lsls	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d11d      	bne.n	8004736 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	221f      	movs	r2, #31
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004712:	4013      	ands	r3, r2
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472a:	4313      	orrs	r3, r2
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004734:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f003 0310 	and.w	r3, r3, #16
 8004744:	2207      	movs	r2, #7
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43db      	mvns	r3, r3
 800474c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474e:	4013      	ands	r3, r2
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d102      	bne.n	8004760 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800475a:	2300      	movs	r3, #0
 800475c:	623b      	str	r3, [r7, #32]
 800475e:	e00f      	b.n	8004780 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d102      	bne.n	800476e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004768:	2301      	movs	r3, #1
 800476a:	623b      	str	r3, [r7, #32]
 800476c:	e008      	b.n	8004780 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d102      	bne.n	800477c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004776:	2301      	movs	r3, #1
 8004778:	623b      	str	r3, [r7, #32]
 800477a:	e001      	b.n	8004780 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800477c:	2300      	movs	r3, #0
 800477e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	6a3a      	ldr	r2, [r7, #32]
 800478c:	4313      	orrs	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43db      	mvns	r3, r3
 80047a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a2:	4013      	ands	r3, r2
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	791b      	ldrb	r3, [r3, #4]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d102      	bne.n	80047b4 <HAL_DAC_ConfigChannel+0x1d8>
 80047ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047b2:	e000      	b.n	80047b6 <HAL_DAC_ConfigChannel+0x1da>
 80047b4:	2300      	movs	r3, #0
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f003 0310 	and.w	r3, r3, #16
 80047c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ce:	4013      	ands	r3, r2
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	795b      	ldrb	r3, [r3, #5]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d102      	bne.n	80047e0 <HAL_DAC_ConfigChannel+0x204>
 80047da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047de:	e000      	b.n	80047e2 <HAL_DAC_ConfigChannel+0x206>
 80047e0:	2300      	movs	r3, #0
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d114      	bne.n	8004822 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80047f8:	f001 fb34 	bl	8005e64 <HAL_RCC_GetHCLKFreq>
 80047fc:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	4a48      	ldr	r2, [pc, #288]	; (8004924 <HAL_DAC_ConfigChannel+0x348>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d904      	bls.n	8004810 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
 800480e:	e00f      	b.n	8004830 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	4a45      	ldr	r2, [pc, #276]	; (8004928 <HAL_DAC_ConfigChannel+0x34c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d90a      	bls.n	800482e <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
 8004820:	e006      	b.n	8004830 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004828:	4313      	orrs	r3, r2
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
 800482c:	e000      	b.n	8004830 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800482e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483e:	4313      	orrs	r3, r2
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004848:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6819      	ldr	r1, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43da      	mvns	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	400a      	ands	r2, r1
 8004866:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	f640 72fe 	movw	r2, #4094	; 0xffe
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004882:	4013      	ands	r3, r2
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489a:	4313      	orrs	r3, r2
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6819      	ldr	r1, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f003 0310 	and.w	r3, r3, #16
 80048b2:	22c0      	movs	r2, #192	; 0xc0
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	43da      	mvns	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	400a      	ands	r2, r1
 80048c0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	089b      	lsrs	r3, r3, #2
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	089b      	lsrs	r3, r3, #2
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4313      	orrs	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	f640 710f 	movw	r1, #3855	; 0xf0f
 80048f0:	fa01 f303 	lsl.w	r3, r1, r3
 80048f4:	43db      	mvns	r3, r3
 80048f6:	ea02 0103 	and.w	r1, r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	409a      	lsls	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2201      	movs	r2, #1
 8004910:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3728      	adds	r7, #40	; 0x28
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	09896800 	.word	0x09896800
 8004928:	04c4b400 	.word	0x04c4b400

0800492c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e08d      	b.n	8004a5a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	4b47      	ldr	r3, [pc, #284]	; (8004a64 <HAL_DMA_Init+0x138>)
 8004946:	429a      	cmp	r2, r3
 8004948:	d80f      	bhi.n	800496a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	4b45      	ldr	r3, [pc, #276]	; (8004a68 <HAL_DMA_Init+0x13c>)
 8004952:	4413      	add	r3, r2
 8004954:	4a45      	ldr	r2, [pc, #276]	; (8004a6c <HAL_DMA_Init+0x140>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	091b      	lsrs	r3, r3, #4
 800495c:	009a      	lsls	r2, r3, #2
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a42      	ldr	r2, [pc, #264]	; (8004a70 <HAL_DMA_Init+0x144>)
 8004966:	641a      	str	r2, [r3, #64]	; 0x40
 8004968:	e00e      	b.n	8004988 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	4b40      	ldr	r3, [pc, #256]	; (8004a74 <HAL_DMA_Init+0x148>)
 8004972:	4413      	add	r3, r2
 8004974:	4a3d      	ldr	r2, [pc, #244]	; (8004a6c <HAL_DMA_Init+0x140>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	091b      	lsrs	r3, r3, #4
 800497c:	009a      	lsls	r2, r3, #2
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a3c      	ldr	r2, [pc, #240]	; (8004a78 <HAL_DMA_Init+0x14c>)
 8004986:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80049ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f9b6 	bl	8004d4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049e8:	d102      	bne.n	80049f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a04:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d010      	beq.n	8004a30 <HAL_DMA_Init+0x104>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d80c      	bhi.n	8004a30 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f9d6 	bl	8004dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a2c:	605a      	str	r2, [r3, #4]
 8004a2e:	e008      	b.n	8004a42 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	40020407 	.word	0x40020407
 8004a68:	bffdfff8 	.word	0xbffdfff8
 8004a6c:	cccccccd 	.word	0xcccccccd
 8004a70:	40020000 	.word	0x40020000
 8004a74:	bffdfbf8 	.word	0xbffdfbf8
 8004a78:	40020400 	.word	0x40020400

08004a7c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_DMA_Start_IT+0x20>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e066      	b.n	8004b6a <HAL_DMA_Start_IT+0xee>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d155      	bne.n	8004b5c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f8fb 	bl	8004cd0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d008      	beq.n	8004af4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 020e 	orr.w	r2, r2, #14
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e00f      	b.n	8004b14 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0204 	bic.w	r2, r2, #4
 8004b02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 020a 	orr.w	r2, r2, #10
 8004b12:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b30:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b48:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0201 	orr.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e005      	b.n	8004b68 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004b64:	2302      	movs	r3, #2
 8004b66:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b084      	sub	sp, #16
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	f003 031f 	and.w	r3, r3, #31
 8004b92:	2204      	movs	r2, #4
 8004b94:	409a      	lsls	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d026      	beq.n	8004bec <HAL_DMA_IRQHandler+0x7a>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d021      	beq.n	8004bec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d107      	bne.n	8004bc6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0204 	bic.w	r2, r2, #4
 8004bc4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bca:	f003 021f 	and.w	r2, r3, #31
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	2104      	movs	r1, #4
 8004bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d071      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004bea:	e06c      	b.n	8004cc6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d02e      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d029      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10b      	bne.n	8004c30 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 020a 	bic.w	r2, r2, #10
 8004c26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c34:	f003 021f 	and.w	r2, r3, #31
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	2102      	movs	r1, #2
 8004c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c42:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d038      	beq.n	8004cc6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004c5c:	e033      	b.n	8004cc6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c62:	f003 031f 	and.w	r3, r3, #31
 8004c66:	2208      	movs	r2, #8
 8004c68:	409a      	lsls	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d02a      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d025      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 020e 	bic.w	r2, r2, #14
 8004c8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c90:	f003 021f 	and.w	r2, r3, #31
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	2101      	movs	r1, #1
 8004c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d004      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004cc6:	bf00      	nop
 8004cc8:	bf00      	nop
}
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ce6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d004      	beq.n	8004cfa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004cf8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfe:	f003 021f 	and.w	r2, r3, #31
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	2101      	movs	r1, #1
 8004d08:	fa01 f202 	lsl.w	r2, r1, r2
 8004d0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b10      	cmp	r3, #16
 8004d1c:	d108      	bne.n	8004d30 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d2e:	e007      	b.n	8004d40 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	60da      	str	r2, [r3, #12]
}
 8004d40:	bf00      	nop
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4b16      	ldr	r3, [pc, #88]	; (8004db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d802      	bhi.n	8004d66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004d60:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	e001      	b.n	8004d6a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004d66:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004d68:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	3b08      	subs	r3, #8
 8004d76:	4a12      	ldr	r2, [pc, #72]	; (8004dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004d78:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7c:	091b      	lsrs	r3, r3, #4
 8004d7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d84:	089b      	lsrs	r3, r3, #2
 8004d86:	009a      	lsls	r2, r3, #2
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a0b      	ldr	r2, [pc, #44]	; (8004dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004d96:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 031f 	and.w	r3, r3, #31
 8004d9e:	2201      	movs	r2, #1
 8004da0:	409a      	lsls	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004da6:	bf00      	nop
 8004da8:	371c      	adds	r7, #28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	40020407 	.word	0x40020407
 8004db8:	40020800 	.word	0x40020800
 8004dbc:	40020820 	.word	0x40020820
 8004dc0:	cccccccd 	.word	0xcccccccd
 8004dc4:	40020880 	.word	0x40020880

08004dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	461a      	mov	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a08      	ldr	r2, [pc, #32]	; (8004e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004dea:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	f003 031f 	and.w	r3, r3, #31
 8004df4:	2201      	movs	r2, #1
 8004df6:	409a      	lsls	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004dfc:	bf00      	nop
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	1000823f 	.word	0x1000823f
 8004e0c:	40020940 	.word	0x40020940

08004e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e1e:	e15a      	b.n	80050d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	2101      	movs	r1, #1
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 814c 	beq.w	80050d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d005      	beq.n	8004e50 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d130      	bne.n	8004eb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4013      	ands	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e86:	2201      	movs	r2, #1
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4013      	ands	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	f003 0201 	and.w	r2, r3, #1
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d017      	beq.n	8004eee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	2203      	movs	r2, #3
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d123      	bne.n	8004f42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	08da      	lsrs	r2, r3, #3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3208      	adds	r2, #8
 8004f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	220f      	movs	r2, #15
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	43db      	mvns	r3, r3
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	08da      	lsrs	r2, r3, #3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3208      	adds	r2, #8
 8004f3c:	6939      	ldr	r1, [r7, #16]
 8004f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	43db      	mvns	r3, r3
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4013      	ands	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f003 0203 	and.w	r2, r3, #3
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 80a6 	beq.w	80050d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f84:	4b5b      	ldr	r3, [pc, #364]	; (80050f4 <HAL_GPIO_Init+0x2e4>)
 8004f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f88:	4a5a      	ldr	r2, [pc, #360]	; (80050f4 <HAL_GPIO_Init+0x2e4>)
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	6613      	str	r3, [r2, #96]	; 0x60
 8004f90:	4b58      	ldr	r3, [pc, #352]	; (80050f4 <HAL_GPIO_Init+0x2e4>)
 8004f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	60bb      	str	r3, [r7, #8]
 8004f9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f9c:	4a56      	ldr	r2, [pc, #344]	; (80050f8 <HAL_GPIO_Init+0x2e8>)
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	089b      	lsrs	r3, r3, #2
 8004fa2:	3302      	adds	r3, #2
 8004fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	220f      	movs	r2, #15
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004fc6:	d01f      	beq.n	8005008 <HAL_GPIO_Init+0x1f8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a4c      	ldr	r2, [pc, #304]	; (80050fc <HAL_GPIO_Init+0x2ec>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d019      	beq.n	8005004 <HAL_GPIO_Init+0x1f4>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a4b      	ldr	r2, [pc, #300]	; (8005100 <HAL_GPIO_Init+0x2f0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d013      	beq.n	8005000 <HAL_GPIO_Init+0x1f0>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a4a      	ldr	r2, [pc, #296]	; (8005104 <HAL_GPIO_Init+0x2f4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00d      	beq.n	8004ffc <HAL_GPIO_Init+0x1ec>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a49      	ldr	r2, [pc, #292]	; (8005108 <HAL_GPIO_Init+0x2f8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d007      	beq.n	8004ff8 <HAL_GPIO_Init+0x1e8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a48      	ldr	r2, [pc, #288]	; (800510c <HAL_GPIO_Init+0x2fc>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d101      	bne.n	8004ff4 <HAL_GPIO_Init+0x1e4>
 8004ff0:	2305      	movs	r3, #5
 8004ff2:	e00a      	b.n	800500a <HAL_GPIO_Init+0x1fa>
 8004ff4:	2306      	movs	r3, #6
 8004ff6:	e008      	b.n	800500a <HAL_GPIO_Init+0x1fa>
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	e006      	b.n	800500a <HAL_GPIO_Init+0x1fa>
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e004      	b.n	800500a <HAL_GPIO_Init+0x1fa>
 8005000:	2302      	movs	r3, #2
 8005002:	e002      	b.n	800500a <HAL_GPIO_Init+0x1fa>
 8005004:	2301      	movs	r3, #1
 8005006:	e000      	b.n	800500a <HAL_GPIO_Init+0x1fa>
 8005008:	2300      	movs	r3, #0
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	f002 0203 	and.w	r2, r2, #3
 8005010:	0092      	lsls	r2, r2, #2
 8005012:	4093      	lsls	r3, r2
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800501a:	4937      	ldr	r1, [pc, #220]	; (80050f8 <HAL_GPIO_Init+0x2e8>)
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	089b      	lsrs	r3, r3, #2
 8005020:	3302      	adds	r3, #2
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005028:	4b39      	ldr	r3, [pc, #228]	; (8005110 <HAL_GPIO_Init+0x300>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	43db      	mvns	r3, r3
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4013      	ands	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800504c:	4a30      	ldr	r2, [pc, #192]	; (8005110 <HAL_GPIO_Init+0x300>)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005052:	4b2f      	ldr	r3, [pc, #188]	; (8005110 <HAL_GPIO_Init+0x300>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	43db      	mvns	r3, r3
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4013      	ands	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005076:	4a26      	ldr	r2, [pc, #152]	; (8005110 <HAL_GPIO_Init+0x300>)
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800507c:	4b24      	ldr	r3, [pc, #144]	; (8005110 <HAL_GPIO_Init+0x300>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	43db      	mvns	r3, r3
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4013      	ands	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80050a0:	4a1b      	ldr	r2, [pc, #108]	; (8005110 <HAL_GPIO_Init+0x300>)
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80050a6:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <HAL_GPIO_Init+0x300>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	43db      	mvns	r3, r3
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	4013      	ands	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80050ca:	4a11      	ldr	r2, [pc, #68]	; (8005110 <HAL_GPIO_Init+0x300>)
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	3301      	adds	r3, #1
 80050d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f47f ae9d 	bne.w	8004e20 <HAL_GPIO_Init+0x10>
  }
}
 80050e6:	bf00      	nop
 80050e8:	bf00      	nop
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	40021000 	.word	0x40021000
 80050f8:	40010000 	.word	0x40010000
 80050fc:	48000400 	.word	0x48000400
 8005100:	48000800 	.word	0x48000800
 8005104:	48000c00 	.word	0x48000c00
 8005108:	48001000 	.word	0x48001000
 800510c:	48001400 	.word	0x48001400
 8005110:	40010400 	.word	0x40010400

08005114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	807b      	strh	r3, [r7, #2]
 8005120:	4613      	mov	r3, r2
 8005122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005124:	787b      	ldrb	r3, [r7, #1]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800512a:	887a      	ldrh	r2, [r7, #2]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005130:	e002      	b.n	8005138 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005132:	887a      	ldrh	r2, [r7, #2]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	4603      	mov	r3, r0
 800514c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800514e:	4b08      	ldr	r3, [pc, #32]	; (8005170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005150:	695a      	ldr	r2, [r3, #20]
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	4013      	ands	r3, r2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d006      	beq.n	8005168 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800515a:	4a05      	ldr	r2, [pc, #20]	; (8005170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800515c:	88fb      	ldrh	r3, [r7, #6]
 800515e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	4618      	mov	r0, r3
 8005164:	f000 f806 	bl	8005174 <HAL_GPIO_EXTI_Callback>
  }
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40010400 	.word	0x40010400

08005174 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
	...

0800518c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e0bb      	b.n	800531a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b05      	cmp	r3, #5
 80051ac:	d101      	bne.n	80051b2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e0b3      	b.n	800531a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d101      	bne.n	80051c2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e0ab      	b.n	800531a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051c2:	4b58      	ldr	r3, [pc, #352]	; (8005324 <HAL_OPAMP_Init+0x198>)
 80051c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c6:	4a57      	ldr	r2, [pc, #348]	; (8005324 <HAL_OPAMP_Init+0x198>)
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	6613      	str	r3, [r2, #96]	; 0x60
 80051ce:	4b55      	ldr	r3, [pc, #340]	; (8005324 <HAL_OPAMP_Init+0x198>)
 80051d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	60bb      	str	r3, [r7, #8]
 80051d8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d103      	bne.n	80051ee <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fd f928 	bl	8002444 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	2b40      	cmp	r3, #64	; 0x40
 80051fa:	d003      	beq.n	8005204 <HAL_OPAMP_Init+0x78>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b60      	cmp	r3, #96	; 0x60
 8005202:	d133      	bne.n	800526c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f023 0110 	bic.w	r1, r3, #16
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	4b41      	ldr	r3, [pc, #260]	; (8005328 <HAL_OPAMP_Init+0x19c>)
 8005222:	4013      	ands	r3, r2
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6851      	ldr	r1, [r2, #4]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6892      	ldr	r2, [r2, #8]
 800522c:	4311      	orrs	r1, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6912      	ldr	r2, [r2, #16]
 8005232:	430a      	orrs	r2, r1
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	7d09      	ldrb	r1, [r1, #20]
 8005238:	2901      	cmp	r1, #1
 800523a:	d102      	bne.n	8005242 <HAL_OPAMP_Init+0xb6>
 800523c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005240:	e000      	b.n	8005244 <HAL_OPAMP_Init+0xb8>
 8005242:	2100      	movs	r1, #0
 8005244:	4311      	orrs	r1, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800524a:	4311      	orrs	r1, r2
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005250:	4311      	orrs	r1, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005256:	04d2      	lsls	r2, r2, #19
 8005258:	4311      	orrs	r1, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800525e:	0612      	lsls	r2, r2, #24
 8005260:	4311      	orrs	r1, r2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6812      	ldr	r2, [r2, #0]
 8005266:	430b      	orrs	r3, r1
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	e035      	b.n	80052d8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f023 0110 	bic.w	r1, r3, #16
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	4b27      	ldr	r3, [pc, #156]	; (8005328 <HAL_OPAMP_Init+0x19c>)
 800528a:	4013      	ands	r3, r2
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6851      	ldr	r1, [r2, #4]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6892      	ldr	r2, [r2, #8]
 8005294:	4311      	orrs	r1, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68d2      	ldr	r2, [r2, #12]
 800529a:	4311      	orrs	r1, r2
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6912      	ldr	r2, [r2, #16]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	7d09      	ldrb	r1, [r1, #20]
 80052a6:	2901      	cmp	r1, #1
 80052a8:	d102      	bne.n	80052b0 <HAL_OPAMP_Init+0x124>
 80052aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052ae:	e000      	b.n	80052b2 <HAL_OPAMP_Init+0x126>
 80052b0:	2100      	movs	r1, #0
 80052b2:	4311      	orrs	r1, r2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052b8:	4311      	orrs	r1, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80052be:	4311      	orrs	r1, r2
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80052c4:	04d2      	lsls	r2, r2, #19
 80052c6:	4311      	orrs	r1, r2
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052cc:	0612      	lsls	r2, r2, #24
 80052ce:	4311      	orrs	r1, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	430b      	orrs	r3, r1
 80052d6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	db10      	blt.n	8005304 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d103      	bne.n	8005318 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8005318:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	40021000 	.word	0x40021000
 8005328:	e0003e11 	.word	0xe0003e11

0800532c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d102      	bne.n	8005344 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	73fb      	strb	r3, [r7, #15]
 8005342:	e01d      	b.n	8005380 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b05      	cmp	r3, #5
 800534e:	d102      	bne.n	8005356 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	73fb      	strb	r3, [r7, #15]
 8005354:	e014      	b.n	8005380 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b01      	cmp	r3, #1
 8005360:	d10c      	bne.n	800537c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0201 	orr.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2204      	movs	r2, #4
 8005376:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800537a:	e001      	b.n	8005380 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
	...

08005390 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d141      	bne.n	8005422 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800539e:	4b4b      	ldr	r3, [pc, #300]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053aa:	d131      	bne.n	8005410 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053ac:	4b47      	ldr	r3, [pc, #284]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053b2:	4a46      	ldr	r2, [pc, #280]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053bc:	4b43      	ldr	r3, [pc, #268]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053c4:	4a41      	ldr	r2, [pc, #260]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053cc:	4b40      	ldr	r3, [pc, #256]	; (80054d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2232      	movs	r2, #50	; 0x32
 80053d2:	fb02 f303 	mul.w	r3, r2, r3
 80053d6:	4a3f      	ldr	r2, [pc, #252]	; (80054d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80053d8:	fba2 2303 	umull	r2, r3, r2, r3
 80053dc:	0c9b      	lsrs	r3, r3, #18
 80053de:	3301      	adds	r3, #1
 80053e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053e2:	e002      	b.n	80053ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053ea:	4b38      	ldr	r3, [pc, #224]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f6:	d102      	bne.n	80053fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f2      	bne.n	80053e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053fe:	4b33      	ldr	r3, [pc, #204]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540a:	d158      	bne.n	80054be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e057      	b.n	80054c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005410:	4b2e      	ldr	r3, [pc, #184]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005416:	4a2d      	ldr	r2, [pc, #180]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800541c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005420:	e04d      	b.n	80054be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005428:	d141      	bne.n	80054ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800542a:	4b28      	ldr	r3, [pc, #160]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005436:	d131      	bne.n	800549c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005438:	4b24      	ldr	r3, [pc, #144]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800543a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800543e:	4a23      	ldr	r2, [pc, #140]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005444:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005448:	4b20      	ldr	r3, [pc, #128]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005450:	4a1e      	ldr	r2, [pc, #120]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005456:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005458:	4b1d      	ldr	r3, [pc, #116]	; (80054d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2232      	movs	r2, #50	; 0x32
 800545e:	fb02 f303 	mul.w	r3, r2, r3
 8005462:	4a1c      	ldr	r2, [pc, #112]	; (80054d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005464:	fba2 2303 	umull	r2, r3, r2, r3
 8005468:	0c9b      	lsrs	r3, r3, #18
 800546a:	3301      	adds	r3, #1
 800546c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800546e:	e002      	b.n	8005476 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3b01      	subs	r3, #1
 8005474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005476:	4b15      	ldr	r3, [pc, #84]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005482:	d102      	bne.n	800548a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1f2      	bne.n	8005470 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800548a:	4b10      	ldr	r3, [pc, #64]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005496:	d112      	bne.n	80054be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e011      	b.n	80054c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800549e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a2:	4a0a      	ldr	r2, [pc, #40]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80054ac:	e007      	b.n	80054be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054ae:	4b07      	ldr	r3, [pc, #28]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054b6:	4a05      	ldr	r2, [pc, #20]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	40007000 	.word	0x40007000
 80054d0:	2000000c 	.word	0x2000000c
 80054d4:	431bde83 	.word	0x431bde83

080054d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80054dc:	4b05      	ldr	r3, [pc, #20]	; (80054f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	4a04      	ldr	r2, [pc, #16]	; (80054f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80054e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054e6:	6093      	str	r3, [r2, #8]
}
 80054e8:	bf00      	nop
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40007000 	.word	0x40007000

080054f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e306      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d075      	beq.n	8005602 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005516:	4b97      	ldr	r3, [pc, #604]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 030c 	and.w	r3, r3, #12
 800551e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005520:	4b94      	ldr	r3, [pc, #592]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f003 0303 	and.w	r3, r3, #3
 8005528:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	2b0c      	cmp	r3, #12
 800552e:	d102      	bne.n	8005536 <HAL_RCC_OscConfig+0x3e>
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2b03      	cmp	r3, #3
 8005534:	d002      	beq.n	800553c <HAL_RCC_OscConfig+0x44>
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	2b08      	cmp	r3, #8
 800553a:	d10b      	bne.n	8005554 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800553c:	4b8d      	ldr	r3, [pc, #564]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d05b      	beq.n	8005600 <HAL_RCC_OscConfig+0x108>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d157      	bne.n	8005600 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e2e1      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800555c:	d106      	bne.n	800556c <HAL_RCC_OscConfig+0x74>
 800555e:	4b85      	ldr	r3, [pc, #532]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a84      	ldr	r2, [pc, #528]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 8005564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	e01d      	b.n	80055a8 <HAL_RCC_OscConfig+0xb0>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005574:	d10c      	bne.n	8005590 <HAL_RCC_OscConfig+0x98>
 8005576:	4b7f      	ldr	r3, [pc, #508]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a7e      	ldr	r2, [pc, #504]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 800557c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	4b7c      	ldr	r3, [pc, #496]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a7b      	ldr	r2, [pc, #492]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 8005588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	e00b      	b.n	80055a8 <HAL_RCC_OscConfig+0xb0>
 8005590:	4b78      	ldr	r3, [pc, #480]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a77      	ldr	r2, [pc, #476]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 8005596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	4b75      	ldr	r3, [pc, #468]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a74      	ldr	r2, [pc, #464]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 80055a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d013      	beq.n	80055d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b0:	f7fd fa00 	bl	80029b4 <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055b8:	f7fd f9fc 	bl	80029b4 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b64      	cmp	r3, #100	; 0x64
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e2a6      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055ca:	4b6a      	ldr	r3, [pc, #424]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0f0      	beq.n	80055b8 <HAL_RCC_OscConfig+0xc0>
 80055d6:	e014      	b.n	8005602 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d8:	f7fd f9ec 	bl	80029b4 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055e0:	f7fd f9e8 	bl	80029b4 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b64      	cmp	r3, #100	; 0x64
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e292      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055f2:	4b60      	ldr	r3, [pc, #384]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1f0      	bne.n	80055e0 <HAL_RCC_OscConfig+0xe8>
 80055fe:	e000      	b.n	8005602 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d075      	beq.n	80056fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800560e:	4b59      	ldr	r3, [pc, #356]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 030c 	and.w	r3, r3, #12
 8005616:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005618:	4b56      	ldr	r3, [pc, #344]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0303 	and.w	r3, r3, #3
 8005620:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	2b0c      	cmp	r3, #12
 8005626:	d102      	bne.n	800562e <HAL_RCC_OscConfig+0x136>
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d002      	beq.n	8005634 <HAL_RCC_OscConfig+0x13c>
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	2b04      	cmp	r3, #4
 8005632:	d11f      	bne.n	8005674 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005634:	4b4f      	ldr	r3, [pc, #316]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <HAL_RCC_OscConfig+0x154>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e265      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800564c:	4b49      	ldr	r3, [pc, #292]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	061b      	lsls	r3, r3, #24
 800565a:	4946      	ldr	r1, [pc, #280]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 800565c:	4313      	orrs	r3, r2
 800565e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005660:	4b45      	ldr	r3, [pc, #276]	; (8005778 <HAL_RCC_OscConfig+0x280>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4618      	mov	r0, r3
 8005666:	f7fd f959 	bl	800291c <HAL_InitTick>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d043      	beq.n	80056f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e251      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d023      	beq.n	80056c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800567c:	4b3d      	ldr	r3, [pc, #244]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a3c      	ldr	r2, [pc, #240]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 8005682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7fd f994 	bl	80029b4 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005690:	f7fd f990 	bl	80029b4 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e23a      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056a2:	4b34      	ldr	r3, [pc, #208]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0f0      	beq.n	8005690 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ae:	4b31      	ldr	r3, [pc, #196]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	061b      	lsls	r3, r3, #24
 80056bc:	492d      	ldr	r1, [pc, #180]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	604b      	str	r3, [r1, #4]
 80056c2:	e01a      	b.n	80056fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056c4:	4b2b      	ldr	r3, [pc, #172]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a2a      	ldr	r2, [pc, #168]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 80056ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d0:	f7fd f970 	bl	80029b4 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056d8:	f7fd f96c 	bl	80029b4 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e216      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056ea:	4b22      	ldr	r3, [pc, #136]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0x1e0>
 80056f6:	e000      	b.n	80056fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0308 	and.w	r3, r3, #8
 8005702:	2b00      	cmp	r3, #0
 8005704:	d041      	beq.n	800578a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01c      	beq.n	8005748 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800570e:	4b19      	ldr	r3, [pc, #100]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 8005710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005714:	4a17      	ldr	r2, [pc, #92]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571e:	f7fd f949 	bl	80029b4 <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005726:	f7fd f945 	bl	80029b4 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e1ef      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005738:	4b0e      	ldr	r3, [pc, #56]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 800573a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0ef      	beq.n	8005726 <HAL_RCC_OscConfig+0x22e>
 8005746:	e020      	b.n	800578a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005748:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 800574a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800574e:	4a09      	ldr	r2, [pc, #36]	; (8005774 <HAL_RCC_OscConfig+0x27c>)
 8005750:	f023 0301 	bic.w	r3, r3, #1
 8005754:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005758:	f7fd f92c 	bl	80029b4 <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800575e:	e00d      	b.n	800577c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005760:	f7fd f928 	bl	80029b4 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d906      	bls.n	800577c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e1d2      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
 8005772:	bf00      	nop
 8005774:	40021000 	.word	0x40021000
 8005778:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800577c:	4b8c      	ldr	r3, [pc, #560]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 800577e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1ea      	bne.n	8005760 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0304 	and.w	r3, r3, #4
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 80a6 	beq.w	80058e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005798:	2300      	movs	r3, #0
 800579a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800579c:	4b84      	ldr	r3, [pc, #528]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 800579e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_RCC_OscConfig+0x2b4>
 80057a8:	2301      	movs	r3, #1
 80057aa:	e000      	b.n	80057ae <HAL_RCC_OscConfig+0x2b6>
 80057ac:	2300      	movs	r3, #0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00d      	beq.n	80057ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b2:	4b7f      	ldr	r3, [pc, #508]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 80057b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b6:	4a7e      	ldr	r2, [pc, #504]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 80057b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057bc:	6593      	str	r3, [r2, #88]	; 0x58
 80057be:	4b7c      	ldr	r3, [pc, #496]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 80057c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80057ca:	2301      	movs	r3, #1
 80057cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ce:	4b79      	ldr	r3, [pc, #484]	; (80059b4 <HAL_RCC_OscConfig+0x4bc>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d118      	bne.n	800580c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057da:	4b76      	ldr	r3, [pc, #472]	; (80059b4 <HAL_RCC_OscConfig+0x4bc>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a75      	ldr	r2, [pc, #468]	; (80059b4 <HAL_RCC_OscConfig+0x4bc>)
 80057e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057e6:	f7fd f8e5 	bl	80029b4 <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ee:	f7fd f8e1 	bl	80029b4 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e18b      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005800:	4b6c      	ldr	r3, [pc, #432]	; (80059b4 <HAL_RCC_OscConfig+0x4bc>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0f0      	beq.n	80057ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d108      	bne.n	8005826 <HAL_RCC_OscConfig+0x32e>
 8005814:	4b66      	ldr	r3, [pc, #408]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 8005816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581a:	4a65      	ldr	r2, [pc, #404]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 800581c:	f043 0301 	orr.w	r3, r3, #1
 8005820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005824:	e024      	b.n	8005870 <HAL_RCC_OscConfig+0x378>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2b05      	cmp	r3, #5
 800582c:	d110      	bne.n	8005850 <HAL_RCC_OscConfig+0x358>
 800582e:	4b60      	ldr	r3, [pc, #384]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 8005830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005834:	4a5e      	ldr	r2, [pc, #376]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 8005836:	f043 0304 	orr.w	r3, r3, #4
 800583a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800583e:	4b5c      	ldr	r3, [pc, #368]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 8005840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005844:	4a5a      	ldr	r2, [pc, #360]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800584e:	e00f      	b.n	8005870 <HAL_RCC_OscConfig+0x378>
 8005850:	4b57      	ldr	r3, [pc, #348]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 8005852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005856:	4a56      	ldr	r2, [pc, #344]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 8005858:	f023 0301 	bic.w	r3, r3, #1
 800585c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005860:	4b53      	ldr	r3, [pc, #332]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 8005862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005866:	4a52      	ldr	r2, [pc, #328]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 8005868:	f023 0304 	bic.w	r3, r3, #4
 800586c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d016      	beq.n	80058a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005878:	f7fd f89c 	bl	80029b4 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800587e:	e00a      	b.n	8005896 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005880:	f7fd f898 	bl	80029b4 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	f241 3288 	movw	r2, #5000	; 0x1388
 800588e:	4293      	cmp	r3, r2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e140      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005896:	4b46      	ldr	r3, [pc, #280]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 8005898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0ed      	beq.n	8005880 <HAL_RCC_OscConfig+0x388>
 80058a4:	e015      	b.n	80058d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a6:	f7fd f885 	bl	80029b4 <HAL_GetTick>
 80058aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058ac:	e00a      	b.n	80058c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ae:	f7fd f881 	bl	80029b4 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058bc:	4293      	cmp	r3, r2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e129      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058c4:	4b3a      	ldr	r3, [pc, #232]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 80058c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1ed      	bne.n	80058ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058d2:	7ffb      	ldrb	r3, [r7, #31]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d105      	bne.n	80058e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d8:	4b35      	ldr	r3, [pc, #212]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 80058da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058dc:	4a34      	ldr	r2, [pc, #208]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 80058de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d03c      	beq.n	800596a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01c      	beq.n	8005932 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058f8:	4b2d      	ldr	r3, [pc, #180]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 80058fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058fe:	4a2c      	ldr	r2, [pc, #176]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 8005900:	f043 0301 	orr.w	r3, r3, #1
 8005904:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005908:	f7fd f854 	bl	80029b4 <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005910:	f7fd f850 	bl	80029b4 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e0fa      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005922:	4b23      	ldr	r3, [pc, #140]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 8005924:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0ef      	beq.n	8005910 <HAL_RCC_OscConfig+0x418>
 8005930:	e01b      	b.n	800596a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005932:	4b1f      	ldr	r3, [pc, #124]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 8005934:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005938:	4a1d      	ldr	r2, [pc, #116]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 800593a:	f023 0301 	bic.w	r3, r3, #1
 800593e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005942:	f7fd f837 	bl	80029b4 <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005948:	e008      	b.n	800595c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800594a:	f7fd f833 	bl	80029b4 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d901      	bls.n	800595c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e0dd      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800595c:	4b14      	ldr	r3, [pc, #80]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 800595e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1ef      	bne.n	800594a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 80d1 	beq.w	8005b16 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005974:	4b0e      	ldr	r3, [pc, #56]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f003 030c 	and.w	r3, r3, #12
 800597c:	2b0c      	cmp	r3, #12
 800597e:	f000 808b 	beq.w	8005a98 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	2b02      	cmp	r3, #2
 8005988:	d15e      	bne.n	8005a48 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800598a:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a08      	ldr	r2, [pc, #32]	; (80059b0 <HAL_RCC_OscConfig+0x4b8>)
 8005990:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005996:	f7fd f80d 	bl	80029b4 <HAL_GetTick>
 800599a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800599c:	e00c      	b.n	80059b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800599e:	f7fd f809 	bl	80029b4 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d905      	bls.n	80059b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e0b3      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
 80059b0:	40021000 	.word	0x40021000
 80059b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059b8:	4b59      	ldr	r3, [pc, #356]	; (8005b20 <HAL_RCC_OscConfig+0x628>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1ec      	bne.n	800599e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059c4:	4b56      	ldr	r3, [pc, #344]	; (8005b20 <HAL_RCC_OscConfig+0x628>)
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	4b56      	ldr	r3, [pc, #344]	; (8005b24 <HAL_RCC_OscConfig+0x62c>)
 80059ca:	4013      	ands	r3, r2
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6a11      	ldr	r1, [r2, #32]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059d4:	3a01      	subs	r2, #1
 80059d6:	0112      	lsls	r2, r2, #4
 80059d8:	4311      	orrs	r1, r2
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80059de:	0212      	lsls	r2, r2, #8
 80059e0:	4311      	orrs	r1, r2
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80059e6:	0852      	lsrs	r2, r2, #1
 80059e8:	3a01      	subs	r2, #1
 80059ea:	0552      	lsls	r2, r2, #21
 80059ec:	4311      	orrs	r1, r2
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059f2:	0852      	lsrs	r2, r2, #1
 80059f4:	3a01      	subs	r2, #1
 80059f6:	0652      	lsls	r2, r2, #25
 80059f8:	4311      	orrs	r1, r2
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059fe:	06d2      	lsls	r2, r2, #27
 8005a00:	430a      	orrs	r2, r1
 8005a02:	4947      	ldr	r1, [pc, #284]	; (8005b20 <HAL_RCC_OscConfig+0x628>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a08:	4b45      	ldr	r3, [pc, #276]	; (8005b20 <HAL_RCC_OscConfig+0x628>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a44      	ldr	r2, [pc, #272]	; (8005b20 <HAL_RCC_OscConfig+0x628>)
 8005a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a12:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a14:	4b42      	ldr	r3, [pc, #264]	; (8005b20 <HAL_RCC_OscConfig+0x628>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	4a41      	ldr	r2, [pc, #260]	; (8005b20 <HAL_RCC_OscConfig+0x628>)
 8005a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a20:	f7fc ffc8 	bl	80029b4 <HAL_GetTick>
 8005a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a26:	e008      	b.n	8005a3a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a28:	f7fc ffc4 	bl	80029b4 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e06e      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a3a:	4b39      	ldr	r3, [pc, #228]	; (8005b20 <HAL_RCC_OscConfig+0x628>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0f0      	beq.n	8005a28 <HAL_RCC_OscConfig+0x530>
 8005a46:	e066      	b.n	8005b16 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a48:	4b35      	ldr	r3, [pc, #212]	; (8005b20 <HAL_RCC_OscConfig+0x628>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a34      	ldr	r2, [pc, #208]	; (8005b20 <HAL_RCC_OscConfig+0x628>)
 8005a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a52:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005a54:	4b32      	ldr	r3, [pc, #200]	; (8005b20 <HAL_RCC_OscConfig+0x628>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	4a31      	ldr	r2, [pc, #196]	; (8005b20 <HAL_RCC_OscConfig+0x628>)
 8005a5a:	f023 0303 	bic.w	r3, r3, #3
 8005a5e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005a60:	4b2f      	ldr	r3, [pc, #188]	; (8005b20 <HAL_RCC_OscConfig+0x628>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	4a2e      	ldr	r2, [pc, #184]	; (8005b20 <HAL_RCC_OscConfig+0x628>)
 8005a66:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a70:	f7fc ffa0 	bl	80029b4 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a78:	f7fc ff9c 	bl	80029b4 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e046      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a8a:	4b25      	ldr	r3, [pc, #148]	; (8005b20 <HAL_RCC_OscConfig+0x628>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCC_OscConfig+0x580>
 8005a96:	e03e      	b.n	8005b16 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e039      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005aa4:	4b1e      	ldr	r3, [pc, #120]	; (8005b20 <HAL_RCC_OscConfig+0x628>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f003 0203 	and.w	r2, r3, #3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d12c      	bne.n	8005b12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d123      	bne.n	8005b12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d11b      	bne.n	8005b12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d113      	bne.n	8005b12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af4:	085b      	lsrs	r3, r3, #1
 8005af6:	3b01      	subs	r3, #1
 8005af8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d109      	bne.n	8005b12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b08:	085b      	lsrs	r3, r3, #1
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d001      	beq.n	8005b16 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3720      	adds	r7, #32
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40021000 	.word	0x40021000
 8005b24:	019f800c 	.word	0x019f800c

08005b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b32:	2300      	movs	r3, #0
 8005b34:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e11e      	b.n	8005d7e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b40:	4b91      	ldr	r3, [pc, #580]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 030f 	and.w	r3, r3, #15
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d910      	bls.n	8005b70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4e:	4b8e      	ldr	r3, [pc, #568]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f023 020f 	bic.w	r2, r3, #15
 8005b56:	498c      	ldr	r1, [pc, #560]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b5e:	4b8a      	ldr	r3, [pc, #552]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d001      	beq.n	8005b70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e106      	b.n	8005d7e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d073      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d129      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b84:	4b81      	ldr	r3, [pc, #516]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e0f4      	b.n	8005d7e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005b94:	f000 f99e 	bl	8005ed4 <RCC_GetSysClockFreqFromPLLSource>
 8005b98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	4a7c      	ldr	r2, [pc, #496]	; (8005d90 <HAL_RCC_ClockConfig+0x268>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d93f      	bls.n	8005c22 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005ba2:	4b7a      	ldr	r3, [pc, #488]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d009      	beq.n	8005bc2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d033      	beq.n	8005c22 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d12f      	bne.n	8005c22 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bc2:	4b72      	ldr	r3, [pc, #456]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bca:	4a70      	ldr	r2, [pc, #448]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005bd2:	2380      	movs	r3, #128	; 0x80
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	e024      	b.n	8005c22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d107      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005be0:	4b6a      	ldr	r3, [pc, #424]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d109      	bne.n	8005c00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0c6      	b.n	8005d7e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bf0:	4b66      	ldr	r3, [pc, #408]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e0be      	b.n	8005d7e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005c00:	f000 f8ce 	bl	8005da0 <HAL_RCC_GetSysClockFreq>
 8005c04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	4a61      	ldr	r2, [pc, #388]	; (8005d90 <HAL_RCC_ClockConfig+0x268>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d909      	bls.n	8005c22 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c0e:	4b5f      	ldr	r3, [pc, #380]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c16:	4a5d      	ldr	r2, [pc, #372]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c1c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005c1e:	2380      	movs	r3, #128	; 0x80
 8005c20:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c22:	4b5a      	ldr	r3, [pc, #360]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f023 0203 	bic.w	r2, r3, #3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	4957      	ldr	r1, [pc, #348]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c34:	f7fc febe 	bl	80029b4 <HAL_GetTick>
 8005c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3a:	e00a      	b.n	8005c52 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c3c:	f7fc feba 	bl	80029b4 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e095      	b.n	8005d7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c52:	4b4e      	ldr	r3, [pc, #312]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 020c 	and.w	r2, r3, #12
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d1eb      	bne.n	8005c3c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d023      	beq.n	8005cb8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c7c:	4b43      	ldr	r3, [pc, #268]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	4a42      	ldr	r2, [pc, #264]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005c82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c86:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d007      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005c94:	4b3d      	ldr	r3, [pc, #244]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c9c:	4a3b      	ldr	r2, [pc, #236]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005c9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005ca2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ca4:	4b39      	ldr	r3, [pc, #228]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	4936      	ldr	r1, [pc, #216]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	608b      	str	r3, [r1, #8]
 8005cb6:	e008      	b.n	8005cca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2b80      	cmp	r3, #128	; 0x80
 8005cbc:	d105      	bne.n	8005cca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005cbe:	4b33      	ldr	r3, [pc, #204]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	4a32      	ldr	r2, [pc, #200]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005cc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cc8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cca:	4b2f      	ldr	r3, [pc, #188]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d21d      	bcs.n	8005d14 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd8:	4b2b      	ldr	r3, [pc, #172]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f023 020f 	bic.w	r2, r3, #15
 8005ce0:	4929      	ldr	r1, [pc, #164]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ce8:	f7fc fe64 	bl	80029b4 <HAL_GetTick>
 8005cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cee:	e00a      	b.n	8005d06 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf0:	f7fc fe60 	bl	80029b4 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e03b      	b.n	8005d7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d06:	4b20      	ldr	r3, [pc, #128]	; (8005d88 <HAL_RCC_ClockConfig+0x260>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d1ed      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d008      	beq.n	8005d32 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d20:	4b1a      	ldr	r3, [pc, #104]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	4917      	ldr	r1, [pc, #92]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0308 	and.w	r3, r3, #8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d3e:	4b13      	ldr	r3, [pc, #76]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	490f      	ldr	r1, [pc, #60]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d52:	f000 f825 	bl	8005da0 <HAL_RCC_GetSysClockFreq>
 8005d56:	4602      	mov	r2, r0
 8005d58:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <HAL_RCC_ClockConfig+0x264>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	091b      	lsrs	r3, r3, #4
 8005d5e:	f003 030f 	and.w	r3, r3, #15
 8005d62:	490c      	ldr	r1, [pc, #48]	; (8005d94 <HAL_RCC_ClockConfig+0x26c>)
 8005d64:	5ccb      	ldrb	r3, [r1, r3]
 8005d66:	f003 031f 	and.w	r3, r3, #31
 8005d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d6e:	4a0a      	ldr	r2, [pc, #40]	; (8005d98 <HAL_RCC_ClockConfig+0x270>)
 8005d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d72:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <HAL_RCC_ClockConfig+0x274>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fc fdd0 	bl	800291c <HAL_InitTick>
 8005d7c:	4603      	mov	r3, r0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40022000 	.word	0x40022000
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	04c4b400 	.word	0x04c4b400
 8005d94:	0800c32c 	.word	0x0800c32c
 8005d98:	2000000c 	.word	0x2000000c
 8005d9c:	20000010 	.word	0x20000010

08005da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005da6:	4b2c      	ldr	r3, [pc, #176]	; (8005e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 030c 	and.w	r3, r3, #12
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d102      	bne.n	8005db8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005db2:	4b2a      	ldr	r3, [pc, #168]	; (8005e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	e047      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005db8:	4b27      	ldr	r3, [pc, #156]	; (8005e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f003 030c 	and.w	r3, r3, #12
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d102      	bne.n	8005dca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005dc4:	4b26      	ldr	r3, [pc, #152]	; (8005e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005dc6:	613b      	str	r3, [r7, #16]
 8005dc8:	e03e      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005dca:	4b23      	ldr	r3, [pc, #140]	; (8005e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 030c 	and.w	r3, r3, #12
 8005dd2:	2b0c      	cmp	r3, #12
 8005dd4:	d136      	bne.n	8005e44 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dd6:	4b20      	ldr	r3, [pc, #128]	; (8005e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005de0:	4b1d      	ldr	r3, [pc, #116]	; (8005e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	091b      	lsrs	r3, r3, #4
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	3301      	adds	r3, #1
 8005dec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d10c      	bne.n	8005e0e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005df4:	4a1a      	ldr	r2, [pc, #104]	; (8005e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfc:	4a16      	ldr	r2, [pc, #88]	; (8005e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dfe:	68d2      	ldr	r2, [r2, #12]
 8005e00:	0a12      	lsrs	r2, r2, #8
 8005e02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e06:	fb02 f303 	mul.w	r3, r2, r3
 8005e0a:	617b      	str	r3, [r7, #20]
      break;
 8005e0c:	e00c      	b.n	8005e28 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e0e:	4a13      	ldr	r2, [pc, #76]	; (8005e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e16:	4a10      	ldr	r2, [pc, #64]	; (8005e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e18:	68d2      	ldr	r2, [r2, #12]
 8005e1a:	0a12      	lsrs	r2, r2, #8
 8005e1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e20:	fb02 f303 	mul.w	r3, r2, r3
 8005e24:	617b      	str	r3, [r7, #20]
      break;
 8005e26:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e28:	4b0b      	ldr	r3, [pc, #44]	; (8005e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	0e5b      	lsrs	r3, r3, #25
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	3301      	adds	r3, #1
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e40:	613b      	str	r3, [r7, #16]
 8005e42:	e001      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e48:	693b      	ldr	r3, [r7, #16]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40021000 	.word	0x40021000
 8005e5c:	00f42400 	.word	0x00f42400
 8005e60:	016e3600 	.word	0x016e3600

08005e64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e68:	4b03      	ldr	r3, [pc, #12]	; (8005e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	2000000c 	.word	0x2000000c

08005e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e80:	f7ff fff0 	bl	8005e64 <HAL_RCC_GetHCLKFreq>
 8005e84:	4602      	mov	r2, r0
 8005e86:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	0a1b      	lsrs	r3, r3, #8
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	4904      	ldr	r1, [pc, #16]	; (8005ea4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e92:	5ccb      	ldrb	r3, [r1, r3]
 8005e94:	f003 031f 	and.w	r3, r3, #31
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	0800c33c 	.word	0x0800c33c

08005ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005eac:	f7ff ffda 	bl	8005e64 <HAL_RCC_GetHCLKFreq>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	0adb      	lsrs	r3, r3, #11
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	4904      	ldr	r1, [pc, #16]	; (8005ed0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ebe:	5ccb      	ldrb	r3, [r1, r3]
 8005ec0:	f003 031f 	and.w	r3, r3, #31
 8005ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	0800c33c 	.word	0x0800c33c

08005ed4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005eda:	4b1e      	ldr	r3, [pc, #120]	; (8005f54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ee4:	4b1b      	ldr	r3, [pc, #108]	; (8005f54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	091b      	lsrs	r3, r3, #4
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	3301      	adds	r3, #1
 8005ef0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d10c      	bne.n	8005f12 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ef8:	4a17      	ldr	r2, [pc, #92]	; (8005f58 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f00:	4a14      	ldr	r2, [pc, #80]	; (8005f54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f02:	68d2      	ldr	r2, [r2, #12]
 8005f04:	0a12      	lsrs	r2, r2, #8
 8005f06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f0a:	fb02 f303 	mul.w	r3, r2, r3
 8005f0e:	617b      	str	r3, [r7, #20]
    break;
 8005f10:	e00c      	b.n	8005f2c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f12:	4a12      	ldr	r2, [pc, #72]	; (8005f5c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1a:	4a0e      	ldr	r2, [pc, #56]	; (8005f54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f1c:	68d2      	ldr	r2, [r2, #12]
 8005f1e:	0a12      	lsrs	r2, r2, #8
 8005f20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f24:	fb02 f303 	mul.w	r3, r2, r3
 8005f28:	617b      	str	r3, [r7, #20]
    break;
 8005f2a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f2c:	4b09      	ldr	r3, [pc, #36]	; (8005f54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	0e5b      	lsrs	r3, r3, #25
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	3301      	adds	r3, #1
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f44:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005f46:	687b      	ldr	r3, [r7, #4]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	371c      	adds	r7, #28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	40021000 	.word	0x40021000
 8005f58:	016e3600 	.word	0x016e3600
 8005f5c:	00f42400 	.word	0x00f42400

08005f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f68:	2300      	movs	r3, #0
 8005f6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8098 	beq.w	80060ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f82:	4b43      	ldr	r3, [pc, #268]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10d      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f8e:	4b40      	ldr	r3, [pc, #256]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f92:	4a3f      	ldr	r2, [pc, #252]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f98:	6593      	str	r3, [r2, #88]	; 0x58
 8005f9a:	4b3d      	ldr	r3, [pc, #244]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa2:	60bb      	str	r3, [r7, #8]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005faa:	4b3a      	ldr	r3, [pc, #232]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a39      	ldr	r2, [pc, #228]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fb6:	f7fc fcfd 	bl	80029b4 <HAL_GetTick>
 8005fba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fbc:	e009      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fbe:	f7fc fcf9 	bl	80029b4 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d902      	bls.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	74fb      	strb	r3, [r7, #19]
        break;
 8005fd0:	e005      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fd2:	4b30      	ldr	r3, [pc, #192]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0ef      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005fde:	7cfb      	ldrb	r3, [r7, #19]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d159      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005fe4:	4b2a      	ldr	r3, [pc, #168]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d01e      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d019      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006000:	4b23      	ldr	r3, [pc, #140]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800600a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800600c:	4b20      	ldr	r3, [pc, #128]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800600e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006012:	4a1f      	ldr	r2, [pc, #124]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800601c:	4b1c      	ldr	r3, [pc, #112]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800601e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006022:	4a1b      	ldr	r2, [pc, #108]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800602c:	4a18      	ldr	r2, [pc, #96]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d016      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603e:	f7fc fcb9 	bl	80029b4 <HAL_GetTick>
 8006042:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006044:	e00b      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006046:	f7fc fcb5 	bl	80029b4 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	f241 3288 	movw	r2, #5000	; 0x1388
 8006054:	4293      	cmp	r3, r2
 8006056:	d902      	bls.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	74fb      	strb	r3, [r7, #19]
            break;
 800605c:	e006      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800605e:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b00      	cmp	r3, #0
 800606a:	d0ec      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800606c:	7cfb      	ldrb	r3, [r7, #19]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10b      	bne.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006072:	4b07      	ldr	r3, [pc, #28]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006080:	4903      	ldr	r1, [pc, #12]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006082:	4313      	orrs	r3, r2
 8006084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006088:	e008      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800608a:	7cfb      	ldrb	r3, [r7, #19]
 800608c:	74bb      	strb	r3, [r7, #18]
 800608e:	e005      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006090:	40021000 	.word	0x40021000
 8006094:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006098:	7cfb      	ldrb	r3, [r7, #19]
 800609a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800609c:	7c7b      	ldrb	r3, [r7, #17]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d105      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a2:	4ba7      	ldr	r3, [pc, #668]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a6:	4aa6      	ldr	r2, [pc, #664]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060ba:	4ba1      	ldr	r3, [pc, #644]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c0:	f023 0203 	bic.w	r2, r3, #3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	499d      	ldr	r1, [pc, #628]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00a      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060dc:	4b98      	ldr	r3, [pc, #608]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e2:	f023 020c 	bic.w	r2, r3, #12
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	4995      	ldr	r1, [pc, #596]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060fe:	4b90      	ldr	r3, [pc, #576]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006104:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	498c      	ldr	r1, [pc, #560]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800610e:	4313      	orrs	r3, r2
 8006110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00a      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006120:	4b87      	ldr	r3, [pc, #540]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006126:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	4984      	ldr	r1, [pc, #528]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006130:	4313      	orrs	r3, r2
 8006132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0310 	and.w	r3, r3, #16
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006142:	4b7f      	ldr	r3, [pc, #508]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006148:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	497b      	ldr	r1, [pc, #492]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006152:	4313      	orrs	r3, r2
 8006154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0320 	and.w	r3, r3, #32
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00a      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006164:	4b76      	ldr	r3, [pc, #472]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	4973      	ldr	r1, [pc, #460]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006174:	4313      	orrs	r3, r2
 8006176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006186:	4b6e      	ldr	r3, [pc, #440]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	496a      	ldr	r1, [pc, #424]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006196:	4313      	orrs	r3, r2
 8006198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00a      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061a8:	4b65      	ldr	r3, [pc, #404]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	4962      	ldr	r1, [pc, #392]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061ca:	4b5d      	ldr	r3, [pc, #372]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	4959      	ldr	r1, [pc, #356]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00a      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061ec:	4b54      	ldr	r3, [pc, #336]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061f2:	f023 0203 	bic.w	r2, r3, #3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fa:	4951      	ldr	r1, [pc, #324]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800620e:	4b4c      	ldr	r3, [pc, #304]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006214:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	4948      	ldr	r1, [pc, #288]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800621e:	4313      	orrs	r3, r2
 8006220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800622c:	2b00      	cmp	r3, #0
 800622e:	d015      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006230:	4b43      	ldr	r3, [pc, #268]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006236:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	4940      	ldr	r1, [pc, #256]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800624e:	d105      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006250:	4b3b      	ldr	r3, [pc, #236]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	4a3a      	ldr	r2, [pc, #232]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800625a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006264:	2b00      	cmp	r3, #0
 8006266:	d015      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006268:	4b35      	ldr	r3, [pc, #212]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800626a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800626e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006276:	4932      	ldr	r1, [pc, #200]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006278:	4313      	orrs	r3, r2
 800627a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006286:	d105      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006288:	4b2d      	ldr	r3, [pc, #180]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	4a2c      	ldr	r2, [pc, #176]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800628e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006292:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d015      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062a0:	4b27      	ldr	r3, [pc, #156]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	4924      	ldr	r1, [pc, #144]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062be:	d105      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062c0:	4b1f      	ldr	r3, [pc, #124]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	4a1e      	ldr	r2, [pc, #120]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d015      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062d8:	4b19      	ldr	r3, [pc, #100]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e6:	4916      	ldr	r1, [pc, #88]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062f6:	d105      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062f8:	4b11      	ldr	r3, [pc, #68]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	4a10      	ldr	r2, [pc, #64]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006302:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d019      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006310:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006316:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	4908      	ldr	r1, [pc, #32]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006320:	4313      	orrs	r3, r2
 8006322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800632e:	d109      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006330:	4b03      	ldr	r3, [pc, #12]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	4a02      	ldr	r2, [pc, #8]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800633a:	60d3      	str	r3, [r2, #12]
 800633c:	e002      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800633e:	bf00      	nop
 8006340:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d015      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006350:	4b29      	ldr	r3, [pc, #164]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006356:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635e:	4926      	ldr	r1, [pc, #152]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006360:	4313      	orrs	r3, r2
 8006362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800636e:	d105      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006370:	4b21      	ldr	r3, [pc, #132]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	4a20      	ldr	r2, [pc, #128]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800637a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d015      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006388:	4b1b      	ldr	r3, [pc, #108]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800638a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006396:	4918      	ldr	r1, [pc, #96]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a6:	d105      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80063a8:	4b13      	ldr	r3, [pc, #76]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	4a12      	ldr	r2, [pc, #72]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d015      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80063c0:	4b0d      	ldr	r3, [pc, #52]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ce:	490a      	ldr	r1, [pc, #40]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063de:	d105      	bne.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063e0:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	4a04      	ldr	r2, [pc, #16]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80063ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	40021000 	.word	0x40021000

080063fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e049      	b.n	80064a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d106      	bne.n	8006428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7fc f884 	bl	8002530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3304      	adds	r3, #4
 8006438:	4619      	mov	r1, r3
 800643a:	4610      	mov	r0, r2
 800643c:	f000 f8a6 	bl	800658c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d001      	beq.n	80064c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e04c      	b.n	800655e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a26      	ldr	r2, [pc, #152]	; (800656c <HAL_TIM_Base_Start+0xc0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d022      	beq.n	800651c <HAL_TIM_Base_Start+0x70>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064de:	d01d      	beq.n	800651c <HAL_TIM_Base_Start+0x70>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a22      	ldr	r2, [pc, #136]	; (8006570 <HAL_TIM_Base_Start+0xc4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d018      	beq.n	800651c <HAL_TIM_Base_Start+0x70>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a21      	ldr	r2, [pc, #132]	; (8006574 <HAL_TIM_Base_Start+0xc8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d013      	beq.n	800651c <HAL_TIM_Base_Start+0x70>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a1f      	ldr	r2, [pc, #124]	; (8006578 <HAL_TIM_Base_Start+0xcc>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00e      	beq.n	800651c <HAL_TIM_Base_Start+0x70>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1e      	ldr	r2, [pc, #120]	; (800657c <HAL_TIM_Base_Start+0xd0>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d009      	beq.n	800651c <HAL_TIM_Base_Start+0x70>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1c      	ldr	r2, [pc, #112]	; (8006580 <HAL_TIM_Base_Start+0xd4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d004      	beq.n	800651c <HAL_TIM_Base_Start+0x70>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1b      	ldr	r2, [pc, #108]	; (8006584 <HAL_TIM_Base_Start+0xd8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d115      	bne.n	8006548 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	4b19      	ldr	r3, [pc, #100]	; (8006588 <HAL_TIM_Base_Start+0xdc>)
 8006524:	4013      	ands	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b06      	cmp	r3, #6
 800652c:	d015      	beq.n	800655a <HAL_TIM_Base_Start+0xae>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006534:	d011      	beq.n	800655a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 0201 	orr.w	r2, r2, #1
 8006544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006546:	e008      	b.n	800655a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0201 	orr.w	r2, r2, #1
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	e000      	b.n	800655c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	40012c00 	.word	0x40012c00
 8006570:	40000400 	.word	0x40000400
 8006574:	40000800 	.word	0x40000800
 8006578:	40000c00 	.word	0x40000c00
 800657c:	40013400 	.word	0x40013400
 8006580:	40014000 	.word	0x40014000
 8006584:	40015000 	.word	0x40015000
 8006588:	00010007 	.word	0x00010007

0800658c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a46      	ldr	r2, [pc, #280]	; (80066b8 <TIM_Base_SetConfig+0x12c>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d017      	beq.n	80065d4 <TIM_Base_SetConfig+0x48>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065aa:	d013      	beq.n	80065d4 <TIM_Base_SetConfig+0x48>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a43      	ldr	r2, [pc, #268]	; (80066bc <TIM_Base_SetConfig+0x130>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00f      	beq.n	80065d4 <TIM_Base_SetConfig+0x48>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a42      	ldr	r2, [pc, #264]	; (80066c0 <TIM_Base_SetConfig+0x134>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00b      	beq.n	80065d4 <TIM_Base_SetConfig+0x48>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a41      	ldr	r2, [pc, #260]	; (80066c4 <TIM_Base_SetConfig+0x138>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d007      	beq.n	80065d4 <TIM_Base_SetConfig+0x48>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a40      	ldr	r2, [pc, #256]	; (80066c8 <TIM_Base_SetConfig+0x13c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d003      	beq.n	80065d4 <TIM_Base_SetConfig+0x48>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a3f      	ldr	r2, [pc, #252]	; (80066cc <TIM_Base_SetConfig+0x140>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d108      	bne.n	80065e6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a33      	ldr	r2, [pc, #204]	; (80066b8 <TIM_Base_SetConfig+0x12c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d023      	beq.n	8006636 <TIM_Base_SetConfig+0xaa>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f4:	d01f      	beq.n	8006636 <TIM_Base_SetConfig+0xaa>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a30      	ldr	r2, [pc, #192]	; (80066bc <TIM_Base_SetConfig+0x130>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d01b      	beq.n	8006636 <TIM_Base_SetConfig+0xaa>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a2f      	ldr	r2, [pc, #188]	; (80066c0 <TIM_Base_SetConfig+0x134>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d017      	beq.n	8006636 <TIM_Base_SetConfig+0xaa>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a2e      	ldr	r2, [pc, #184]	; (80066c4 <TIM_Base_SetConfig+0x138>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d013      	beq.n	8006636 <TIM_Base_SetConfig+0xaa>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a2d      	ldr	r2, [pc, #180]	; (80066c8 <TIM_Base_SetConfig+0x13c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d00f      	beq.n	8006636 <TIM_Base_SetConfig+0xaa>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a2d      	ldr	r2, [pc, #180]	; (80066d0 <TIM_Base_SetConfig+0x144>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00b      	beq.n	8006636 <TIM_Base_SetConfig+0xaa>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a2c      	ldr	r2, [pc, #176]	; (80066d4 <TIM_Base_SetConfig+0x148>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d007      	beq.n	8006636 <TIM_Base_SetConfig+0xaa>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a2b      	ldr	r2, [pc, #172]	; (80066d8 <TIM_Base_SetConfig+0x14c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d003      	beq.n	8006636 <TIM_Base_SetConfig+0xaa>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a26      	ldr	r2, [pc, #152]	; (80066cc <TIM_Base_SetConfig+0x140>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d108      	bne.n	8006648 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800663c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4313      	orrs	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a12      	ldr	r2, [pc, #72]	; (80066b8 <TIM_Base_SetConfig+0x12c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d013      	beq.n	800669c <TIM_Base_SetConfig+0x110>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a14      	ldr	r2, [pc, #80]	; (80066c8 <TIM_Base_SetConfig+0x13c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00f      	beq.n	800669c <TIM_Base_SetConfig+0x110>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a14      	ldr	r2, [pc, #80]	; (80066d0 <TIM_Base_SetConfig+0x144>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d00b      	beq.n	800669c <TIM_Base_SetConfig+0x110>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a13      	ldr	r2, [pc, #76]	; (80066d4 <TIM_Base_SetConfig+0x148>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d007      	beq.n	800669c <TIM_Base_SetConfig+0x110>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a12      	ldr	r2, [pc, #72]	; (80066d8 <TIM_Base_SetConfig+0x14c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d003      	beq.n	800669c <TIM_Base_SetConfig+0x110>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a0d      	ldr	r2, [pc, #52]	; (80066cc <TIM_Base_SetConfig+0x140>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d103      	bne.n	80066a4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	615a      	str	r2, [r3, #20]
}
 80066aa:	bf00      	nop
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	40012c00 	.word	0x40012c00
 80066bc:	40000400 	.word	0x40000400
 80066c0:	40000800 	.word	0x40000800
 80066c4:	40000c00 	.word	0x40000c00
 80066c8:	40013400 	.word	0x40013400
 80066cc:	40015000 	.word	0x40015000
 80066d0:	40014000 	.word	0x40014000
 80066d4:	40014400 	.word	0x40014400
 80066d8:	40014800 	.word	0x40014800

080066dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d101      	bne.n	80066f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066f0:	2302      	movs	r3, #2
 80066f2:	e074      	b.n	80067de <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a34      	ldr	r2, [pc, #208]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d009      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a33      	ldr	r2, [pc, #204]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d004      	beq.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a31      	ldr	r2, [pc, #196]	; (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d108      	bne.n	8006744 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006738:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800674a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a21      	ldr	r2, [pc, #132]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d022      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006774:	d01d      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1f      	ldr	r2, [pc, #124]	; (80067f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d018      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1d      	ldr	r2, [pc, #116]	; (80067fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d013      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a1c      	ldr	r2, [pc, #112]	; (8006800 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d00e      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a15      	ldr	r2, [pc, #84]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d009      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a18      	ldr	r2, [pc, #96]	; (8006804 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d004      	beq.n	80067b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a11      	ldr	r2, [pc, #68]	; (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d10c      	bne.n	80067cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	40012c00 	.word	0x40012c00
 80067f0:	40013400 	.word	0x40013400
 80067f4:	40015000 	.word	0x40015000
 80067f8:	40000400 	.word	0x40000400
 80067fc:	40000800 	.word	0x40000800
 8006800:	40000c00 	.word	0x40000c00
 8006804:	40014000 	.word	0x40014000

08006808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e042      	b.n	80068a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006820:	2b00      	cmp	r3, #0
 8006822:	d106      	bne.n	8006832 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7fb feb3 	bl	8002598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2224      	movs	r2, #36	; 0x24
 8006836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0201 	bic.w	r2, r2, #1
 8006848:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f8c2 	bl	80069d4 <UART_SetConfig>
 8006850:	4603      	mov	r3, r0
 8006852:	2b01      	cmp	r3, #1
 8006854:	d101      	bne.n	800685a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e022      	b.n	80068a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fbb2 	bl	8006fcc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006876:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689a      	ldr	r2, [r3, #8]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006886:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0201 	orr.w	r2, r2, #1
 8006896:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fc39 	bl	8007110 <UART_CheckIdleState>
 800689e:	4603      	mov	r3, r0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08a      	sub	sp, #40	; 0x28
 80068ac:	af02      	add	r7, sp, #8
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	603b      	str	r3, [r7, #0]
 80068b4:	4613      	mov	r3, r2
 80068b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068be:	2b20      	cmp	r3, #32
 80068c0:	f040 8083 	bne.w	80069ca <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <HAL_UART_Transmit+0x28>
 80068ca:	88fb      	ldrh	r3, [r7, #6]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e07b      	b.n	80069cc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d101      	bne.n	80068e2 <HAL_UART_Transmit+0x3a>
 80068de:	2302      	movs	r3, #2
 80068e0:	e074      	b.n	80069cc <HAL_UART_Transmit+0x124>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2221      	movs	r2, #33	; 0x21
 80068f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068fa:	f7fc f85b 	bl	80029b4 <HAL_GetTick>
 80068fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	88fa      	ldrh	r2, [r7, #6]
 8006904:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	88fa      	ldrh	r2, [r7, #6]
 800690c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006918:	d108      	bne.n	800692c <HAL_UART_Transmit+0x84>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d104      	bne.n	800692c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006922:	2300      	movs	r3, #0
 8006924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	61bb      	str	r3, [r7, #24]
 800692a:	e003      	b.n	8006934 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006930:	2300      	movs	r3, #0
 8006932:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800693c:	e02c      	b.n	8006998 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2200      	movs	r2, #0
 8006946:	2180      	movs	r1, #128	; 0x80
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 fc2c 	bl	80071a6 <UART_WaitOnFlagUntilTimeout>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e039      	b.n	80069cc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10b      	bne.n	8006976 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800696c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	3302      	adds	r3, #2
 8006972:	61bb      	str	r3, [r7, #24]
 8006974:	e007      	b.n	8006986 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	781a      	ldrb	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	3301      	adds	r3, #1
 8006984:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800698c:	b29b      	uxth	r3, r3
 800698e:	3b01      	subs	r3, #1
 8006990:	b29a      	uxth	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800699e:	b29b      	uxth	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1cc      	bne.n	800693e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	2200      	movs	r2, #0
 80069ac:	2140      	movs	r1, #64	; 0x40
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 fbf9 	bl	80071a6 <UART_WaitOnFlagUntilTimeout>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e006      	b.n	80069cc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	e000      	b.n	80069cc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80069ca:	2302      	movs	r3, #2
  }
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3720      	adds	r7, #32
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069d8:	b08c      	sub	sp, #48	; 0x30
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	431a      	orrs	r2, r3
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	431a      	orrs	r2, r3
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4baa      	ldr	r3, [pc, #680]	; (8006cac <UART_SetConfig+0x2d8>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	6812      	ldr	r2, [r2, #0]
 8006a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a0c:	430b      	orrs	r3, r1
 8006a0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	68da      	ldr	r2, [r3, #12]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a9f      	ldr	r2, [pc, #636]	; (8006cb0 <UART_SetConfig+0x2dc>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d004      	beq.n	8006a40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006a4a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	6812      	ldr	r2, [r2, #0]
 8006a52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a54:	430b      	orrs	r3, r1
 8006a56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	f023 010f 	bic.w	r1, r3, #15
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a90      	ldr	r2, [pc, #576]	; (8006cb4 <UART_SetConfig+0x2e0>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d125      	bne.n	8006ac4 <UART_SetConfig+0xf0>
 8006a78:	4b8f      	ldr	r3, [pc, #572]	; (8006cb8 <UART_SetConfig+0x2e4>)
 8006a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d81a      	bhi.n	8006abc <UART_SetConfig+0xe8>
 8006a86:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <UART_SetConfig+0xb8>)
 8006a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8c:	08006a9d 	.word	0x08006a9d
 8006a90:	08006aad 	.word	0x08006aad
 8006a94:	08006aa5 	.word	0x08006aa5
 8006a98:	08006ab5 	.word	0x08006ab5
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aa2:	e116      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aaa:	e112      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006aac:	2304      	movs	r3, #4
 8006aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ab2:	e10e      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006ab4:	2308      	movs	r3, #8
 8006ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aba:	e10a      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006abc:	2310      	movs	r3, #16
 8006abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ac2:	e106      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a7c      	ldr	r2, [pc, #496]	; (8006cbc <UART_SetConfig+0x2e8>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d138      	bne.n	8006b40 <UART_SetConfig+0x16c>
 8006ace:	4b7a      	ldr	r3, [pc, #488]	; (8006cb8 <UART_SetConfig+0x2e4>)
 8006ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad4:	f003 030c 	and.w	r3, r3, #12
 8006ad8:	2b0c      	cmp	r3, #12
 8006ada:	d82d      	bhi.n	8006b38 <UART_SetConfig+0x164>
 8006adc:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <UART_SetConfig+0x110>)
 8006ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae2:	bf00      	nop
 8006ae4:	08006b19 	.word	0x08006b19
 8006ae8:	08006b39 	.word	0x08006b39
 8006aec:	08006b39 	.word	0x08006b39
 8006af0:	08006b39 	.word	0x08006b39
 8006af4:	08006b29 	.word	0x08006b29
 8006af8:	08006b39 	.word	0x08006b39
 8006afc:	08006b39 	.word	0x08006b39
 8006b00:	08006b39 	.word	0x08006b39
 8006b04:	08006b21 	.word	0x08006b21
 8006b08:	08006b39 	.word	0x08006b39
 8006b0c:	08006b39 	.word	0x08006b39
 8006b10:	08006b39 	.word	0x08006b39
 8006b14:	08006b31 	.word	0x08006b31
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b1e:	e0d8      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b20:	2302      	movs	r3, #2
 8006b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b26:	e0d4      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b28:	2304      	movs	r3, #4
 8006b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b2e:	e0d0      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b30:	2308      	movs	r3, #8
 8006b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b36:	e0cc      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b38:	2310      	movs	r3, #16
 8006b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b3e:	e0c8      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a5e      	ldr	r2, [pc, #376]	; (8006cc0 <UART_SetConfig+0x2ec>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d125      	bne.n	8006b96 <UART_SetConfig+0x1c2>
 8006b4a:	4b5b      	ldr	r3, [pc, #364]	; (8006cb8 <UART_SetConfig+0x2e4>)
 8006b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b54:	2b30      	cmp	r3, #48	; 0x30
 8006b56:	d016      	beq.n	8006b86 <UART_SetConfig+0x1b2>
 8006b58:	2b30      	cmp	r3, #48	; 0x30
 8006b5a:	d818      	bhi.n	8006b8e <UART_SetConfig+0x1ba>
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d00a      	beq.n	8006b76 <UART_SetConfig+0x1a2>
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	d814      	bhi.n	8006b8e <UART_SetConfig+0x1ba>
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d002      	beq.n	8006b6e <UART_SetConfig+0x19a>
 8006b68:	2b10      	cmp	r3, #16
 8006b6a:	d008      	beq.n	8006b7e <UART_SetConfig+0x1aa>
 8006b6c:	e00f      	b.n	8006b8e <UART_SetConfig+0x1ba>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b74:	e0ad      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b76:	2302      	movs	r3, #2
 8006b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b7c:	e0a9      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b7e:	2304      	movs	r3, #4
 8006b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b84:	e0a5      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b86:	2308      	movs	r3, #8
 8006b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b8c:	e0a1      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b8e:	2310      	movs	r3, #16
 8006b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b94:	e09d      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a4a      	ldr	r2, [pc, #296]	; (8006cc4 <UART_SetConfig+0x2f0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d125      	bne.n	8006bec <UART_SetConfig+0x218>
 8006ba0:	4b45      	ldr	r3, [pc, #276]	; (8006cb8 <UART_SetConfig+0x2e4>)
 8006ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006baa:	2bc0      	cmp	r3, #192	; 0xc0
 8006bac:	d016      	beq.n	8006bdc <UART_SetConfig+0x208>
 8006bae:	2bc0      	cmp	r3, #192	; 0xc0
 8006bb0:	d818      	bhi.n	8006be4 <UART_SetConfig+0x210>
 8006bb2:	2b80      	cmp	r3, #128	; 0x80
 8006bb4:	d00a      	beq.n	8006bcc <UART_SetConfig+0x1f8>
 8006bb6:	2b80      	cmp	r3, #128	; 0x80
 8006bb8:	d814      	bhi.n	8006be4 <UART_SetConfig+0x210>
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d002      	beq.n	8006bc4 <UART_SetConfig+0x1f0>
 8006bbe:	2b40      	cmp	r3, #64	; 0x40
 8006bc0:	d008      	beq.n	8006bd4 <UART_SetConfig+0x200>
 8006bc2:	e00f      	b.n	8006be4 <UART_SetConfig+0x210>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bca:	e082      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bd2:	e07e      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bda:	e07a      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006bdc:	2308      	movs	r3, #8
 8006bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006be2:	e076      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006be4:	2310      	movs	r3, #16
 8006be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bea:	e072      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a35      	ldr	r2, [pc, #212]	; (8006cc8 <UART_SetConfig+0x2f4>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d12a      	bne.n	8006c4c <UART_SetConfig+0x278>
 8006bf6:	4b30      	ldr	r3, [pc, #192]	; (8006cb8 <UART_SetConfig+0x2e4>)
 8006bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c04:	d01a      	beq.n	8006c3c <UART_SetConfig+0x268>
 8006c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c0a:	d81b      	bhi.n	8006c44 <UART_SetConfig+0x270>
 8006c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c10:	d00c      	beq.n	8006c2c <UART_SetConfig+0x258>
 8006c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c16:	d815      	bhi.n	8006c44 <UART_SetConfig+0x270>
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <UART_SetConfig+0x250>
 8006c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c20:	d008      	beq.n	8006c34 <UART_SetConfig+0x260>
 8006c22:	e00f      	b.n	8006c44 <UART_SetConfig+0x270>
 8006c24:	2300      	movs	r3, #0
 8006c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c2a:	e052      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c32:	e04e      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006c34:	2304      	movs	r3, #4
 8006c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c3a:	e04a      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006c3c:	2308      	movs	r3, #8
 8006c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c42:	e046      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006c44:	2310      	movs	r3, #16
 8006c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c4a:	e042      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a17      	ldr	r2, [pc, #92]	; (8006cb0 <UART_SetConfig+0x2dc>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d13a      	bne.n	8006ccc <UART_SetConfig+0x2f8>
 8006c56:	4b18      	ldr	r3, [pc, #96]	; (8006cb8 <UART_SetConfig+0x2e4>)
 8006c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c64:	d01a      	beq.n	8006c9c <UART_SetConfig+0x2c8>
 8006c66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c6a:	d81b      	bhi.n	8006ca4 <UART_SetConfig+0x2d0>
 8006c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c70:	d00c      	beq.n	8006c8c <UART_SetConfig+0x2b8>
 8006c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c76:	d815      	bhi.n	8006ca4 <UART_SetConfig+0x2d0>
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <UART_SetConfig+0x2b0>
 8006c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c80:	d008      	beq.n	8006c94 <UART_SetConfig+0x2c0>
 8006c82:	e00f      	b.n	8006ca4 <UART_SetConfig+0x2d0>
 8006c84:	2300      	movs	r3, #0
 8006c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c8a:	e022      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c92:	e01e      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006c94:	2304      	movs	r3, #4
 8006c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c9a:	e01a      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006c9c:	2308      	movs	r3, #8
 8006c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ca2:	e016      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006ca4:	2310      	movs	r3, #16
 8006ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006caa:	e012      	b.n	8006cd2 <UART_SetConfig+0x2fe>
 8006cac:	cfff69f3 	.word	0xcfff69f3
 8006cb0:	40008000 	.word	0x40008000
 8006cb4:	40013800 	.word	0x40013800
 8006cb8:	40021000 	.word	0x40021000
 8006cbc:	40004400 	.word	0x40004400
 8006cc0:	40004800 	.word	0x40004800
 8006cc4:	40004c00 	.word	0x40004c00
 8006cc8:	40005000 	.word	0x40005000
 8006ccc:	2310      	movs	r3, #16
 8006cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4aae      	ldr	r2, [pc, #696]	; (8006f90 <UART_SetConfig+0x5bc>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	f040 8097 	bne.w	8006e0c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ce2:	2b08      	cmp	r3, #8
 8006ce4:	d823      	bhi.n	8006d2e <UART_SetConfig+0x35a>
 8006ce6:	a201      	add	r2, pc, #4	; (adr r2, 8006cec <UART_SetConfig+0x318>)
 8006ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cec:	08006d11 	.word	0x08006d11
 8006cf0:	08006d2f 	.word	0x08006d2f
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d2f 	.word	0x08006d2f
 8006cfc:	08006d1f 	.word	0x08006d1f
 8006d00:	08006d2f 	.word	0x08006d2f
 8006d04:	08006d2f 	.word	0x08006d2f
 8006d08:	08006d2f 	.word	0x08006d2f
 8006d0c:	08006d27 	.word	0x08006d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d10:	f7ff f8b4 	bl	8005e7c <HAL_RCC_GetPCLK1Freq>
 8006d14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d16:	e010      	b.n	8006d3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d18:	4b9e      	ldr	r3, [pc, #632]	; (8006f94 <UART_SetConfig+0x5c0>)
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d1c:	e00d      	b.n	8006d3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d1e:	f7ff f83f 	bl	8005da0 <HAL_RCC_GetSysClockFreq>
 8006d22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d24:	e009      	b.n	8006d3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d2c:	e005      	b.n	8006d3a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 8130 	beq.w	8006fa2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	4a94      	ldr	r2, [pc, #592]	; (8006f98 <UART_SetConfig+0x5c4>)
 8006d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d54:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	4413      	add	r3, r2
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d305      	bcc.n	8006d72 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d903      	bls.n	8006d7a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d78:	e113      	b.n	8006fa2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	60bb      	str	r3, [r7, #8]
 8006d80:	60fa      	str	r2, [r7, #12]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	4a84      	ldr	r2, [pc, #528]	; (8006f98 <UART_SetConfig+0x5c4>)
 8006d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2200      	movs	r2, #0
 8006d90:	603b      	str	r3, [r7, #0]
 8006d92:	607a      	str	r2, [r7, #4]
 8006d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d9c:	f7fa f88a 	bl	8000eb4 <__aeabi_uldivmod>
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	4610      	mov	r0, r2
 8006da6:	4619      	mov	r1, r3
 8006da8:	f04f 0200 	mov.w	r2, #0
 8006dac:	f04f 0300 	mov.w	r3, #0
 8006db0:	020b      	lsls	r3, r1, #8
 8006db2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006db6:	0202      	lsls	r2, r0, #8
 8006db8:	6979      	ldr	r1, [r7, #20]
 8006dba:	6849      	ldr	r1, [r1, #4]
 8006dbc:	0849      	lsrs	r1, r1, #1
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	460c      	mov	r4, r1
 8006dc2:	4605      	mov	r5, r0
 8006dc4:	eb12 0804 	adds.w	r8, r2, r4
 8006dc8:	eb43 0905 	adc.w	r9, r3, r5
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	469a      	mov	sl, r3
 8006dd4:	4693      	mov	fp, r2
 8006dd6:	4652      	mov	r2, sl
 8006dd8:	465b      	mov	r3, fp
 8006dda:	4640      	mov	r0, r8
 8006ddc:	4649      	mov	r1, r9
 8006dde:	f7fa f869 	bl	8000eb4 <__aeabi_uldivmod>
 8006de2:	4602      	mov	r2, r0
 8006de4:	460b      	mov	r3, r1
 8006de6:	4613      	mov	r3, r2
 8006de8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006df0:	d308      	bcc.n	8006e04 <UART_SetConfig+0x430>
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006df8:	d204      	bcs.n	8006e04 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6a3a      	ldr	r2, [r7, #32]
 8006e00:	60da      	str	r2, [r3, #12]
 8006e02:	e0ce      	b.n	8006fa2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e0a:	e0ca      	b.n	8006fa2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e14:	d166      	bne.n	8006ee4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006e16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e1a:	2b08      	cmp	r3, #8
 8006e1c:	d827      	bhi.n	8006e6e <UART_SetConfig+0x49a>
 8006e1e:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <UART_SetConfig+0x450>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e49 	.word	0x08006e49
 8006e28:	08006e51 	.word	0x08006e51
 8006e2c:	08006e59 	.word	0x08006e59
 8006e30:	08006e6f 	.word	0x08006e6f
 8006e34:	08006e5f 	.word	0x08006e5f
 8006e38:	08006e6f 	.word	0x08006e6f
 8006e3c:	08006e6f 	.word	0x08006e6f
 8006e40:	08006e6f 	.word	0x08006e6f
 8006e44:	08006e67 	.word	0x08006e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e48:	f7ff f818 	bl	8005e7c <HAL_RCC_GetPCLK1Freq>
 8006e4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e4e:	e014      	b.n	8006e7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e50:	f7ff f82a 	bl	8005ea8 <HAL_RCC_GetPCLK2Freq>
 8006e54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e56:	e010      	b.n	8006e7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e58:	4b4e      	ldr	r3, [pc, #312]	; (8006f94 <UART_SetConfig+0x5c0>)
 8006e5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e5c:	e00d      	b.n	8006e7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e5e:	f7fe ff9f 	bl	8005da0 <HAL_RCC_GetSysClockFreq>
 8006e62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e64:	e009      	b.n	8006e7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e6c:	e005      	b.n	8006e7a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 8090 	beq.w	8006fa2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	4a44      	ldr	r2, [pc, #272]	; (8006f98 <UART_SetConfig+0x5c4>)
 8006e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e94:	005a      	lsls	r2, r3, #1
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	085b      	lsrs	r3, r3, #1
 8006e9c:	441a      	add	r2, r3
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	2b0f      	cmp	r3, #15
 8006eac:	d916      	bls.n	8006edc <UART_SetConfig+0x508>
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb4:	d212      	bcs.n	8006edc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	f023 030f 	bic.w	r3, r3, #15
 8006ebe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	085b      	lsrs	r3, r3, #1
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	8bfb      	ldrh	r3, [r7, #30]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	8bfa      	ldrh	r2, [r7, #30]
 8006ed8:	60da      	str	r2, [r3, #12]
 8006eda:	e062      	b.n	8006fa2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ee2:	e05e      	b.n	8006fa2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ee4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d828      	bhi.n	8006f3e <UART_SetConfig+0x56a>
 8006eec:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <UART_SetConfig+0x520>)
 8006eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef2:	bf00      	nop
 8006ef4:	08006f19 	.word	0x08006f19
 8006ef8:	08006f21 	.word	0x08006f21
 8006efc:	08006f29 	.word	0x08006f29
 8006f00:	08006f3f 	.word	0x08006f3f
 8006f04:	08006f2f 	.word	0x08006f2f
 8006f08:	08006f3f 	.word	0x08006f3f
 8006f0c:	08006f3f 	.word	0x08006f3f
 8006f10:	08006f3f 	.word	0x08006f3f
 8006f14:	08006f37 	.word	0x08006f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f18:	f7fe ffb0 	bl	8005e7c <HAL_RCC_GetPCLK1Freq>
 8006f1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f1e:	e014      	b.n	8006f4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f20:	f7fe ffc2 	bl	8005ea8 <HAL_RCC_GetPCLK2Freq>
 8006f24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f26:	e010      	b.n	8006f4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f28:	4b1a      	ldr	r3, [pc, #104]	; (8006f94 <UART_SetConfig+0x5c0>)
 8006f2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f2c:	e00d      	b.n	8006f4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f2e:	f7fe ff37 	bl	8005da0 <HAL_RCC_GetSysClockFreq>
 8006f32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f34:	e009      	b.n	8006f4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f3c:	e005      	b.n	8006f4a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f48:	bf00      	nop
    }

    if (pclk != 0U)
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d028      	beq.n	8006fa2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	4a10      	ldr	r2, [pc, #64]	; (8006f98 <UART_SetConfig+0x5c4>)
 8006f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	085b      	lsrs	r3, r3, #1
 8006f68:	441a      	add	r2, r3
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	2b0f      	cmp	r3, #15
 8006f78:	d910      	bls.n	8006f9c <UART_SetConfig+0x5c8>
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f80:	d20c      	bcs.n	8006f9c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60da      	str	r2, [r3, #12]
 8006f8c:	e009      	b.n	8006fa2 <UART_SetConfig+0x5ce>
 8006f8e:	bf00      	nop
 8006f90:	40008000 	.word	0x40008000
 8006f94:	00f42400 	.word	0x00f42400
 8006f98:	0800c344 	.word	0x0800c344
      }
      else
      {
        ret = HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006fbe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3730      	adds	r7, #48	; 0x30
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006fcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00a      	beq.n	8006ff6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	f003 0302 	and.w	r3, r3, #2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00a      	beq.n	8007018 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00a      	beq.n	800703a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703e:	f003 0308 	and.w	r3, r3, #8
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00a      	beq.n	800705c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	430a      	orrs	r2, r1
 800705a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007060:	f003 0310 	and.w	r3, r3, #16
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d01a      	beq.n	80070e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ca:	d10a      	bne.n	80070e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	430a      	orrs	r2, r1
 8007102:	605a      	str	r2, [r3, #4]
  }
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af02      	add	r7, sp, #8
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007120:	f7fb fc48 	bl	80029b4 <HAL_GetTick>
 8007124:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0308 	and.w	r3, r3, #8
 8007130:	2b08      	cmp	r3, #8
 8007132:	d10e      	bne.n	8007152 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007134:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f82f 	bl	80071a6 <UART_WaitOnFlagUntilTimeout>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e025      	b.n	800719e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b04      	cmp	r3, #4
 800715e:	d10e      	bne.n	800717e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007160:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f819 	bl	80071a6 <UART_WaitOnFlagUntilTimeout>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e00f      	b.n	800719e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2220      	movs	r2, #32
 8007182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2220      	movs	r2, #32
 800718a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b09c      	sub	sp, #112	; 0x70
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	603b      	str	r3, [r7, #0]
 80071b2:	4613      	mov	r3, r2
 80071b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b6:	e0a9      	b.n	800730c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071be:	f000 80a5 	beq.w	800730c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c2:	f7fb fbf7 	bl	80029b4 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d302      	bcc.n	80071d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80071d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d140      	bne.n	800725a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071ec:	667b      	str	r3, [r7, #100]	; 0x64
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e6      	bne.n	80071d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3308      	adds	r3, #8
 8007210:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007214:	e853 3f00 	ldrex	r3, [r3]
 8007218:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800721a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721c:	f023 0301 	bic.w	r3, r3, #1
 8007220:	663b      	str	r3, [r7, #96]	; 0x60
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3308      	adds	r3, #8
 8007228:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800722a:	64ba      	str	r2, [r7, #72]	; 0x48
 800722c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007232:	e841 2300 	strex	r3, r2, [r1]
 8007236:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1e5      	bne.n	800720a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2220      	movs	r2, #32
 8007242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2220      	movs	r2, #32
 800724a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e069      	b.n	800732e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0304 	and.w	r3, r3, #4
 8007264:	2b00      	cmp	r3, #0
 8007266:	d051      	beq.n	800730c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007276:	d149      	bne.n	800730c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007280:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728a:	e853 3f00 	ldrex	r3, [r3]
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007296:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	461a      	mov	r2, r3
 800729e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a0:	637b      	str	r3, [r7, #52]	; 0x34
 80072a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072a8:	e841 2300 	strex	r3, r2, [r1]
 80072ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1e6      	bne.n	8007282 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3308      	adds	r3, #8
 80072ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	e853 3f00 	ldrex	r3, [r3]
 80072c2:	613b      	str	r3, [r7, #16]
   return(result);
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f023 0301 	bic.w	r3, r3, #1
 80072ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3308      	adds	r3, #8
 80072d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072d4:	623a      	str	r2, [r7, #32]
 80072d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d8:	69f9      	ldr	r1, [r7, #28]
 80072da:	6a3a      	ldr	r2, [r7, #32]
 80072dc:	e841 2300 	strex	r3, r2, [r1]
 80072e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e5      	bne.n	80072b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2220      	movs	r2, #32
 80072fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e010      	b.n	800732e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	69da      	ldr	r2, [r3, #28]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	4013      	ands	r3, r2
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	429a      	cmp	r2, r3
 800731a:	bf0c      	ite	eq
 800731c:	2301      	moveq	r3, #1
 800731e:	2300      	movne	r3, #0
 8007320:	b2db      	uxtb	r3, r3
 8007322:	461a      	mov	r2, r3
 8007324:	79fb      	ldrb	r3, [r7, #7]
 8007326:	429a      	cmp	r2, r3
 8007328:	f43f af46 	beq.w	80071b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3770      	adds	r7, #112	; 0x70
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007336:	b480      	push	{r7}
 8007338:	b085      	sub	sp, #20
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007344:	2b01      	cmp	r3, #1
 8007346:	d101      	bne.n	800734c <HAL_UARTEx_DisableFifoMode+0x16>
 8007348:	2302      	movs	r3, #2
 800734a:	e027      	b.n	800739c <HAL_UARTEx_DisableFifoMode+0x66>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2224      	movs	r2, #36	; 0x24
 8007358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 0201 	bic.w	r2, r2, #1
 8007372:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800737a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2220      	movs	r2, #32
 800738e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d101      	bne.n	80073c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073bc:	2302      	movs	r3, #2
 80073be:	e02d      	b.n	800741c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2224      	movs	r2, #36	; 0x24
 80073cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0201 	bic.w	r2, r2, #1
 80073e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	430a      	orrs	r2, r1
 80073fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f84f 	bl	80074a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2220      	movs	r2, #32
 800740e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007434:	2b01      	cmp	r3, #1
 8007436:	d101      	bne.n	800743c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007438:	2302      	movs	r3, #2
 800743a:	e02d      	b.n	8007498 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2224      	movs	r2, #36	; 0x24
 8007448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0201 	bic.w	r2, r2, #1
 8007462:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f811 	bl	80074a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2220      	movs	r2, #32
 800748a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d108      	bne.n	80074c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074c0:	e031      	b.n	8007526 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074c2:	2308      	movs	r3, #8
 80074c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074c6:	2308      	movs	r3, #8
 80074c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	0e5b      	lsrs	r3, r3, #25
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	f003 0307 	and.w	r3, r3, #7
 80074d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	0f5b      	lsrs	r3, r3, #29
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	f003 0307 	and.w	r3, r3, #7
 80074e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
 80074ec:	7b3a      	ldrb	r2, [r7, #12]
 80074ee:	4911      	ldr	r1, [pc, #68]	; (8007534 <UARTEx_SetNbDataToProcess+0x94>)
 80074f0:	5c8a      	ldrb	r2, [r1, r2]
 80074f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074f6:	7b3a      	ldrb	r2, [r7, #12]
 80074f8:	490f      	ldr	r1, [pc, #60]	; (8007538 <UARTEx_SetNbDataToProcess+0x98>)
 80074fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007500:	b29a      	uxth	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	7b7a      	ldrb	r2, [r7, #13]
 800750c:	4909      	ldr	r1, [pc, #36]	; (8007534 <UARTEx_SetNbDataToProcess+0x94>)
 800750e:	5c8a      	ldrb	r2, [r1, r2]
 8007510:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007514:	7b7a      	ldrb	r2, [r7, #13]
 8007516:	4908      	ldr	r1, [pc, #32]	; (8007538 <UARTEx_SetNbDataToProcess+0x98>)
 8007518:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800751a:	fb93 f3f2 	sdiv	r3, r3, r2
 800751e:	b29a      	uxth	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007526:	bf00      	nop
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	0800c35c 	.word	0x0800c35c
 8007538:	0800c364 	.word	0x0800c364

0800753c <arm_rfft_32_fast_init_f32>:
 800753c:	b178      	cbz	r0, 800755e <arm_rfft_32_fast_init_f32+0x22>
 800753e:	b430      	push	{r4, r5}
 8007540:	4908      	ldr	r1, [pc, #32]	; (8007564 <arm_rfft_32_fast_init_f32+0x28>)
 8007542:	4a09      	ldr	r2, [pc, #36]	; (8007568 <arm_rfft_32_fast_init_f32+0x2c>)
 8007544:	2310      	movs	r3, #16
 8007546:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800754a:	8003      	strh	r3, [r0, #0]
 800754c:	2520      	movs	r5, #32
 800754e:	2414      	movs	r4, #20
 8007550:	4b06      	ldr	r3, [pc, #24]	; (800756c <arm_rfft_32_fast_init_f32+0x30>)
 8007552:	8205      	strh	r5, [r0, #16]
 8007554:	8184      	strh	r4, [r0, #12]
 8007556:	6143      	str	r3, [r0, #20]
 8007558:	bc30      	pop	{r4, r5}
 800755a:	2000      	movs	r0, #0
 800755c:	4770      	bx	lr
 800755e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007562:	4770      	bx	lr
 8007564:	0800d31c 	.word	0x0800d31c
 8007568:	08011c54 	.word	0x08011c54
 800756c:	0801a9d4 	.word	0x0801a9d4

08007570 <arm_rfft_64_fast_init_f32>:
 8007570:	b178      	cbz	r0, 8007592 <arm_rfft_64_fast_init_f32+0x22>
 8007572:	b430      	push	{r4, r5}
 8007574:	4908      	ldr	r1, [pc, #32]	; (8007598 <arm_rfft_64_fast_init_f32+0x28>)
 8007576:	4a09      	ldr	r2, [pc, #36]	; (800759c <arm_rfft_64_fast_init_f32+0x2c>)
 8007578:	2320      	movs	r3, #32
 800757a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800757e:	8003      	strh	r3, [r0, #0]
 8007580:	2540      	movs	r5, #64	; 0x40
 8007582:	2430      	movs	r4, #48	; 0x30
 8007584:	4b06      	ldr	r3, [pc, #24]	; (80075a0 <arm_rfft_64_fast_init_f32+0x30>)
 8007586:	8205      	strh	r5, [r0, #16]
 8007588:	8184      	strh	r4, [r0, #12]
 800758a:	6143      	str	r3, [r0, #20]
 800758c:	bc30      	pop	{r4, r5}
 800758e:	2000      	movs	r0, #0
 8007590:	4770      	bx	lr
 8007592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007596:	4770      	bx	lr
 8007598:	0800f474 	.word	0x0800f474
 800759c:	080164d4 	.word	0x080164d4
 80075a0:	0801f254 	.word	0x0801f254

080075a4 <arm_rfft_256_fast_init_f32>:
 80075a4:	b180      	cbz	r0, 80075c8 <arm_rfft_256_fast_init_f32+0x24>
 80075a6:	b430      	push	{r4, r5}
 80075a8:	4909      	ldr	r1, [pc, #36]	; (80075d0 <arm_rfft_256_fast_init_f32+0x2c>)
 80075aa:	4a0a      	ldr	r2, [pc, #40]	; (80075d4 <arm_rfft_256_fast_init_f32+0x30>)
 80075ac:	2380      	movs	r3, #128	; 0x80
 80075ae:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80075b2:	8003      	strh	r3, [r0, #0]
 80075b4:	f44f 7580 	mov.w	r5, #256	; 0x100
 80075b8:	24d0      	movs	r4, #208	; 0xd0
 80075ba:	4b07      	ldr	r3, [pc, #28]	; (80075d8 <arm_rfft_256_fast_init_f32+0x34>)
 80075bc:	8205      	strh	r5, [r0, #16]
 80075be:	8184      	strh	r4, [r0, #12]
 80075c0:	6143      	str	r3, [r0, #20]
 80075c2:	bc30      	pop	{r4, r5}
 80075c4:	2000      	movs	r0, #0
 80075c6:	4770      	bx	lr
 80075c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	0800d17c 	.word	0x0800d17c
 80075d4:	08011854 	.word	0x08011854
 80075d8:	0801a5d4 	.word	0x0801a5d4

080075dc <arm_rfft_512_fast_init_f32>:
 80075dc:	b190      	cbz	r0, 8007604 <arm_rfft_512_fast_init_f32+0x28>
 80075de:	b430      	push	{r4, r5}
 80075e0:	490a      	ldr	r1, [pc, #40]	; (800760c <arm_rfft_512_fast_init_f32+0x30>)
 80075e2:	4a0b      	ldr	r2, [pc, #44]	; (8007610 <arm_rfft_512_fast_init_f32+0x34>)
 80075e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075e8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80075ec:	8003      	strh	r3, [r0, #0]
 80075ee:	f44f 7500 	mov.w	r5, #512	; 0x200
 80075f2:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80075f6:	4b07      	ldr	r3, [pc, #28]	; (8007614 <arm_rfft_512_fast_init_f32+0x38>)
 80075f8:	8205      	strh	r5, [r0, #16]
 80075fa:	8184      	strh	r4, [r0, #12]
 80075fc:	6143      	str	r3, [r0, #20]
 80075fe:	bc30      	pop	{r4, r5}
 8007600:	2000      	movs	r0, #0
 8007602:	4770      	bx	lr
 8007604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	0800f104 	.word	0x0800f104
 8007610:	08015cd4 	.word	0x08015cd4
 8007614:	0801ea54 	.word	0x0801ea54

08007618 <arm_rfft_1024_fast_init_f32>:
 8007618:	b190      	cbz	r0, 8007640 <arm_rfft_1024_fast_init_f32+0x28>
 800761a:	b430      	push	{r4, r5}
 800761c:	490a      	ldr	r1, [pc, #40]	; (8007648 <arm_rfft_1024_fast_init_f32+0x30>)
 800761e:	4a0b      	ldr	r2, [pc, #44]	; (800764c <arm_rfft_1024_fast_init_f32+0x34>)
 8007620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007624:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007628:	8003      	strh	r3, [r0, #0]
 800762a:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800762e:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8007632:	4b07      	ldr	r3, [pc, #28]	; (8007650 <arm_rfft_1024_fast_init_f32+0x38>)
 8007634:	8205      	strh	r5, [r0, #16]
 8007636:	8184      	strh	r4, [r0, #12]
 8007638:	6143      	str	r3, [r0, #20]
 800763a:	bc30      	pop	{r4, r5}
 800763c:	2000      	movs	r0, #0
 800763e:	4770      	bx	lr
 8007640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	0800f4d4 	.word	0x0800f4d4
 800764c:	080165d4 	.word	0x080165d4
 8007650:	080175d4 	.word	0x080175d4

08007654 <arm_rfft_2048_fast_init_f32>:
 8007654:	b190      	cbz	r0, 800767c <arm_rfft_2048_fast_init_f32+0x28>
 8007656:	b430      	push	{r4, r5}
 8007658:	490a      	ldr	r1, [pc, #40]	; (8007684 <arm_rfft_2048_fast_init_f32+0x30>)
 800765a:	4a0b      	ldr	r2, [pc, #44]	; (8007688 <arm_rfft_2048_fast_init_f32+0x34>)
 800765c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007660:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007664:	8003      	strh	r3, [r0, #0]
 8007666:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800766a:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800766e:	4b07      	ldr	r3, [pc, #28]	; (800768c <arm_rfft_2048_fast_init_f32+0x38>)
 8007670:	8205      	strh	r5, [r0, #16]
 8007672:	8184      	strh	r4, [r0, #12]
 8007674:	6143      	str	r3, [r0, #20]
 8007676:	bc30      	pop	{r4, r5}
 8007678:	2000      	movs	r0, #0
 800767a:	4770      	bx	lr
 800767c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	0800c36c 	.word	0x0800c36c
 8007688:	0800f854 	.word	0x0800f854
 800768c:	080185d4 	.word	0x080185d4

08007690 <arm_rfft_4096_fast_init_f32>:
 8007690:	b190      	cbz	r0, 80076b8 <arm_rfft_4096_fast_init_f32+0x28>
 8007692:	b430      	push	{r4, r5}
 8007694:	490a      	ldr	r1, [pc, #40]	; (80076c0 <arm_rfft_4096_fast_init_f32+0x30>)
 8007696:	4a0b      	ldr	r2, [pc, #44]	; (80076c4 <arm_rfft_4096_fast_init_f32+0x34>)
 8007698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800769c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80076a0:	8003      	strh	r3, [r0, #0]
 80076a2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80076a6:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80076aa:	4b07      	ldr	r3, [pc, #28]	; (80076c8 <arm_rfft_4096_fast_init_f32+0x38>)
 80076ac:	8205      	strh	r5, [r0, #16]
 80076ae:	8184      	strh	r4, [r0, #12]
 80076b0:	6143      	str	r3, [r0, #20]
 80076b2:	bc30      	pop	{r4, r5}
 80076b4:	2000      	movs	r0, #0
 80076b6:	4770      	bx	lr
 80076b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	0800d344 	.word	0x0800d344
 80076c4:	08011cd4 	.word	0x08011cd4
 80076c8:	0801aa54 	.word	0x0801aa54

080076cc <arm_rfft_fast_init_f32>:
 80076cc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80076d0:	d01f      	beq.n	8007712 <arm_rfft_fast_init_f32+0x46>
 80076d2:	d90b      	bls.n	80076ec <arm_rfft_fast_init_f32+0x20>
 80076d4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80076d8:	d019      	beq.n	800770e <arm_rfft_fast_init_f32+0x42>
 80076da:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80076de:	d012      	beq.n	8007706 <arm_rfft_fast_init_f32+0x3a>
 80076e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80076e4:	d00d      	beq.n	8007702 <arm_rfft_fast_init_f32+0x36>
 80076e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076ea:	4770      	bx	lr
 80076ec:	2940      	cmp	r1, #64	; 0x40
 80076ee:	d00c      	beq.n	800770a <arm_rfft_fast_init_f32+0x3e>
 80076f0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80076f4:	d003      	beq.n	80076fe <arm_rfft_fast_init_f32+0x32>
 80076f6:	2920      	cmp	r1, #32
 80076f8:	d1f5      	bne.n	80076e6 <arm_rfft_fast_init_f32+0x1a>
 80076fa:	4b07      	ldr	r3, [pc, #28]	; (8007718 <arm_rfft_fast_init_f32+0x4c>)
 80076fc:	4718      	bx	r3
 80076fe:	4b07      	ldr	r3, [pc, #28]	; (800771c <arm_rfft_fast_init_f32+0x50>)
 8007700:	4718      	bx	r3
 8007702:	4b07      	ldr	r3, [pc, #28]	; (8007720 <arm_rfft_fast_init_f32+0x54>)
 8007704:	4718      	bx	r3
 8007706:	4b07      	ldr	r3, [pc, #28]	; (8007724 <arm_rfft_fast_init_f32+0x58>)
 8007708:	4718      	bx	r3
 800770a:	4b07      	ldr	r3, [pc, #28]	; (8007728 <arm_rfft_fast_init_f32+0x5c>)
 800770c:	e7f6      	b.n	80076fc <arm_rfft_fast_init_f32+0x30>
 800770e:	4b07      	ldr	r3, [pc, #28]	; (800772c <arm_rfft_fast_init_f32+0x60>)
 8007710:	e7f4      	b.n	80076fc <arm_rfft_fast_init_f32+0x30>
 8007712:	4b07      	ldr	r3, [pc, #28]	; (8007730 <arm_rfft_fast_init_f32+0x64>)
 8007714:	e7f2      	b.n	80076fc <arm_rfft_fast_init_f32+0x30>
 8007716:	bf00      	nop
 8007718:	0800753d 	.word	0x0800753d
 800771c:	080075a5 	.word	0x080075a5
 8007720:	08007619 	.word	0x08007619
 8007724:	08007691 	.word	0x08007691
 8007728:	08007571 	.word	0x08007571
 800772c:	08007655 	.word	0x08007655
 8007730:	080075dd 	.word	0x080075dd

08007734 <stage_rfft_f32>:
 8007734:	b410      	push	{r4}
 8007736:	edd1 7a00 	vldr	s15, [r1]
 800773a:	ed91 7a01 	vldr	s14, [r1, #4]
 800773e:	8804      	ldrh	r4, [r0, #0]
 8007740:	6940      	ldr	r0, [r0, #20]
 8007742:	ee37 7a07 	vadd.f32	s14, s14, s14
 8007746:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800774a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800774e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007752:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007756:	3c01      	subs	r4, #1
 8007758:	ee26 7a84 	vmul.f32	s14, s13, s8
 800775c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007760:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8007764:	ed82 7a00 	vstr	s14, [r2]
 8007768:	edc2 7a01 	vstr	s15, [r2, #4]
 800776c:	3010      	adds	r0, #16
 800776e:	3210      	adds	r2, #16
 8007770:	3b08      	subs	r3, #8
 8007772:	3110      	adds	r1, #16
 8007774:	ed11 5a02 	vldr	s10, [r1, #-8]
 8007778:	ed93 7a02 	vldr	s14, [r3, #8]
 800777c:	ed50 6a02 	vldr	s13, [r0, #-8]
 8007780:	edd3 4a03 	vldr	s9, [r3, #12]
 8007784:	ed51 7a01 	vldr	s15, [r1, #-4]
 8007788:	ed10 6a01 	vldr	s12, [r0, #-4]
 800778c:	ee77 5a45 	vsub.f32	s11, s14, s10
 8007790:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007794:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8007798:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800779c:	ee66 5a25 	vmul.f32	s11, s12, s11
 80077a0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80077a4:	ee37 7a23 	vadd.f32	s14, s14, s7
 80077a8:	ee66 6a85 	vmul.f32	s13, s13, s10
 80077ac:	ee26 6a05 	vmul.f32	s12, s12, s10
 80077b0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80077b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80077b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80077bc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80077c0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80077c4:	3c01      	subs	r4, #1
 80077c6:	ed02 7a02 	vstr	s14, [r2, #-8]
 80077ca:	ed42 7a01 	vstr	s15, [r2, #-4]
 80077ce:	f1a3 0308 	sub.w	r3, r3, #8
 80077d2:	f101 0108 	add.w	r1, r1, #8
 80077d6:	f100 0008 	add.w	r0, r0, #8
 80077da:	f102 0208 	add.w	r2, r2, #8
 80077de:	d1c9      	bne.n	8007774 <stage_rfft_f32+0x40>
 80077e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop

080077e8 <merge_rfft_f32>:
 80077e8:	b410      	push	{r4}
 80077ea:	edd1 7a00 	vldr	s15, [r1]
 80077ee:	edd1 6a01 	vldr	s13, [r1, #4]
 80077f2:	8804      	ldrh	r4, [r0, #0]
 80077f4:	6940      	ldr	r0, [r0, #20]
 80077f6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80077fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80077fe:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8007802:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007806:	ee67 7a84 	vmul.f32	s15, s15, s8
 800780a:	3c01      	subs	r4, #1
 800780c:	ed82 7a00 	vstr	s14, [r2]
 8007810:	edc2 7a01 	vstr	s15, [r2, #4]
 8007814:	b3dc      	cbz	r4, 800788e <merge_rfft_f32+0xa6>
 8007816:	00e3      	lsls	r3, r4, #3
 8007818:	3b08      	subs	r3, #8
 800781a:	440b      	add	r3, r1
 800781c:	3010      	adds	r0, #16
 800781e:	3210      	adds	r2, #16
 8007820:	3110      	adds	r1, #16
 8007822:	ed11 5a02 	vldr	s10, [r1, #-8]
 8007826:	ed93 7a02 	vldr	s14, [r3, #8]
 800782a:	ed50 6a02 	vldr	s13, [r0, #-8]
 800782e:	edd3 4a03 	vldr	s9, [r3, #12]
 8007832:	ed51 7a01 	vldr	s15, [r1, #-4]
 8007836:	ed10 6a01 	vldr	s12, [r0, #-4]
 800783a:	ee75 5a47 	vsub.f32	s11, s10, s14
 800783e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007842:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8007846:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800784a:	ee66 5a25 	vmul.f32	s11, s12, s11
 800784e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007852:	ee37 7a63 	vsub.f32	s14, s14, s7
 8007856:	ee66 6a85 	vmul.f32	s13, s13, s10
 800785a:	ee26 6a05 	vmul.f32	s12, s12, s10
 800785e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007862:	ee37 7a46 	vsub.f32	s14, s14, s12
 8007866:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800786a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800786e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007872:	3c01      	subs	r4, #1
 8007874:	ed02 7a02 	vstr	s14, [r2, #-8]
 8007878:	ed42 7a01 	vstr	s15, [r2, #-4]
 800787c:	f1a3 0308 	sub.w	r3, r3, #8
 8007880:	f101 0108 	add.w	r1, r1, #8
 8007884:	f100 0008 	add.w	r0, r0, #8
 8007888:	f102 0208 	add.w	r2, r2, #8
 800788c:	d1c9      	bne.n	8007822 <merge_rfft_f32+0x3a>
 800788e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007892:	4770      	bx	lr

08007894 <arm_rfft_fast_f32>:
 8007894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007898:	8a05      	ldrh	r5, [r0, #16]
 800789a:	086d      	lsrs	r5, r5, #1
 800789c:	8005      	strh	r5, [r0, #0]
 800789e:	4604      	mov	r4, r0
 80078a0:	4616      	mov	r6, r2
 80078a2:	461d      	mov	r5, r3
 80078a4:	b14b      	cbz	r3, 80078ba <arm_rfft_fast_f32+0x26>
 80078a6:	f7ff ff9f 	bl	80077e8 <merge_rfft_f32>
 80078aa:	462a      	mov	r2, r5
 80078ac:	4631      	mov	r1, r6
 80078ae:	4620      	mov	r0, r4
 80078b0:	2301      	movs	r3, #1
 80078b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078b6:	f000 bb33 	b.w	8007f20 <arm_cfft_f32>
 80078ba:	460f      	mov	r7, r1
 80078bc:	461a      	mov	r2, r3
 80078be:	2301      	movs	r3, #1
 80078c0:	f000 fb2e 	bl	8007f20 <arm_cfft_f32>
 80078c4:	4632      	mov	r2, r6
 80078c6:	4639      	mov	r1, r7
 80078c8:	4620      	mov	r0, r4
 80078ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ce:	f7ff bf31 	b.w	8007734 <stage_rfft_f32>
 80078d2:	bf00      	nop

080078d4 <arm_cfft_radix8by2_f32>:
 80078d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d8:	ed2d 8b08 	vpush	{d8-d11}
 80078dc:	4607      	mov	r7, r0
 80078de:	4608      	mov	r0, r1
 80078e0:	f8b7 c000 	ldrh.w	ip, [r7]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80078ea:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80078ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80078f2:	f000 80b0 	beq.w	8007a56 <arm_cfft_radix8by2_f32+0x182>
 80078f6:	008c      	lsls	r4, r1, #2
 80078f8:	3410      	adds	r4, #16
 80078fa:	f100 0310 	add.w	r3, r0, #16
 80078fe:	1906      	adds	r6, r0, r4
 8007900:	3210      	adds	r2, #16
 8007902:	4444      	add	r4, r8
 8007904:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8007908:	f108 0510 	add.w	r5, r8, #16
 800790c:	ed15 2a04 	vldr	s4, [r5, #-16]
 8007910:	ed55 2a03 	vldr	s5, [r5, #-12]
 8007914:	ed54 4a04 	vldr	s9, [r4, #-16]
 8007918:	ed14 4a03 	vldr	s8, [r4, #-12]
 800791c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8007920:	ed54 5a01 	vldr	s11, [r4, #-4]
 8007924:	ed53 3a04 	vldr	s7, [r3, #-16]
 8007928:	ed15 0a02 	vldr	s0, [r5, #-8]
 800792c:	ed55 0a01 	vldr	s1, [r5, #-4]
 8007930:	ed56 6a04 	vldr	s13, [r6, #-16]
 8007934:	ed16 3a03 	vldr	s6, [r6, #-12]
 8007938:	ed13 7a03 	vldr	s14, [r3, #-12]
 800793c:	ed13 5a02 	vldr	s10, [r3, #-8]
 8007940:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007944:	ed16 1a02 	vldr	s2, [r6, #-8]
 8007948:	ed56 1a01 	vldr	s3, [r6, #-4]
 800794c:	ee73 ba82 	vadd.f32	s23, s7, s4
 8007950:	ee37 ba22 	vadd.f32	s22, s14, s5
 8007954:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8007958:	ee33 9a04 	vadd.f32	s18, s6, s8
 800795c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8007960:	ee75 aa00 	vadd.f32	s21, s10, s0
 8007964:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8007968:	ee71 8a06 	vadd.f32	s17, s2, s12
 800796c:	ed43 ba04 	vstr	s23, [r3, #-16]
 8007970:	ed03 ba03 	vstr	s22, [r3, #-12]
 8007974:	ed43 aa02 	vstr	s21, [r3, #-8]
 8007978:	ed03 aa01 	vstr	s20, [r3, #-4]
 800797c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8007980:	ed46 9a04 	vstr	s19, [r6, #-16]
 8007984:	ed06 9a03 	vstr	s18, [r6, #-12]
 8007988:	ed46 8a02 	vstr	s17, [r6, #-8]
 800798c:	ee37 7a62 	vsub.f32	s14, s14, s5
 8007990:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8007994:	ee34 4a43 	vsub.f32	s8, s8, s6
 8007998:	ed52 6a03 	vldr	s13, [r2, #-12]
 800799c:	ed12 3a04 	vldr	s6, [r2, #-16]
 80079a0:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80079a4:	ee27 8a26 	vmul.f32	s16, s14, s13
 80079a8:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80079ac:	ee23 2a83 	vmul.f32	s4, s7, s6
 80079b0:	ee64 4a83 	vmul.f32	s9, s9, s6
 80079b4:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80079b8:	ee27 7a03 	vmul.f32	s14, s14, s6
 80079bc:	ee64 6a26 	vmul.f32	s13, s8, s13
 80079c0:	ee24 4a03 	vmul.f32	s8, s8, s6
 80079c4:	ee37 7a63 	vsub.f32	s14, s14, s7
 80079c8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80079cc:	ee32 4ac4 	vsub.f32	s8, s5, s8
 80079d0:	ee32 3a08 	vadd.f32	s6, s4, s16
 80079d4:	ed05 7a03 	vstr	s14, [r5, #-12]
 80079d8:	ed05 3a04 	vstr	s6, [r5, #-16]
 80079dc:	ed04 4a04 	vstr	s8, [r4, #-16]
 80079e0:	ed44 6a03 	vstr	s13, [r4, #-12]
 80079e4:	ed12 7a01 	vldr	s14, [r2, #-4]
 80079e8:	ee76 6a41 	vsub.f32	s13, s12, s2
 80079ec:	ee35 5a40 	vsub.f32	s10, s10, s0
 80079f0:	ee35 6ae1 	vsub.f32	s12, s11, s3
 80079f4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80079f8:	ed52 5a02 	vldr	s11, [r2, #-8]
 80079fc:	ee67 3a87 	vmul.f32	s7, s15, s14
 8007a00:	ee66 4a87 	vmul.f32	s9, s13, s14
 8007a04:	ee25 4a25 	vmul.f32	s8, s10, s11
 8007a08:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007a0c:	ee25 5a07 	vmul.f32	s10, s10, s14
 8007a10:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8007a14:	ee26 7a07 	vmul.f32	s14, s12, s14
 8007a18:	ee26 6a25 	vmul.f32	s12, s12, s11
 8007a1c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8007a20:	ee74 5a23 	vadd.f32	s11, s8, s7
 8007a24:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8007a28:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007a2c:	3310      	adds	r3, #16
 8007a2e:	4563      	cmp	r3, ip
 8007a30:	ed45 5a02 	vstr	s11, [r5, #-8]
 8007a34:	f106 0610 	add.w	r6, r6, #16
 8007a38:	ed45 7a01 	vstr	s15, [r5, #-4]
 8007a3c:	f102 0210 	add.w	r2, r2, #16
 8007a40:	ed04 6a02 	vstr	s12, [r4, #-8]
 8007a44:	ed04 7a01 	vstr	s14, [r4, #-4]
 8007a48:	f105 0510 	add.w	r5, r5, #16
 8007a4c:	f104 0410 	add.w	r4, r4, #16
 8007a50:	f47f af5c 	bne.w	800790c <arm_cfft_radix8by2_f32+0x38>
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	b28c      	uxth	r4, r1
 8007a58:	4621      	mov	r1, r4
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	f000 faf8 	bl	8008050 <arm_radix8_butterfly_f32>
 8007a60:	ecbd 8b08 	vpop	{d8-d11}
 8007a64:	4621      	mov	r1, r4
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	4640      	mov	r0, r8
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a70:	f000 baee 	b.w	8008050 <arm_radix8_butterfly_f32>

08007a74 <arm_cfft_radix8by4_f32>:
 8007a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a78:	ed2d 8b0a 	vpush	{d8-d12}
 8007a7c:	b08d      	sub	sp, #52	; 0x34
 8007a7e:	460d      	mov	r5, r1
 8007a80:	910b      	str	r1, [sp, #44]	; 0x2c
 8007a82:	8801      	ldrh	r1, [r0, #0]
 8007a84:	6842      	ldr	r2, [r0, #4]
 8007a86:	900a      	str	r0, [sp, #40]	; 0x28
 8007a88:	0849      	lsrs	r1, r1, #1
 8007a8a:	008b      	lsls	r3, r1, #2
 8007a8c:	18ee      	adds	r6, r5, r3
 8007a8e:	18f0      	adds	r0, r6, r3
 8007a90:	edd0 5a00 	vldr	s11, [r0]
 8007a94:	edd5 7a00 	vldr	s15, [r5]
 8007a98:	ed96 7a00 	vldr	s14, [r6]
 8007a9c:	edd0 3a01 	vldr	s7, [r0, #4]
 8007aa0:	ed96 4a01 	vldr	s8, [r6, #4]
 8007aa4:	ed95 5a01 	vldr	s10, [r5, #4]
 8007aa8:	9008      	str	r0, [sp, #32]
 8007aaa:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8007aae:	18c7      	adds	r7, r0, r3
 8007ab0:	edd7 4a00 	vldr	s9, [r7]
 8007ab4:	ed97 3a01 	vldr	s6, [r7, #4]
 8007ab8:	9701      	str	r7, [sp, #4]
 8007aba:	ee77 6a06 	vadd.f32	s13, s14, s12
 8007abe:	462c      	mov	r4, r5
 8007ac0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007ac4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007ac8:	ee16 ca90 	vmov	ip, s13
 8007acc:	f844 cb08 	str.w	ip, [r4], #8
 8007ad0:	ee75 6a23 	vadd.f32	s13, s10, s7
 8007ad4:	edd6 5a01 	vldr	s11, [r6, #4]
 8007ad8:	edd7 2a01 	vldr	s5, [r7, #4]
 8007adc:	9404      	str	r4, [sp, #16]
 8007ade:	ee35 5a63 	vsub.f32	s10, s10, s7
 8007ae2:	ee74 3a27 	vadd.f32	s7, s8, s15
 8007ae6:	ee36 6a47 	vsub.f32	s12, s12, s14
 8007aea:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8007aee:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8007af2:	0849      	lsrs	r1, r1, #1
 8007af4:	f102 0e08 	add.w	lr, r2, #8
 8007af8:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8007afc:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8007b00:	9109      	str	r1, [sp, #36]	; 0x24
 8007b02:	ee35 4a47 	vsub.f32	s8, s10, s14
 8007b06:	f1a1 0902 	sub.w	r9, r1, #2
 8007b0a:	f8cd e00c 	str.w	lr, [sp, #12]
 8007b0e:	4631      	mov	r1, r6
 8007b10:	ee13 ea90 	vmov	lr, s7
 8007b14:	ee36 6a64 	vsub.f32	s12, s12, s9
 8007b18:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	edc5 5a01 	vstr	s11, [r5, #4]
 8007b22:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007b26:	f841 eb08 	str.w	lr, [r1], #8
 8007b2a:	ee34 5a24 	vadd.f32	s10, s8, s9
 8007b2e:	ee16 ea10 	vmov	lr, s12
 8007b32:	ed86 5a01 	vstr	s10, [r6, #4]
 8007b36:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007b3a:	f844 eb08 	str.w	lr, [r4], #8
 8007b3e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8007b42:	edc0 6a01 	vstr	s13, [r0, #4]
 8007b46:	9405      	str	r4, [sp, #20]
 8007b48:	4604      	mov	r4, r0
 8007b4a:	ee17 0a90 	vmov	r0, s15
 8007b4e:	9106      	str	r1, [sp, #24]
 8007b50:	ee37 7a64 	vsub.f32	s14, s14, s9
 8007b54:	f102 0110 	add.w	r1, r2, #16
 8007b58:	46bc      	mov	ip, r7
 8007b5a:	9100      	str	r1, [sp, #0]
 8007b5c:	f847 0b08 	str.w	r0, [r7], #8
 8007b60:	f102 0118 	add.w	r1, r2, #24
 8007b64:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8007b68:	9102      	str	r1, [sp, #8]
 8007b6a:	ed8c 7a01 	vstr	s14, [ip, #4]
 8007b6e:	9007      	str	r0, [sp, #28]
 8007b70:	f000 8134 	beq.w	8007ddc <arm_cfft_radix8by4_f32+0x368>
 8007b74:	f102 0920 	add.w	r9, r2, #32
 8007b78:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8007b7c:	9a01      	ldr	r2, [sp, #4]
 8007b7e:	f8dd a000 	ldr.w	sl, [sp]
 8007b82:	3b0c      	subs	r3, #12
 8007b84:	4683      	mov	fp, r0
 8007b86:	4463      	add	r3, ip
 8007b88:	f105 0e10 	add.w	lr, r5, #16
 8007b8c:	f1a4 010c 	sub.w	r1, r4, #12
 8007b90:	f104 0510 	add.w	r5, r4, #16
 8007b94:	f1a6 0c0c 	sub.w	ip, r6, #12
 8007b98:	f1a2 040c 	sub.w	r4, r2, #12
 8007b9c:	f106 0010 	add.w	r0, r6, #16
 8007ba0:	3210      	adds	r2, #16
 8007ba2:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8007ba6:	ed55 5a02 	vldr	s11, [r5, #-8]
 8007baa:	ed50 7a02 	vldr	s15, [r0, #-8]
 8007bae:	ed52 1a02 	vldr	s3, [r2, #-8]
 8007bb2:	ed55 6a01 	vldr	s13, [r5, #-4]
 8007bb6:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8007bba:	ed12 1a01 	vldr	s2, [r2, #-4]
 8007bbe:	ed10 8a01 	vldr	s16, [r0, #-4]
 8007bc2:	ee35 4a25 	vadd.f32	s8, s10, s11
 8007bc6:	ee30 6a26 	vadd.f32	s12, s0, s13
 8007bca:	ee37 7a84 	vadd.f32	s14, s15, s8
 8007bce:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007bd2:	ee37 7a21 	vadd.f32	s14, s14, s3
 8007bd6:	ee75 5a65 	vsub.f32	s11, s10, s11
 8007bda:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8007bde:	ed10 7a01 	vldr	s14, [r0, #-4]
 8007be2:	ed52 6a01 	vldr	s13, [r2, #-4]
 8007be6:	ee36 7a07 	vadd.f32	s14, s12, s14
 8007bea:	ee78 aa25 	vadd.f32	s21, s16, s11
 8007bee:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007bf2:	ee70 3a67 	vsub.f32	s7, s0, s15
 8007bf6:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8007bfa:	ed94 7a02 	vldr	s14, [r4, #8]
 8007bfe:	ed9c 2a02 	vldr	s4, [ip, #8]
 8007c02:	ed91 ba02 	vldr	s22, [r1, #8]
 8007c06:	edd3 9a02 	vldr	s19, [r3, #8]
 8007c0a:	edd4 2a01 	vldr	s5, [r4, #4]
 8007c0e:	ed9c 9a01 	vldr	s18, [ip, #4]
 8007c12:	ed93 5a01 	vldr	s10, [r3, #4]
 8007c16:	edd1 0a01 	vldr	s1, [r1, #4]
 8007c1a:	ee72 6a07 	vadd.f32	s13, s4, s14
 8007c1e:	ee32 2a47 	vsub.f32	s4, s4, s14
 8007c22:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8007c26:	ee79 4a22 	vadd.f32	s9, s18, s5
 8007c2a:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8007c2e:	ee79 2a62 	vsub.f32	s5, s18, s5
 8007c32:	ed8c 7a02 	vstr	s14, [ip, #8]
 8007c36:	ed91 7a01 	vldr	s14, [r1, #4]
 8007c3a:	edd3 8a01 	vldr	s17, [r3, #4]
 8007c3e:	ee34 7a87 	vadd.f32	s14, s9, s14
 8007c42:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8007c46:	ee37 7a28 	vadd.f32	s14, s14, s17
 8007c4a:	ee32 9a60 	vsub.f32	s18, s4, s1
 8007c4e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8007c52:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8007c56:	ed1a aa02 	vldr	s20, [sl, #-8]
 8007c5a:	ee73 8a22 	vadd.f32	s17, s6, s5
 8007c5e:	ee39 9a05 	vadd.f32	s18, s18, s10
 8007c62:	ee7a aac1 	vsub.f32	s21, s21, s2
 8007c66:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8007c6a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8007c6e:	ee69 ba07 	vmul.f32	s23, s18, s14
 8007c72:	ee6a aa87 	vmul.f32	s21, s21, s14
 8007c76:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8007c7a:	ee63 ca87 	vmul.f32	s25, s7, s14
 8007c7e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8007c82:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8007c86:	ee68 8a87 	vmul.f32	s17, s17, s14
 8007c8a:	ee73 3aea 	vsub.f32	s7, s7, s21
 8007c8e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8007c92:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8007c96:	ee3b aaca 	vsub.f32	s20, s23, s20
 8007c9a:	ee34 4a67 	vsub.f32	s8, s8, s15
 8007c9e:	ee76 6acb 	vsub.f32	s13, s13, s22
 8007ca2:	ee36 6a48 	vsub.f32	s12, s12, s16
 8007ca6:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8007caa:	ed00 7a02 	vstr	s14, [r0, #-8]
 8007cae:	ed40 3a01 	vstr	s7, [r0, #-4]
 8007cb2:	edc1 8a01 	vstr	s17, [r1, #4]
 8007cb6:	ed81 aa02 	vstr	s20, [r1, #8]
 8007cba:	ed59 3a04 	vldr	s7, [r9, #-16]
 8007cbe:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8007cc2:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8007cc6:	ed59 6a03 	vldr	s13, [r9, #-12]
 8007cca:	ee34 4a61 	vsub.f32	s8, s8, s3
 8007cce:	ee36 6a41 	vsub.f32	s12, s12, s2
 8007cd2:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8007cd6:	ee66 9a26 	vmul.f32	s19, s12, s13
 8007cda:	ee24 9a23 	vmul.f32	s18, s8, s7
 8007cde:	ee26 6a23 	vmul.f32	s12, s12, s7
 8007ce2:	ee24 4a26 	vmul.f32	s8, s8, s13
 8007ce6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007cea:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8007cee:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8007cf2:	ee36 6a44 	vsub.f32	s12, s12, s8
 8007cf6:	ee37 7a64 	vsub.f32	s14, s14, s9
 8007cfa:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8007cfe:	ee79 3a29 	vadd.f32	s7, s18, s19
 8007d02:	ee75 6a60 	vsub.f32	s13, s10, s1
 8007d06:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8007d0a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007d0e:	ed45 3a02 	vstr	s7, [r5, #-8]
 8007d12:	ed05 6a01 	vstr	s12, [r5, #-4]
 8007d16:	ed84 7a01 	vstr	s14, [r4, #4]
 8007d1a:	ed84 4a02 	vstr	s8, [r4, #8]
 8007d1e:	ee35 6a81 	vadd.f32	s12, s11, s2
 8007d22:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8007d26:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8007d2a:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8007d2e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8007d32:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8007d36:	ee67 2a26 	vmul.f32	s5, s14, s13
 8007d3a:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8007d3e:	ee26 5a25 	vmul.f32	s10, s12, s11
 8007d42:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007d46:	ee26 6a26 	vmul.f32	s12, s12, s13
 8007d4a:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007d4e:	ee63 6a26 	vmul.f32	s13, s6, s13
 8007d52:	ee23 3a25 	vmul.f32	s6, s6, s11
 8007d56:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007d5a:	ee75 5a24 	vadd.f32	s11, s10, s9
 8007d5e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8007d62:	ee36 7a87 	vadd.f32	s14, s13, s14
 8007d66:	f1bb 0b01 	subs.w	fp, fp, #1
 8007d6a:	ed42 5a02 	vstr	s11, [r2, #-8]
 8007d6e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007d72:	f10e 0e08 	add.w	lr, lr, #8
 8007d76:	ed83 3a02 	vstr	s6, [r3, #8]
 8007d7a:	ed83 7a01 	vstr	s14, [r3, #4]
 8007d7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8007d82:	f10a 0a08 	add.w	sl, sl, #8
 8007d86:	f100 0008 	add.w	r0, r0, #8
 8007d8a:	f1a1 0108 	sub.w	r1, r1, #8
 8007d8e:	f109 0910 	add.w	r9, r9, #16
 8007d92:	f105 0508 	add.w	r5, r5, #8
 8007d96:	f1a4 0408 	sub.w	r4, r4, #8
 8007d9a:	f108 0818 	add.w	r8, r8, #24
 8007d9e:	f102 0208 	add.w	r2, r2, #8
 8007da2:	f1a3 0308 	sub.w	r3, r3, #8
 8007da6:	f47f aefc 	bne.w	8007ba2 <arm_cfft_radix8by4_f32+0x12e>
 8007daa:	9907      	ldr	r1, [sp, #28]
 8007dac:	9800      	ldr	r0, [sp, #0]
 8007dae:	00cb      	lsls	r3, r1, #3
 8007db0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007db4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007db8:	9100      	str	r1, [sp, #0]
 8007dba:	9904      	ldr	r1, [sp, #16]
 8007dbc:	4419      	add	r1, r3
 8007dbe:	9104      	str	r1, [sp, #16]
 8007dc0:	9903      	ldr	r1, [sp, #12]
 8007dc2:	4419      	add	r1, r3
 8007dc4:	9103      	str	r1, [sp, #12]
 8007dc6:	9906      	ldr	r1, [sp, #24]
 8007dc8:	4419      	add	r1, r3
 8007dca:	9106      	str	r1, [sp, #24]
 8007dcc:	9905      	ldr	r1, [sp, #20]
 8007dce:	441f      	add	r7, r3
 8007dd0:	4419      	add	r1, r3
 8007dd2:	9b02      	ldr	r3, [sp, #8]
 8007dd4:	9105      	str	r1, [sp, #20]
 8007dd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dda:	9302      	str	r3, [sp, #8]
 8007ddc:	9904      	ldr	r1, [sp, #16]
 8007dde:	9805      	ldr	r0, [sp, #20]
 8007de0:	ed91 4a00 	vldr	s8, [r1]
 8007de4:	edd0 6a00 	vldr	s13, [r0]
 8007de8:	9b06      	ldr	r3, [sp, #24]
 8007dea:	ed97 3a00 	vldr	s6, [r7]
 8007dee:	edd3 7a00 	vldr	s15, [r3]
 8007df2:	edd0 4a01 	vldr	s9, [r0, #4]
 8007df6:	edd1 3a01 	vldr	s7, [r1, #4]
 8007dfa:	ed97 2a01 	vldr	s4, [r7, #4]
 8007dfe:	ed93 7a01 	vldr	s14, [r3, #4]
 8007e02:	9a03      	ldr	r2, [sp, #12]
 8007e04:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8007e08:	ee34 6a26 	vadd.f32	s12, s8, s13
 8007e0c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8007e10:	ee37 5a86 	vadd.f32	s10, s15, s12
 8007e14:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8007e18:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007e1c:	ee74 6a66 	vsub.f32	s13, s8, s13
 8007e20:	ed81 5a00 	vstr	s10, [r1]
 8007e24:	ed93 5a01 	vldr	s10, [r3, #4]
 8007e28:	edd7 4a01 	vldr	s9, [r7, #4]
 8007e2c:	ee35 5a85 	vadd.f32	s10, s11, s10
 8007e30:	ee37 4a26 	vadd.f32	s8, s14, s13
 8007e34:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007e38:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8007e3c:	ed81 5a01 	vstr	s10, [r1, #4]
 8007e40:	edd2 1a00 	vldr	s3, [r2]
 8007e44:	edd2 2a01 	vldr	s5, [r2, #4]
 8007e48:	ee34 5a83 	vadd.f32	s10, s9, s6
 8007e4c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007e50:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007e54:	ee64 4a21 	vmul.f32	s9, s8, s3
 8007e58:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007e5c:	ee65 2a22 	vmul.f32	s5, s10, s5
 8007e60:	ee25 5a21 	vmul.f32	s10, s10, s3
 8007e64:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8007e68:	ee35 5a44 	vsub.f32	s10, s10, s8
 8007e6c:	edc3 2a00 	vstr	s5, [r3]
 8007e70:	ed83 5a01 	vstr	s10, [r3, #4]
 8007e74:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8007e78:	9b00      	ldr	r3, [sp, #0]
 8007e7a:	ee36 6a43 	vsub.f32	s12, s12, s6
 8007e7e:	ed93 4a01 	vldr	s8, [r3, #4]
 8007e82:	ed93 5a00 	vldr	s10, [r3]
 8007e86:	9b02      	ldr	r3, [sp, #8]
 8007e88:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8007e8c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8007e90:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007e94:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007e98:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007e9c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007ea0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8007ea4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8007ea8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007eac:	ed80 6a01 	vstr	s12, [r0, #4]
 8007eb0:	edc0 5a00 	vstr	s11, [r0]
 8007eb4:	edd3 5a01 	vldr	s11, [r3, #4]
 8007eb8:	edd3 6a00 	vldr	s13, [r3]
 8007ebc:	ee37 7a02 	vadd.f32	s14, s14, s4
 8007ec0:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8007ec4:	ee27 6a26 	vmul.f32	s12, s14, s13
 8007ec8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007ecc:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007ed0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007ed4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007ed8:	ee76 7a27 	vadd.f32	s15, s12, s15
 8007edc:	ed87 7a01 	vstr	s14, [r7, #4]
 8007ee0:	edc7 7a00 	vstr	s15, [r7]
 8007ee4:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8007ee8:	4621      	mov	r1, r4
 8007eea:	686a      	ldr	r2, [r5, #4]
 8007eec:	2304      	movs	r3, #4
 8007eee:	f000 f8af 	bl	8008050 <arm_radix8_butterfly_f32>
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	686a      	ldr	r2, [r5, #4]
 8007ef8:	2304      	movs	r3, #4
 8007efa:	f000 f8a9 	bl	8008050 <arm_radix8_butterfly_f32>
 8007efe:	9808      	ldr	r0, [sp, #32]
 8007f00:	686a      	ldr	r2, [r5, #4]
 8007f02:	4621      	mov	r1, r4
 8007f04:	2304      	movs	r3, #4
 8007f06:	f000 f8a3 	bl	8008050 <arm_radix8_butterfly_f32>
 8007f0a:	686a      	ldr	r2, [r5, #4]
 8007f0c:	9801      	ldr	r0, [sp, #4]
 8007f0e:	4621      	mov	r1, r4
 8007f10:	2304      	movs	r3, #4
 8007f12:	b00d      	add	sp, #52	; 0x34
 8007f14:	ecbd 8b0a 	vpop	{d8-d12}
 8007f18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1c:	f000 b898 	b.w	8008050 <arm_radix8_butterfly_f32>

08007f20 <arm_cfft_f32>:
 8007f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f24:	2a01      	cmp	r2, #1
 8007f26:	4606      	mov	r6, r0
 8007f28:	4617      	mov	r7, r2
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	4698      	mov	r8, r3
 8007f2e:	8805      	ldrh	r5, [r0, #0]
 8007f30:	d056      	beq.n	8007fe0 <arm_cfft_f32+0xc0>
 8007f32:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007f36:	d063      	beq.n	8008000 <arm_cfft_f32+0xe0>
 8007f38:	d916      	bls.n	8007f68 <arm_cfft_f32+0x48>
 8007f3a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8007f3e:	d01a      	beq.n	8007f76 <arm_cfft_f32+0x56>
 8007f40:	d947      	bls.n	8007fd2 <arm_cfft_f32+0xb2>
 8007f42:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8007f46:	d05b      	beq.n	8008000 <arm_cfft_f32+0xe0>
 8007f48:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8007f4c:	d105      	bne.n	8007f5a <arm_cfft_f32+0x3a>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	6872      	ldr	r2, [r6, #4]
 8007f52:	4629      	mov	r1, r5
 8007f54:	4620      	mov	r0, r4
 8007f56:	f000 f87b 	bl	8008050 <arm_radix8_butterfly_f32>
 8007f5a:	f1b8 0f00 	cmp.w	r8, #0
 8007f5e:	d111      	bne.n	8007f84 <arm_cfft_f32+0x64>
 8007f60:	2f01      	cmp	r7, #1
 8007f62:	d016      	beq.n	8007f92 <arm_cfft_f32+0x72>
 8007f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f68:	2d20      	cmp	r5, #32
 8007f6a:	d049      	beq.n	8008000 <arm_cfft_f32+0xe0>
 8007f6c:	d935      	bls.n	8007fda <arm_cfft_f32+0xba>
 8007f6e:	2d40      	cmp	r5, #64	; 0x40
 8007f70:	d0ed      	beq.n	8007f4e <arm_cfft_f32+0x2e>
 8007f72:	2d80      	cmp	r5, #128	; 0x80
 8007f74:	d1f1      	bne.n	8007f5a <arm_cfft_f32+0x3a>
 8007f76:	4621      	mov	r1, r4
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f7ff fcab 	bl	80078d4 <arm_cfft_radix8by2_f32>
 8007f7e:	f1b8 0f00 	cmp.w	r8, #0
 8007f82:	d0ed      	beq.n	8007f60 <arm_cfft_f32+0x40>
 8007f84:	68b2      	ldr	r2, [r6, #8]
 8007f86:	89b1      	ldrh	r1, [r6, #12]
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f000 f841 	bl	8008010 <arm_bitreversal_32>
 8007f8e:	2f01      	cmp	r7, #1
 8007f90:	d1e8      	bne.n	8007f64 <arm_cfft_f32+0x44>
 8007f92:	ee07 5a90 	vmov	s15, r5
 8007f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007fa2:	2d00      	cmp	r5, #0
 8007fa4:	d0de      	beq.n	8007f64 <arm_cfft_f32+0x44>
 8007fa6:	f104 0108 	add.w	r1, r4, #8
 8007faa:	2300      	movs	r3, #0
 8007fac:	3301      	adds	r3, #1
 8007fae:	429d      	cmp	r5, r3
 8007fb0:	f101 0108 	add.w	r1, r1, #8
 8007fb4:	ed11 7a04 	vldr	s14, [r1, #-16]
 8007fb8:	ed51 7a03 	vldr	s15, [r1, #-12]
 8007fbc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007fc0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007fc4:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007fc8:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007fcc:	d1ee      	bne.n	8007fac <arm_cfft_f32+0x8c>
 8007fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8007fd6:	d0ba      	beq.n	8007f4e <arm_cfft_f32+0x2e>
 8007fd8:	e7bf      	b.n	8007f5a <arm_cfft_f32+0x3a>
 8007fda:	2d10      	cmp	r5, #16
 8007fdc:	d0cb      	beq.n	8007f76 <arm_cfft_f32+0x56>
 8007fde:	e7bc      	b.n	8007f5a <arm_cfft_f32+0x3a>
 8007fe0:	b19d      	cbz	r5, 800800a <arm_cfft_f32+0xea>
 8007fe2:	f101 030c 	add.w	r3, r1, #12
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	ed53 7a02 	vldr	s15, [r3, #-8]
 8007fec:	3201      	adds	r2, #1
 8007fee:	eef1 7a67 	vneg.f32	s15, s15
 8007ff2:	4295      	cmp	r5, r2
 8007ff4:	ed43 7a02 	vstr	s15, [r3, #-8]
 8007ff8:	f103 0308 	add.w	r3, r3, #8
 8007ffc:	d1f4      	bne.n	8007fe8 <arm_cfft_f32+0xc8>
 8007ffe:	e798      	b.n	8007f32 <arm_cfft_f32+0x12>
 8008000:	4621      	mov	r1, r4
 8008002:	4630      	mov	r0, r6
 8008004:	f7ff fd36 	bl	8007a74 <arm_cfft_radix8by4_f32>
 8008008:	e7a7      	b.n	8007f5a <arm_cfft_f32+0x3a>
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0aa      	beq.n	8007f64 <arm_cfft_f32+0x44>
 800800e:	e7b9      	b.n	8007f84 <arm_cfft_f32+0x64>

08008010 <arm_bitreversal_32>:
 8008010:	b1e9      	cbz	r1, 800804e <arm_bitreversal_32+0x3e>
 8008012:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008014:	2500      	movs	r5, #0
 8008016:	f102 0e02 	add.w	lr, r2, #2
 800801a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800801e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8008022:	08a4      	lsrs	r4, r4, #2
 8008024:	089b      	lsrs	r3, r3, #2
 8008026:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800802a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800802e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8008032:	00a6      	lsls	r6, r4, #2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800803a:	3304      	adds	r3, #4
 800803c:	1d34      	adds	r4, r6, #4
 800803e:	3502      	adds	r5, #2
 8008040:	58c6      	ldr	r6, [r0, r3]
 8008042:	5907      	ldr	r7, [r0, r4]
 8008044:	50c7      	str	r7, [r0, r3]
 8008046:	428d      	cmp	r5, r1
 8008048:	5106      	str	r6, [r0, r4]
 800804a:	d3e6      	bcc.n	800801a <arm_bitreversal_32+0xa>
 800804c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800804e:	4770      	bx	lr

08008050 <arm_radix8_butterfly_f32>:
 8008050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008054:	ed2d 8b10 	vpush	{d8-d15}
 8008058:	b095      	sub	sp, #84	; 0x54
 800805a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800805e:	4603      	mov	r3, r0
 8008060:	3304      	adds	r3, #4
 8008062:	ed9f bab9 	vldr	s22, [pc, #740]	; 8008348 <arm_radix8_butterfly_f32+0x2f8>
 8008066:	9012      	str	r0, [sp, #72]	; 0x48
 8008068:	468b      	mov	fp, r1
 800806a:	9313      	str	r3, [sp, #76]	; 0x4c
 800806c:	4689      	mov	r9, r1
 800806e:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8008072:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008074:	960f      	str	r6, [sp, #60]	; 0x3c
 8008076:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800807a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800807e:	eb03 0508 	add.w	r5, r3, r8
 8008082:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8008086:	eb05 040e 	add.w	r4, r5, lr
 800808a:	0137      	lsls	r7, r6, #4
 800808c:	eba6 030a 	sub.w	r3, r6, sl
 8008090:	eb04 000e 	add.w	r0, r4, lr
 8008094:	44b2      	add	sl, r6
 8008096:	1d3a      	adds	r2, r7, #4
 8008098:	9702      	str	r7, [sp, #8]
 800809a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800809e:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 80080a2:	ebae 0c06 	sub.w	ip, lr, r6
 80080a6:	9703      	str	r7, [sp, #12]
 80080a8:	eb03 0708 	add.w	r7, r3, r8
 80080ac:	9701      	str	r7, [sp, #4]
 80080ae:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 80080b2:	9706      	str	r7, [sp, #24]
 80080b4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80080b6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80080ba:	f10e 0104 	add.w	r1, lr, #4
 80080be:	4439      	add	r1, r7
 80080c0:	443a      	add	r2, r7
 80080c2:	0137      	lsls	r7, r6, #4
 80080c4:	00f6      	lsls	r6, r6, #3
 80080c6:	9704      	str	r7, [sp, #16]
 80080c8:	9605      	str	r6, [sp, #20]
 80080ca:	9f01      	ldr	r7, [sp, #4]
 80080cc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80080ce:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 80080d2:	f04f 0c00 	mov.w	ip, #0
 80080d6:	edd4 6a00 	vldr	s13, [r4]
 80080da:	edd7 1a00 	vldr	s3, [r7]
 80080de:	ed16 aa01 	vldr	s20, [r6, #-4]
 80080e2:	edd5 5a00 	vldr	s11, [r5]
 80080e6:	ed52 9a01 	vldr	s19, [r2, #-4]
 80080ea:	ed90 6a00 	vldr	s12, [r0]
 80080ee:	ed51 7a01 	vldr	s15, [r1, #-4]
 80080f2:	ed93 3a00 	vldr	s6, [r3]
 80080f6:	ee39 0a86 	vadd.f32	s0, s19, s12
 80080fa:	ee33 2a21 	vadd.f32	s4, s6, s3
 80080fe:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8008102:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8008106:	ee35 7a02 	vadd.f32	s14, s10, s4
 800810a:	ee34 4a80 	vadd.f32	s8, s9, s0
 800810e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008112:	ee74 6a07 	vadd.f32	s13, s8, s14
 8008116:	ee34 4a47 	vsub.f32	s8, s8, s14
 800811a:	ed46 6a01 	vstr	s13, [r6, #-4]
 800811e:	ed85 4a00 	vstr	s8, [r5]
 8008122:	edd1 6a00 	vldr	s13, [r1]
 8008126:	ed94 9a01 	vldr	s18, [r4, #4]
 800812a:	edd3 2a01 	vldr	s5, [r3, #4]
 800812e:	edd7 8a01 	vldr	s17, [r7, #4]
 8008132:	edd6 0a00 	vldr	s1, [r6]
 8008136:	edd5 3a01 	vldr	s7, [r5, #4]
 800813a:	ed90 8a01 	vldr	s16, [r0, #4]
 800813e:	ed92 7a00 	vldr	s14, [r2]
 8008142:	ee33 3a61 	vsub.f32	s6, s6, s3
 8008146:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800814a:	ee72 aae8 	vsub.f32	s21, s5, s17
 800814e:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8008152:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8008156:	ee77 7a83 	vadd.f32	s15, s15, s6
 800815a:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800815e:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8008162:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8008166:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800816a:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800816e:	ee77 0a08 	vadd.f32	s1, s14, s16
 8008172:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8008176:	ee37 7a48 	vsub.f32	s14, s14, s16
 800817a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800817e:	ee7a 5a65 	vsub.f32	s11, s20, s11
 8008182:	ee76 6a89 	vadd.f32	s13, s13, s18
 8008186:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800818a:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800818e:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8008192:	ee35 5a42 	vsub.f32	s10, s10, s4
 8008196:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800819a:	ee33 2a20 	vadd.f32	s4, s6, s1
 800819e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80081a2:	ee33 3a60 	vsub.f32	s6, s6, s1
 80081a6:	ee75 2aa1 	vadd.f32	s5, s11, s3
 80081aa:	ee77 0a01 	vadd.f32	s1, s14, s2
 80081ae:	ee75 5ae1 	vsub.f32	s11, s11, s3
 80081b2:	ee37 7a41 	vsub.f32	s14, s14, s2
 80081b6:	ee73 1a84 	vadd.f32	s3, s7, s8
 80081ba:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80081be:	ee76 3a27 	vadd.f32	s7, s12, s15
 80081c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80081c6:	ee32 8a00 	vadd.f32	s16, s4, s0
 80081ca:	ee33 1a45 	vsub.f32	s2, s6, s10
 80081ce:	ee32 2a40 	vsub.f32	s4, s4, s0
 80081d2:	ee35 5a03 	vadd.f32	s10, s10, s6
 80081d6:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80081da:	ee32 3aa0 	vadd.f32	s6, s5, s1
 80081de:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80081e2:	ee34 6a67 	vsub.f32	s12, s8, s15
 80081e6:	ee75 4a87 	vadd.f32	s9, s11, s14
 80081ea:	ee72 2ae0 	vsub.f32	s5, s5, s1
 80081ee:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80081f2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80081f6:	ee71 5ae3 	vsub.f32	s11, s3, s7
 80081fa:	44dc      	add	ip, fp
 80081fc:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8008200:	45e1      	cmp	r9, ip
 8008202:	ed86 8a00 	vstr	s16, [r6]
 8008206:	ed85 2a01 	vstr	s4, [r5, #4]
 800820a:	4456      	add	r6, sl
 800820c:	ed02 0a01 	vstr	s0, [r2, #-4]
 8008210:	4455      	add	r5, sl
 8008212:	edc0 6a00 	vstr	s13, [r0]
 8008216:	ed82 1a00 	vstr	s2, [r2]
 800821a:	ed80 5a01 	vstr	s10, [r0, #4]
 800821e:	4452      	add	r2, sl
 8008220:	ed01 3a01 	vstr	s6, [r1, #-4]
 8008224:	4450      	add	r0, sl
 8008226:	edc7 2a00 	vstr	s5, [r7]
 800822a:	edc4 4a00 	vstr	s9, [r4]
 800822e:	ed83 7a00 	vstr	s14, [r3]
 8008232:	edc1 5a00 	vstr	s11, [r1]
 8008236:	edc7 3a01 	vstr	s7, [r7, #4]
 800823a:	4451      	add	r1, sl
 800823c:	ed84 6a01 	vstr	s12, [r4, #4]
 8008240:	4457      	add	r7, sl
 8008242:	edc3 7a01 	vstr	s15, [r3, #4]
 8008246:	4454      	add	r4, sl
 8008248:	4453      	add	r3, sl
 800824a:	f63f af44 	bhi.w	80080d6 <arm_radix8_butterfly_f32+0x86>
 800824e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008250:	2b07      	cmp	r3, #7
 8008252:	f240 81b7 	bls.w	80085c4 <arm_radix8_butterfly_f32+0x574>
 8008256:	9b06      	ldr	r3, [sp, #24]
 8008258:	9903      	ldr	r1, [sp, #12]
 800825a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800825c:	9e05      	ldr	r6, [sp, #20]
 800825e:	9a04      	ldr	r2, [sp, #16]
 8008260:	f103 0c08 	add.w	ip, r3, #8
 8008264:	9b02      	ldr	r3, [sp, #8]
 8008266:	3108      	adds	r1, #8
 8008268:	f108 0808 	add.w	r8, r8, #8
 800826c:	1841      	adds	r1, r0, r1
 800826e:	3608      	adds	r6, #8
 8008270:	330c      	adds	r3, #12
 8008272:	4604      	mov	r4, r0
 8008274:	4444      	add	r4, r8
 8008276:	18c3      	adds	r3, r0, r3
 8008278:	9109      	str	r1, [sp, #36]	; 0x24
 800827a:	1981      	adds	r1, r0, r6
 800827c:	f10e 0e08 	add.w	lr, lr, #8
 8008280:	3208      	adds	r2, #8
 8008282:	940b      	str	r4, [sp, #44]	; 0x2c
 8008284:	9107      	str	r1, [sp, #28]
 8008286:	4604      	mov	r4, r0
 8008288:	4601      	mov	r1, r0
 800828a:	9304      	str	r3, [sp, #16]
 800828c:	f100 030c 	add.w	r3, r0, #12
 8008290:	4474      	add	r4, lr
 8008292:	f04f 0801 	mov.w	r8, #1
 8008296:	1882      	adds	r2, r0, r2
 8008298:	4461      	add	r1, ip
 800829a:	9305      	str	r3, [sp, #20]
 800829c:	464b      	mov	r3, r9
 800829e:	940a      	str	r4, [sp, #40]	; 0x28
 80082a0:	46c1      	mov	r9, r8
 80082a2:	9208      	str	r2, [sp, #32]
 80082a4:	46d8      	mov	r8, fp
 80082a6:	9106      	str	r1, [sp, #24]
 80082a8:	f04f 0e00 	mov.w	lr, #0
 80082ac:	469b      	mov	fp, r3
 80082ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80082b2:	449e      	add	lr, r3
 80082b4:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80082b8:	441a      	add	r2, r3
 80082ba:	920e      	str	r2, [sp, #56]	; 0x38
 80082bc:	441a      	add	r2, r3
 80082be:	18d4      	adds	r4, r2, r3
 80082c0:	18e5      	adds	r5, r4, r3
 80082c2:	18ee      	adds	r6, r5, r3
 80082c4:	18f7      	adds	r7, r6, r3
 80082c6:	eb07 0c03 	add.w	ip, r7, r3
 80082ca:	920d      	str	r2, [sp, #52]	; 0x34
 80082cc:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 80082d0:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 80082d4:	910c      	str	r1, [sp, #48]	; 0x30
 80082d6:	4419      	add	r1, r3
 80082d8:	9103      	str	r1, [sp, #12]
 80082da:	4419      	add	r1, r3
 80082dc:	18ca      	adds	r2, r1, r3
 80082de:	9202      	str	r2, [sp, #8]
 80082e0:	441a      	add	r2, r3
 80082e2:	18d0      	adds	r0, r2, r3
 80082e4:	ed92 ea01 	vldr	s28, [r2, #4]
 80082e8:	9a02      	ldr	r2, [sp, #8]
 80082ea:	edd4 7a00 	vldr	s15, [r4]
 80082ee:	edd2 da01 	vldr	s27, [r2, #4]
 80082f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082f4:	ed91 da01 	vldr	s26, [r1, #4]
 80082f8:	ed92 ca01 	vldr	s24, [r2, #4]
 80082fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082fe:	9903      	ldr	r1, [sp, #12]
 8008300:	edcd 7a03 	vstr	s15, [sp, #12]
 8008304:	edd2 7a00 	vldr	s15, [r2]
 8008308:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800830a:	edcd 7a02 	vstr	s15, [sp, #8]
 800830e:	edd2 7a00 	vldr	s15, [r2]
 8008312:	edd0 ea01 	vldr	s29, [r0, #4]
 8008316:	edd1 ca01 	vldr	s25, [r1, #4]
 800831a:	eddc ba00 	vldr	s23, [ip]
 800831e:	edd7 aa00 	vldr	s21, [r7]
 8008322:	ed96 aa00 	vldr	s20, [r6]
 8008326:	edd5 9a00 	vldr	s19, [r5]
 800832a:	edcd 7a01 	vstr	s15, [sp, #4]
 800832e:	4403      	add	r3, r0
 8008330:	ed93 fa01 	vldr	s30, [r3, #4]
 8008334:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8008338:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800833c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008340:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008344:	46cc      	mov	ip, r9
 8008346:	e001      	b.n	800834c <arm_radix8_butterfly_f32+0x2fc>
 8008348:	3f3504f3 	.word	0x3f3504f3
 800834c:	ed91 6a00 	vldr	s12, [r1]
 8008350:	ed93 5a00 	vldr	s10, [r3]
 8008354:	edd0 fa00 	vldr	s31, [r0]
 8008358:	edd4 7a00 	vldr	s15, [r4]
 800835c:	ed95 7a00 	vldr	s14, [r5]
 8008360:	ed56 3a01 	vldr	s7, [r6, #-4]
 8008364:	ed17 3a01 	vldr	s6, [r7, #-4]
 8008368:	ed92 2a00 	vldr	s4, [r2]
 800836c:	ed96 0a00 	vldr	s0, [r6]
 8008370:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008374:	ee32 1a06 	vadd.f32	s2, s4, s12
 8008378:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800837c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8008380:	ee78 1a04 	vadd.f32	s3, s16, s8
 8008384:	ee71 6a24 	vadd.f32	s13, s2, s9
 8008388:	ee32 2a46 	vsub.f32	s4, s4, s12
 800838c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8008390:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008394:	ed06 6a01 	vstr	s12, [r6, #-4]
 8008398:	edd4 8a01 	vldr	s17, [r4, #4]
 800839c:	ed92 9a01 	vldr	s18, [r2, #4]
 80083a0:	edd7 0a00 	vldr	s1, [r7]
 80083a4:	edd1 2a01 	vldr	s5, [r1, #4]
 80083a8:	ed95 7a01 	vldr	s14, [r5, #4]
 80083ac:	ed93 6a01 	vldr	s12, [r3, #4]
 80083b0:	edd0 5a01 	vldr	s11, [r0, #4]
 80083b4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80083b8:	ee33 3a6f 	vsub.f32	s6, s6, s31
 80083bc:	ee39 5a62 	vsub.f32	s10, s18, s5
 80083c0:	ee78 fac7 	vsub.f32	s31, s17, s14
 80083c4:	ee38 4a44 	vsub.f32	s8, s16, s8
 80083c8:	ee38 7a87 	vadd.f32	s14, s17, s14
 80083cc:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80083d0:	ee79 2a22 	vadd.f32	s5, s18, s5
 80083d4:	ee32 9a27 	vadd.f32	s18, s4, s15
 80083d8:	ee72 7a67 	vsub.f32	s15, s4, s15
 80083dc:	ee30 2a06 	vadd.f32	s4, s0, s12
 80083e0:	ee75 8a6f 	vsub.f32	s17, s10, s31
 80083e4:	ee71 4a64 	vsub.f32	s9, s2, s9
 80083e8:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80083ec:	ee32 1a08 	vadd.f32	s2, s4, s16
 80083f0:	ee72 fa87 	vadd.f32	s31, s5, s14
 80083f4:	ee32 2a48 	vsub.f32	s4, s4, s16
 80083f8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80083fc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8008400:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8008404:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8008408:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800840c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8008410:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8008414:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8008418:	ee30 6a46 	vsub.f32	s12, s0, s12
 800841c:	ee74 0a22 	vadd.f32	s1, s8, s5
 8008420:	ee36 0a28 	vadd.f32	s0, s12, s17
 8008424:	ee74 2a62 	vsub.f32	s5, s8, s5
 8008428:	ee36 6a68 	vsub.f32	s12, s12, s17
 800842c:	ee32 4a64 	vsub.f32	s8, s4, s9
 8008430:	ee73 8a09 	vadd.f32	s17, s6, s18
 8008434:	ee74 4a82 	vadd.f32	s9, s9, s4
 8008438:	ee33 9a49 	vsub.f32	s18, s6, s18
 800843c:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8008440:	ee35 3a85 	vadd.f32	s6, s11, s10
 8008444:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8008448:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800844c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8008450:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8008454:	ee30 7a68 	vsub.f32	s14, s0, s17
 8008458:	ee35 8a03 	vadd.f32	s16, s10, s6
 800845c:	ee38 0a80 	vadd.f32	s0, s17, s0
 8008460:	ee73 3a82 	vadd.f32	s7, s7, s4
 8008464:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8008468:	ed9d 2a01 	vldr	s4, [sp, #4]
 800846c:	eddd 1a02 	vldr	s3, [sp, #8]
 8008470:	ee35 5a43 	vsub.f32	s10, s10, s6
 8008474:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8008478:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800847c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8008480:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008484:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8008488:	ee76 5a49 	vsub.f32	s11, s12, s18
 800848c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8008490:	ee39 6a06 	vadd.f32	s12, s18, s12
 8008494:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8008498:	ee21 4a84 	vmul.f32	s8, s3, s8
 800849c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 80084a0:	ee22 7a07 	vmul.f32	s14, s4, s14
 80084a4:	ee22 2a08 	vmul.f32	s4, s4, s16
 80084a8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80084ac:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80084b0:	ee31 1a09 	vadd.f32	s2, s2, s18
 80084b4:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 80084b8:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 80084bc:	ee74 0a60 	vsub.f32	s1, s8, s1
 80084c0:	ee37 7a48 	vsub.f32	s14, s14, s16
 80084c4:	ee2f 4a00 	vmul.f32	s8, s30, s0
 80084c8:	ee2b 8a85 	vmul.f32	s16, s23, s10
 80084cc:	ee72 1a21 	vadd.f32	s3, s4, s3
 80084d0:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 80084d4:	ee38 2a89 	vadd.f32	s4, s17, s18
 80084d8:	ee2f 5a05 	vmul.f32	s10, s30, s10
 80084dc:	ee38 8a04 	vadd.f32	s16, s16, s8
 80084e0:	ee2e 9a25 	vmul.f32	s18, s28, s11
 80084e4:	ee2a 4a25 	vmul.f32	s8, s20, s11
 80084e8:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80084ec:	eddd 5a03 	vldr	s11, [sp, #12]
 80084f0:	edc6 fa00 	vstr	s31, [r6]
 80084f4:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80084f8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80084fc:	ee30 0a45 	vsub.f32	s0, s0, s10
 8008500:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8008504:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8008508:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800850c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8008510:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8008514:	ee25 6a86 	vmul.f32	s12, s11, s12
 8008518:	ee74 4a89 	vadd.f32	s9, s9, s18
 800851c:	ee34 3a43 	vsub.f32	s6, s8, s6
 8008520:	ee78 8a85 	vadd.f32	s17, s17, s10
 8008524:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008528:	44c4      	add	ip, r8
 800852a:	45e3      	cmp	fp, ip
 800852c:	edc3 3a00 	vstr	s7, [r3]
 8008530:	edc3 6a01 	vstr	s13, [r3, #4]
 8008534:	4456      	add	r6, sl
 8008536:	ed07 1a01 	vstr	s2, [r7, #-4]
 800853a:	edc7 0a00 	vstr	s1, [r7]
 800853e:	4453      	add	r3, sl
 8008540:	ed80 2a00 	vstr	s4, [r0]
 8008544:	edc0 2a01 	vstr	s5, [r0, #4]
 8008548:	4457      	add	r7, sl
 800854a:	edc2 1a00 	vstr	s3, [r2]
 800854e:	ed82 7a01 	vstr	s14, [r2, #4]
 8008552:	4450      	add	r0, sl
 8008554:	ed85 8a00 	vstr	s16, [r5]
 8008558:	ed85 0a01 	vstr	s0, [r5, #4]
 800855c:	4452      	add	r2, sl
 800855e:	edc1 4a00 	vstr	s9, [r1]
 8008562:	4455      	add	r5, sl
 8008564:	ed81 3a01 	vstr	s6, [r1, #4]
 8008568:	edc4 8a00 	vstr	s17, [r4]
 800856c:	ed84 6a01 	vstr	s12, [r4, #4]
 8008570:	4451      	add	r1, sl
 8008572:	4454      	add	r4, sl
 8008574:	f63f aeea 	bhi.w	800834c <arm_radix8_butterfly_f32+0x2fc>
 8008578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800857a:	3308      	adds	r3, #8
 800857c:	930b      	str	r3, [sp, #44]	; 0x2c
 800857e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008580:	3308      	adds	r3, #8
 8008582:	930a      	str	r3, [sp, #40]	; 0x28
 8008584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008586:	3308      	adds	r3, #8
 8008588:	9309      	str	r3, [sp, #36]	; 0x24
 800858a:	9b08      	ldr	r3, [sp, #32]
 800858c:	3308      	adds	r3, #8
 800858e:	9308      	str	r3, [sp, #32]
 8008590:	9b07      	ldr	r3, [sp, #28]
 8008592:	3308      	adds	r3, #8
 8008594:	9307      	str	r3, [sp, #28]
 8008596:	9b06      	ldr	r3, [sp, #24]
 8008598:	3308      	adds	r3, #8
 800859a:	9306      	str	r3, [sp, #24]
 800859c:	9b05      	ldr	r3, [sp, #20]
 800859e:	3308      	adds	r3, #8
 80085a0:	9305      	str	r3, [sp, #20]
 80085a2:	9b04      	ldr	r3, [sp, #16]
 80085a4:	3308      	adds	r3, #8
 80085a6:	9304      	str	r3, [sp, #16]
 80085a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085aa:	f109 0901 	add.w	r9, r9, #1
 80085ae:	454b      	cmp	r3, r9
 80085b0:	f47f ae7d 	bne.w	80082ae <arm_radix8_butterfly_f32+0x25e>
 80085b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085b6:	00db      	lsls	r3, r3, #3
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	46d9      	mov	r9, fp
 80085bc:	9310      	str	r3, [sp, #64]	; 0x40
 80085be:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80085c2:	e554      	b.n	800806e <arm_radix8_butterfly_f32+0x1e>
 80085c4:	b015      	add	sp, #84	; 0x54
 80085c6:	ecbd 8b10 	vpop	{d8-d15}
 80085ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ce:	bf00      	nop

080085d0 <pow>:
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d2:	ed2d 8b02 	vpush	{d8}
 80085d6:	eeb0 8a40 	vmov.f32	s16, s0
 80085da:	eef0 8a60 	vmov.f32	s17, s1
 80085de:	ec55 4b11 	vmov	r4, r5, d1
 80085e2:	f000 f9a9 	bl	8008938 <__ieee754_pow>
 80085e6:	4622      	mov	r2, r4
 80085e8:	462b      	mov	r3, r5
 80085ea:	4620      	mov	r0, r4
 80085ec:	4629      	mov	r1, r5
 80085ee:	ec57 6b10 	vmov	r6, r7, d0
 80085f2:	f7f8 fac3 	bl	8000b7c <__aeabi_dcmpun>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d13b      	bne.n	8008672 <pow+0xa2>
 80085fa:	ec51 0b18 	vmov	r0, r1, d8
 80085fe:	2200      	movs	r2, #0
 8008600:	2300      	movs	r3, #0
 8008602:	f7f8 fa89 	bl	8000b18 <__aeabi_dcmpeq>
 8008606:	b1b8      	cbz	r0, 8008638 <pow+0x68>
 8008608:	2200      	movs	r2, #0
 800860a:	2300      	movs	r3, #0
 800860c:	4620      	mov	r0, r4
 800860e:	4629      	mov	r1, r5
 8008610:	f7f8 fa82 	bl	8000b18 <__aeabi_dcmpeq>
 8008614:	2800      	cmp	r0, #0
 8008616:	d146      	bne.n	80086a6 <pow+0xd6>
 8008618:	ec45 4b10 	vmov	d0, r4, r5
 800861c:	f000 f870 	bl	8008700 <finite>
 8008620:	b338      	cbz	r0, 8008672 <pow+0xa2>
 8008622:	2200      	movs	r2, #0
 8008624:	2300      	movs	r3, #0
 8008626:	4620      	mov	r0, r4
 8008628:	4629      	mov	r1, r5
 800862a:	f7f8 fa7f 	bl	8000b2c <__aeabi_dcmplt>
 800862e:	b300      	cbz	r0, 8008672 <pow+0xa2>
 8008630:	f001 ffb2 	bl	800a598 <__errno>
 8008634:	2322      	movs	r3, #34	; 0x22
 8008636:	e01b      	b.n	8008670 <pow+0xa0>
 8008638:	ec47 6b10 	vmov	d0, r6, r7
 800863c:	f000 f860 	bl	8008700 <finite>
 8008640:	b9e0      	cbnz	r0, 800867c <pow+0xac>
 8008642:	eeb0 0a48 	vmov.f32	s0, s16
 8008646:	eef0 0a68 	vmov.f32	s1, s17
 800864a:	f000 f859 	bl	8008700 <finite>
 800864e:	b1a8      	cbz	r0, 800867c <pow+0xac>
 8008650:	ec45 4b10 	vmov	d0, r4, r5
 8008654:	f000 f854 	bl	8008700 <finite>
 8008658:	b180      	cbz	r0, 800867c <pow+0xac>
 800865a:	4632      	mov	r2, r6
 800865c:	463b      	mov	r3, r7
 800865e:	4630      	mov	r0, r6
 8008660:	4639      	mov	r1, r7
 8008662:	f7f8 fa8b 	bl	8000b7c <__aeabi_dcmpun>
 8008666:	2800      	cmp	r0, #0
 8008668:	d0e2      	beq.n	8008630 <pow+0x60>
 800866a:	f001 ff95 	bl	800a598 <__errno>
 800866e:	2321      	movs	r3, #33	; 0x21
 8008670:	6003      	str	r3, [r0, #0]
 8008672:	ecbd 8b02 	vpop	{d8}
 8008676:	ec47 6b10 	vmov	d0, r6, r7
 800867a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800867c:	2200      	movs	r2, #0
 800867e:	2300      	movs	r3, #0
 8008680:	4630      	mov	r0, r6
 8008682:	4639      	mov	r1, r7
 8008684:	f7f8 fa48 	bl	8000b18 <__aeabi_dcmpeq>
 8008688:	2800      	cmp	r0, #0
 800868a:	d0f2      	beq.n	8008672 <pow+0xa2>
 800868c:	eeb0 0a48 	vmov.f32	s0, s16
 8008690:	eef0 0a68 	vmov.f32	s1, s17
 8008694:	f000 f834 	bl	8008700 <finite>
 8008698:	2800      	cmp	r0, #0
 800869a:	d0ea      	beq.n	8008672 <pow+0xa2>
 800869c:	ec45 4b10 	vmov	d0, r4, r5
 80086a0:	f000 f82e 	bl	8008700 <finite>
 80086a4:	e7c3      	b.n	800862e <pow+0x5e>
 80086a6:	4f01      	ldr	r7, [pc, #4]	; (80086ac <pow+0xdc>)
 80086a8:	2600      	movs	r6, #0
 80086aa:	e7e2      	b.n	8008672 <pow+0xa2>
 80086ac:	3ff00000 	.word	0x3ff00000

080086b0 <fabs>:
 80086b0:	ec51 0b10 	vmov	r0, r1, d0
 80086b4:	ee10 2a10 	vmov	r2, s0
 80086b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80086bc:	ec43 2b10 	vmov	d0, r2, r3
 80086c0:	4770      	bx	lr
	...

080086c4 <sqrtf>:
 80086c4:	b508      	push	{r3, lr}
 80086c6:	ed2d 8b02 	vpush	{d8}
 80086ca:	eeb0 8a40 	vmov.f32	s16, s0
 80086ce:	f000 f92d 	bl	800892c <__ieee754_sqrtf>
 80086d2:	eeb4 8a48 	vcmp.f32	s16, s16
 80086d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086da:	d60c      	bvs.n	80086f6 <sqrtf+0x32>
 80086dc:	eddf 8a07 	vldr	s17, [pc, #28]	; 80086fc <sqrtf+0x38>
 80086e0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80086e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e8:	d505      	bpl.n	80086f6 <sqrtf+0x32>
 80086ea:	f001 ff55 	bl	800a598 <__errno>
 80086ee:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80086f2:	2321      	movs	r3, #33	; 0x21
 80086f4:	6003      	str	r3, [r0, #0]
 80086f6:	ecbd 8b02 	vpop	{d8}
 80086fa:	bd08      	pop	{r3, pc}
 80086fc:	00000000 	.word	0x00000000

08008700 <finite>:
 8008700:	b082      	sub	sp, #8
 8008702:	ed8d 0b00 	vstr	d0, [sp]
 8008706:	9801      	ldr	r0, [sp, #4]
 8008708:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800870c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008710:	0fc0      	lsrs	r0, r0, #31
 8008712:	b002      	add	sp, #8
 8008714:	4770      	bx	lr

08008716 <with_errno>:
 8008716:	b570      	push	{r4, r5, r6, lr}
 8008718:	4604      	mov	r4, r0
 800871a:	460d      	mov	r5, r1
 800871c:	4616      	mov	r6, r2
 800871e:	f001 ff3b 	bl	800a598 <__errno>
 8008722:	4629      	mov	r1, r5
 8008724:	6006      	str	r6, [r0, #0]
 8008726:	4620      	mov	r0, r4
 8008728:	bd70      	pop	{r4, r5, r6, pc}

0800872a <xflow>:
 800872a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800872c:	4614      	mov	r4, r2
 800872e:	461d      	mov	r5, r3
 8008730:	b108      	cbz	r0, 8008736 <xflow+0xc>
 8008732:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008736:	e9cd 2300 	strd	r2, r3, [sp]
 800873a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800873e:	4620      	mov	r0, r4
 8008740:	4629      	mov	r1, r5
 8008742:	f7f7 ff81 	bl	8000648 <__aeabi_dmul>
 8008746:	2222      	movs	r2, #34	; 0x22
 8008748:	b003      	add	sp, #12
 800874a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800874e:	f7ff bfe2 	b.w	8008716 <with_errno>

08008752 <__math_uflow>:
 8008752:	b508      	push	{r3, lr}
 8008754:	2200      	movs	r2, #0
 8008756:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800875a:	f7ff ffe6 	bl	800872a <xflow>
 800875e:	ec41 0b10 	vmov	d0, r0, r1
 8008762:	bd08      	pop	{r3, pc}

08008764 <__math_oflow>:
 8008764:	b508      	push	{r3, lr}
 8008766:	2200      	movs	r2, #0
 8008768:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800876c:	f7ff ffdd 	bl	800872a <xflow>
 8008770:	ec41 0b10 	vmov	d0, r0, r1
 8008774:	bd08      	pop	{r3, pc}
	...

08008778 <__ieee754_sqrt>:
 8008778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	ec55 4b10 	vmov	r4, r5, d0
 8008780:	4e67      	ldr	r6, [pc, #412]	; (8008920 <__ieee754_sqrt+0x1a8>)
 8008782:	43ae      	bics	r6, r5
 8008784:	ee10 0a10 	vmov	r0, s0
 8008788:	ee10 2a10 	vmov	r2, s0
 800878c:	4629      	mov	r1, r5
 800878e:	462b      	mov	r3, r5
 8008790:	d10d      	bne.n	80087ae <__ieee754_sqrt+0x36>
 8008792:	f7f7 ff59 	bl	8000648 <__aeabi_dmul>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	4620      	mov	r0, r4
 800879c:	4629      	mov	r1, r5
 800879e:	f7f7 fd9d 	bl	80002dc <__adddf3>
 80087a2:	4604      	mov	r4, r0
 80087a4:	460d      	mov	r5, r1
 80087a6:	ec45 4b10 	vmov	d0, r4, r5
 80087aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ae:	2d00      	cmp	r5, #0
 80087b0:	dc0b      	bgt.n	80087ca <__ieee754_sqrt+0x52>
 80087b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80087b6:	4326      	orrs	r6, r4
 80087b8:	d0f5      	beq.n	80087a6 <__ieee754_sqrt+0x2e>
 80087ba:	b135      	cbz	r5, 80087ca <__ieee754_sqrt+0x52>
 80087bc:	f7f7 fd8c 	bl	80002d8 <__aeabi_dsub>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	f7f8 f86a 	bl	800089c <__aeabi_ddiv>
 80087c8:	e7eb      	b.n	80087a2 <__ieee754_sqrt+0x2a>
 80087ca:	1509      	asrs	r1, r1, #20
 80087cc:	f000 808d 	beq.w	80088ea <__ieee754_sqrt+0x172>
 80087d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087d4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80087d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087dc:	07c9      	lsls	r1, r1, #31
 80087de:	bf5c      	itt	pl
 80087e0:	005b      	lslpl	r3, r3, #1
 80087e2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80087e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80087ea:	bf58      	it	pl
 80087ec:	0052      	lslpl	r2, r2, #1
 80087ee:	2500      	movs	r5, #0
 80087f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80087f4:	1076      	asrs	r6, r6, #1
 80087f6:	0052      	lsls	r2, r2, #1
 80087f8:	f04f 0e16 	mov.w	lr, #22
 80087fc:	46ac      	mov	ip, r5
 80087fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008802:	eb0c 0001 	add.w	r0, ip, r1
 8008806:	4298      	cmp	r0, r3
 8008808:	bfde      	ittt	le
 800880a:	1a1b      	suble	r3, r3, r0
 800880c:	eb00 0c01 	addle.w	ip, r0, r1
 8008810:	186d      	addle	r5, r5, r1
 8008812:	005b      	lsls	r3, r3, #1
 8008814:	f1be 0e01 	subs.w	lr, lr, #1
 8008818:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800881c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008820:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008824:	d1ed      	bne.n	8008802 <__ieee754_sqrt+0x8a>
 8008826:	4674      	mov	r4, lr
 8008828:	2720      	movs	r7, #32
 800882a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800882e:	4563      	cmp	r3, ip
 8008830:	eb01 000e 	add.w	r0, r1, lr
 8008834:	dc02      	bgt.n	800883c <__ieee754_sqrt+0xc4>
 8008836:	d113      	bne.n	8008860 <__ieee754_sqrt+0xe8>
 8008838:	4290      	cmp	r0, r2
 800883a:	d811      	bhi.n	8008860 <__ieee754_sqrt+0xe8>
 800883c:	2800      	cmp	r0, #0
 800883e:	eb00 0e01 	add.w	lr, r0, r1
 8008842:	da57      	bge.n	80088f4 <__ieee754_sqrt+0x17c>
 8008844:	f1be 0f00 	cmp.w	lr, #0
 8008848:	db54      	blt.n	80088f4 <__ieee754_sqrt+0x17c>
 800884a:	f10c 0801 	add.w	r8, ip, #1
 800884e:	eba3 030c 	sub.w	r3, r3, ip
 8008852:	4290      	cmp	r0, r2
 8008854:	bf88      	it	hi
 8008856:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800885a:	1a12      	subs	r2, r2, r0
 800885c:	440c      	add	r4, r1
 800885e:	46c4      	mov	ip, r8
 8008860:	005b      	lsls	r3, r3, #1
 8008862:	3f01      	subs	r7, #1
 8008864:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008868:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800886c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008870:	d1dd      	bne.n	800882e <__ieee754_sqrt+0xb6>
 8008872:	4313      	orrs	r3, r2
 8008874:	d01b      	beq.n	80088ae <__ieee754_sqrt+0x136>
 8008876:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008924 <__ieee754_sqrt+0x1ac>
 800887a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008928 <__ieee754_sqrt+0x1b0>
 800887e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008882:	e9db 2300 	ldrd	r2, r3, [fp]
 8008886:	f7f7 fd27 	bl	80002d8 <__aeabi_dsub>
 800888a:	e9da 8900 	ldrd	r8, r9, [sl]
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	4640      	mov	r0, r8
 8008894:	4649      	mov	r1, r9
 8008896:	f7f8 f953 	bl	8000b40 <__aeabi_dcmple>
 800889a:	b140      	cbz	r0, 80088ae <__ieee754_sqrt+0x136>
 800889c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80088a0:	e9da 0100 	ldrd	r0, r1, [sl]
 80088a4:	e9db 2300 	ldrd	r2, r3, [fp]
 80088a8:	d126      	bne.n	80088f8 <__ieee754_sqrt+0x180>
 80088aa:	3501      	adds	r5, #1
 80088ac:	463c      	mov	r4, r7
 80088ae:	106a      	asrs	r2, r5, #1
 80088b0:	0863      	lsrs	r3, r4, #1
 80088b2:	07e9      	lsls	r1, r5, #31
 80088b4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80088b8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80088bc:	bf48      	it	mi
 80088be:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80088c2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80088c6:	461c      	mov	r4, r3
 80088c8:	e76d      	b.n	80087a6 <__ieee754_sqrt+0x2e>
 80088ca:	0ad3      	lsrs	r3, r2, #11
 80088cc:	3815      	subs	r0, #21
 80088ce:	0552      	lsls	r2, r2, #21
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d0fa      	beq.n	80088ca <__ieee754_sqrt+0x152>
 80088d4:	02dc      	lsls	r4, r3, #11
 80088d6:	d50a      	bpl.n	80088ee <__ieee754_sqrt+0x176>
 80088d8:	f1c1 0420 	rsb	r4, r1, #32
 80088dc:	fa22 f404 	lsr.w	r4, r2, r4
 80088e0:	1e4d      	subs	r5, r1, #1
 80088e2:	408a      	lsls	r2, r1
 80088e4:	4323      	orrs	r3, r4
 80088e6:	1b41      	subs	r1, r0, r5
 80088e8:	e772      	b.n	80087d0 <__ieee754_sqrt+0x58>
 80088ea:	4608      	mov	r0, r1
 80088ec:	e7f0      	b.n	80088d0 <__ieee754_sqrt+0x158>
 80088ee:	005b      	lsls	r3, r3, #1
 80088f0:	3101      	adds	r1, #1
 80088f2:	e7ef      	b.n	80088d4 <__ieee754_sqrt+0x15c>
 80088f4:	46e0      	mov	r8, ip
 80088f6:	e7aa      	b.n	800884e <__ieee754_sqrt+0xd6>
 80088f8:	f7f7 fcf0 	bl	80002dc <__adddf3>
 80088fc:	e9da 8900 	ldrd	r8, r9, [sl]
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	4640      	mov	r0, r8
 8008906:	4649      	mov	r1, r9
 8008908:	f7f8 f910 	bl	8000b2c <__aeabi_dcmplt>
 800890c:	b120      	cbz	r0, 8008918 <__ieee754_sqrt+0x1a0>
 800890e:	1ca0      	adds	r0, r4, #2
 8008910:	bf08      	it	eq
 8008912:	3501      	addeq	r5, #1
 8008914:	3402      	adds	r4, #2
 8008916:	e7ca      	b.n	80088ae <__ieee754_sqrt+0x136>
 8008918:	3401      	adds	r4, #1
 800891a:	f024 0401 	bic.w	r4, r4, #1
 800891e:	e7c6      	b.n	80088ae <__ieee754_sqrt+0x136>
 8008920:	7ff00000 	.word	0x7ff00000
 8008924:	20000018 	.word	0x20000018
 8008928:	20000020 	.word	0x20000020

0800892c <__ieee754_sqrtf>:
 800892c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008930:	4770      	bx	lr
 8008932:	0000      	movs	r0, r0
 8008934:	0000      	movs	r0, r0
	...

08008938 <__ieee754_pow>:
 8008938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893c:	ed2d 8b06 	vpush	{d8-d10}
 8008940:	b089      	sub	sp, #36	; 0x24
 8008942:	ed8d 1b00 	vstr	d1, [sp]
 8008946:	e9dd 2900 	ldrd	r2, r9, [sp]
 800894a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800894e:	ea58 0102 	orrs.w	r1, r8, r2
 8008952:	ec57 6b10 	vmov	r6, r7, d0
 8008956:	d115      	bne.n	8008984 <__ieee754_pow+0x4c>
 8008958:	19b3      	adds	r3, r6, r6
 800895a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800895e:	4152      	adcs	r2, r2
 8008960:	4299      	cmp	r1, r3
 8008962:	4b89      	ldr	r3, [pc, #548]	; (8008b88 <__ieee754_pow+0x250>)
 8008964:	4193      	sbcs	r3, r2
 8008966:	f080 84d1 	bcs.w	800930c <__ieee754_pow+0x9d4>
 800896a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800896e:	4630      	mov	r0, r6
 8008970:	4639      	mov	r1, r7
 8008972:	f7f7 fcb3 	bl	80002dc <__adddf3>
 8008976:	ec41 0b10 	vmov	d0, r0, r1
 800897a:	b009      	add	sp, #36	; 0x24
 800897c:	ecbd 8b06 	vpop	{d8-d10}
 8008980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008984:	4b81      	ldr	r3, [pc, #516]	; (8008b8c <__ieee754_pow+0x254>)
 8008986:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800898a:	429c      	cmp	r4, r3
 800898c:	ee10 aa10 	vmov	sl, s0
 8008990:	463d      	mov	r5, r7
 8008992:	dc06      	bgt.n	80089a2 <__ieee754_pow+0x6a>
 8008994:	d101      	bne.n	800899a <__ieee754_pow+0x62>
 8008996:	2e00      	cmp	r6, #0
 8008998:	d1e7      	bne.n	800896a <__ieee754_pow+0x32>
 800899a:	4598      	cmp	r8, r3
 800899c:	dc01      	bgt.n	80089a2 <__ieee754_pow+0x6a>
 800899e:	d10f      	bne.n	80089c0 <__ieee754_pow+0x88>
 80089a0:	b172      	cbz	r2, 80089c0 <__ieee754_pow+0x88>
 80089a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80089a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80089aa:	ea55 050a 	orrs.w	r5, r5, sl
 80089ae:	d1dc      	bne.n	800896a <__ieee754_pow+0x32>
 80089b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80089b4:	18db      	adds	r3, r3, r3
 80089b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80089ba:	4152      	adcs	r2, r2
 80089bc:	429d      	cmp	r5, r3
 80089be:	e7d0      	b.n	8008962 <__ieee754_pow+0x2a>
 80089c0:	2d00      	cmp	r5, #0
 80089c2:	da3b      	bge.n	8008a3c <__ieee754_pow+0x104>
 80089c4:	4b72      	ldr	r3, [pc, #456]	; (8008b90 <__ieee754_pow+0x258>)
 80089c6:	4598      	cmp	r8, r3
 80089c8:	dc51      	bgt.n	8008a6e <__ieee754_pow+0x136>
 80089ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80089ce:	4598      	cmp	r8, r3
 80089d0:	f340 84ab 	ble.w	800932a <__ieee754_pow+0x9f2>
 80089d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80089d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80089dc:	2b14      	cmp	r3, #20
 80089de:	dd0f      	ble.n	8008a00 <__ieee754_pow+0xc8>
 80089e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80089e4:	fa22 f103 	lsr.w	r1, r2, r3
 80089e8:	fa01 f303 	lsl.w	r3, r1, r3
 80089ec:	4293      	cmp	r3, r2
 80089ee:	f040 849c 	bne.w	800932a <__ieee754_pow+0x9f2>
 80089f2:	f001 0101 	and.w	r1, r1, #1
 80089f6:	f1c1 0302 	rsb	r3, r1, #2
 80089fa:	9304      	str	r3, [sp, #16]
 80089fc:	b182      	cbz	r2, 8008a20 <__ieee754_pow+0xe8>
 80089fe:	e05f      	b.n	8008ac0 <__ieee754_pow+0x188>
 8008a00:	2a00      	cmp	r2, #0
 8008a02:	d15b      	bne.n	8008abc <__ieee754_pow+0x184>
 8008a04:	f1c3 0314 	rsb	r3, r3, #20
 8008a08:	fa48 f103 	asr.w	r1, r8, r3
 8008a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a10:	4543      	cmp	r3, r8
 8008a12:	f040 8487 	bne.w	8009324 <__ieee754_pow+0x9ec>
 8008a16:	f001 0101 	and.w	r1, r1, #1
 8008a1a:	f1c1 0302 	rsb	r3, r1, #2
 8008a1e:	9304      	str	r3, [sp, #16]
 8008a20:	4b5c      	ldr	r3, [pc, #368]	; (8008b94 <__ieee754_pow+0x25c>)
 8008a22:	4598      	cmp	r8, r3
 8008a24:	d132      	bne.n	8008a8c <__ieee754_pow+0x154>
 8008a26:	f1b9 0f00 	cmp.w	r9, #0
 8008a2a:	f280 8477 	bge.w	800931c <__ieee754_pow+0x9e4>
 8008a2e:	4959      	ldr	r1, [pc, #356]	; (8008b94 <__ieee754_pow+0x25c>)
 8008a30:	4632      	mov	r2, r6
 8008a32:	463b      	mov	r3, r7
 8008a34:	2000      	movs	r0, #0
 8008a36:	f7f7 ff31 	bl	800089c <__aeabi_ddiv>
 8008a3a:	e79c      	b.n	8008976 <__ieee754_pow+0x3e>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	9304      	str	r3, [sp, #16]
 8008a40:	2a00      	cmp	r2, #0
 8008a42:	d13d      	bne.n	8008ac0 <__ieee754_pow+0x188>
 8008a44:	4b51      	ldr	r3, [pc, #324]	; (8008b8c <__ieee754_pow+0x254>)
 8008a46:	4598      	cmp	r8, r3
 8008a48:	d1ea      	bne.n	8008a20 <__ieee754_pow+0xe8>
 8008a4a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008a4e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008a52:	ea53 030a 	orrs.w	r3, r3, sl
 8008a56:	f000 8459 	beq.w	800930c <__ieee754_pow+0x9d4>
 8008a5a:	4b4f      	ldr	r3, [pc, #316]	; (8008b98 <__ieee754_pow+0x260>)
 8008a5c:	429c      	cmp	r4, r3
 8008a5e:	dd08      	ble.n	8008a72 <__ieee754_pow+0x13a>
 8008a60:	f1b9 0f00 	cmp.w	r9, #0
 8008a64:	f2c0 8456 	blt.w	8009314 <__ieee754_pow+0x9dc>
 8008a68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a6c:	e783      	b.n	8008976 <__ieee754_pow+0x3e>
 8008a6e:	2302      	movs	r3, #2
 8008a70:	e7e5      	b.n	8008a3e <__ieee754_pow+0x106>
 8008a72:	f1b9 0f00 	cmp.w	r9, #0
 8008a76:	f04f 0000 	mov.w	r0, #0
 8008a7a:	f04f 0100 	mov.w	r1, #0
 8008a7e:	f6bf af7a 	bge.w	8008976 <__ieee754_pow+0x3e>
 8008a82:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008a86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008a8a:	e774      	b.n	8008976 <__ieee754_pow+0x3e>
 8008a8c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008a90:	d106      	bne.n	8008aa0 <__ieee754_pow+0x168>
 8008a92:	4632      	mov	r2, r6
 8008a94:	463b      	mov	r3, r7
 8008a96:	4630      	mov	r0, r6
 8008a98:	4639      	mov	r1, r7
 8008a9a:	f7f7 fdd5 	bl	8000648 <__aeabi_dmul>
 8008a9e:	e76a      	b.n	8008976 <__ieee754_pow+0x3e>
 8008aa0:	4b3e      	ldr	r3, [pc, #248]	; (8008b9c <__ieee754_pow+0x264>)
 8008aa2:	4599      	cmp	r9, r3
 8008aa4:	d10c      	bne.n	8008ac0 <__ieee754_pow+0x188>
 8008aa6:	2d00      	cmp	r5, #0
 8008aa8:	db0a      	blt.n	8008ac0 <__ieee754_pow+0x188>
 8008aaa:	ec47 6b10 	vmov	d0, r6, r7
 8008aae:	b009      	add	sp, #36	; 0x24
 8008ab0:	ecbd 8b06 	vpop	{d8-d10}
 8008ab4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab8:	f7ff be5e 	b.w	8008778 <__ieee754_sqrt>
 8008abc:	2300      	movs	r3, #0
 8008abe:	9304      	str	r3, [sp, #16]
 8008ac0:	ec47 6b10 	vmov	d0, r6, r7
 8008ac4:	f7ff fdf4 	bl	80086b0 <fabs>
 8008ac8:	ec51 0b10 	vmov	r0, r1, d0
 8008acc:	f1ba 0f00 	cmp.w	sl, #0
 8008ad0:	d129      	bne.n	8008b26 <__ieee754_pow+0x1ee>
 8008ad2:	b124      	cbz	r4, 8008ade <__ieee754_pow+0x1a6>
 8008ad4:	4b2f      	ldr	r3, [pc, #188]	; (8008b94 <__ieee754_pow+0x25c>)
 8008ad6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d123      	bne.n	8008b26 <__ieee754_pow+0x1ee>
 8008ade:	f1b9 0f00 	cmp.w	r9, #0
 8008ae2:	da05      	bge.n	8008af0 <__ieee754_pow+0x1b8>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	2000      	movs	r0, #0
 8008aea:	492a      	ldr	r1, [pc, #168]	; (8008b94 <__ieee754_pow+0x25c>)
 8008aec:	f7f7 fed6 	bl	800089c <__aeabi_ddiv>
 8008af0:	2d00      	cmp	r5, #0
 8008af2:	f6bf af40 	bge.w	8008976 <__ieee754_pow+0x3e>
 8008af6:	9b04      	ldr	r3, [sp, #16]
 8008af8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008afc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008b00:	431c      	orrs	r4, r3
 8008b02:	d108      	bne.n	8008b16 <__ieee754_pow+0x1de>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	4610      	mov	r0, r2
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	f7f7 fbe4 	bl	80002d8 <__aeabi_dsub>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	e78f      	b.n	8008a36 <__ieee754_pow+0xfe>
 8008b16:	9b04      	ldr	r3, [sp, #16]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	f47f af2c 	bne.w	8008976 <__ieee754_pow+0x3e>
 8008b1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b22:	4619      	mov	r1, r3
 8008b24:	e727      	b.n	8008976 <__ieee754_pow+0x3e>
 8008b26:	0feb      	lsrs	r3, r5, #31
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	9306      	str	r3, [sp, #24]
 8008b2c:	9a06      	ldr	r2, [sp, #24]
 8008b2e:	9b04      	ldr	r3, [sp, #16]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	d102      	bne.n	8008b3a <__ieee754_pow+0x202>
 8008b34:	4632      	mov	r2, r6
 8008b36:	463b      	mov	r3, r7
 8008b38:	e7e6      	b.n	8008b08 <__ieee754_pow+0x1d0>
 8008b3a:	4b19      	ldr	r3, [pc, #100]	; (8008ba0 <__ieee754_pow+0x268>)
 8008b3c:	4598      	cmp	r8, r3
 8008b3e:	f340 80fb 	ble.w	8008d38 <__ieee754_pow+0x400>
 8008b42:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008b46:	4598      	cmp	r8, r3
 8008b48:	4b13      	ldr	r3, [pc, #76]	; (8008b98 <__ieee754_pow+0x260>)
 8008b4a:	dd0c      	ble.n	8008b66 <__ieee754_pow+0x22e>
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	dc0f      	bgt.n	8008b70 <__ieee754_pow+0x238>
 8008b50:	f1b9 0f00 	cmp.w	r9, #0
 8008b54:	da0f      	bge.n	8008b76 <__ieee754_pow+0x23e>
 8008b56:	2000      	movs	r0, #0
 8008b58:	b009      	add	sp, #36	; 0x24
 8008b5a:	ecbd 8b06 	vpop	{d8-d10}
 8008b5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b62:	f7ff bdff 	b.w	8008764 <__math_oflow>
 8008b66:	429c      	cmp	r4, r3
 8008b68:	dbf2      	blt.n	8008b50 <__ieee754_pow+0x218>
 8008b6a:	4b0a      	ldr	r3, [pc, #40]	; (8008b94 <__ieee754_pow+0x25c>)
 8008b6c:	429c      	cmp	r4, r3
 8008b6e:	dd19      	ble.n	8008ba4 <__ieee754_pow+0x26c>
 8008b70:	f1b9 0f00 	cmp.w	r9, #0
 8008b74:	dcef      	bgt.n	8008b56 <__ieee754_pow+0x21e>
 8008b76:	2000      	movs	r0, #0
 8008b78:	b009      	add	sp, #36	; 0x24
 8008b7a:	ecbd 8b06 	vpop	{d8-d10}
 8008b7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b82:	f7ff bde6 	b.w	8008752 <__math_uflow>
 8008b86:	bf00      	nop
 8008b88:	fff00000 	.word	0xfff00000
 8008b8c:	7ff00000 	.word	0x7ff00000
 8008b90:	433fffff 	.word	0x433fffff
 8008b94:	3ff00000 	.word	0x3ff00000
 8008b98:	3fefffff 	.word	0x3fefffff
 8008b9c:	3fe00000 	.word	0x3fe00000
 8008ba0:	41e00000 	.word	0x41e00000
 8008ba4:	4b60      	ldr	r3, [pc, #384]	; (8008d28 <__ieee754_pow+0x3f0>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f7f7 fb96 	bl	80002d8 <__aeabi_dsub>
 8008bac:	a354      	add	r3, pc, #336	; (adr r3, 8008d00 <__ieee754_pow+0x3c8>)
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	460d      	mov	r5, r1
 8008bb6:	f7f7 fd47 	bl	8000648 <__aeabi_dmul>
 8008bba:	a353      	add	r3, pc, #332	; (adr r3, 8008d08 <__ieee754_pow+0x3d0>)
 8008bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc0:	4606      	mov	r6, r0
 8008bc2:	460f      	mov	r7, r1
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	f7f7 fd3e 	bl	8000648 <__aeabi_dmul>
 8008bcc:	4b57      	ldr	r3, [pc, #348]	; (8008d2c <__ieee754_pow+0x3f4>)
 8008bce:	4682      	mov	sl, r0
 8008bd0:	468b      	mov	fp, r1
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	4629      	mov	r1, r5
 8008bd8:	f7f7 fd36 	bl	8000648 <__aeabi_dmul>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	a14b      	add	r1, pc, #300	; (adr r1, 8008d10 <__ieee754_pow+0x3d8>)
 8008be2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008be6:	f7f7 fb77 	bl	80002d8 <__aeabi_dsub>
 8008bea:	4622      	mov	r2, r4
 8008bec:	462b      	mov	r3, r5
 8008bee:	f7f7 fd2b 	bl	8000648 <__aeabi_dmul>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	494d      	ldr	r1, [pc, #308]	; (8008d30 <__ieee754_pow+0x3f8>)
 8008bfa:	f7f7 fb6d 	bl	80002d8 <__aeabi_dsub>
 8008bfe:	4622      	mov	r2, r4
 8008c00:	4680      	mov	r8, r0
 8008c02:	4689      	mov	r9, r1
 8008c04:	462b      	mov	r3, r5
 8008c06:	4620      	mov	r0, r4
 8008c08:	4629      	mov	r1, r5
 8008c0a:	f7f7 fd1d 	bl	8000648 <__aeabi_dmul>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	4640      	mov	r0, r8
 8008c14:	4649      	mov	r1, r9
 8008c16:	f7f7 fd17 	bl	8000648 <__aeabi_dmul>
 8008c1a:	a33f      	add	r3, pc, #252	; (adr r3, 8008d18 <__ieee754_pow+0x3e0>)
 8008c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c20:	f7f7 fd12 	bl	8000648 <__aeabi_dmul>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	4650      	mov	r0, sl
 8008c2a:	4659      	mov	r1, fp
 8008c2c:	f7f7 fb54 	bl	80002d8 <__aeabi_dsub>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	4680      	mov	r8, r0
 8008c36:	4689      	mov	r9, r1
 8008c38:	4630      	mov	r0, r6
 8008c3a:	4639      	mov	r1, r7
 8008c3c:	f7f7 fb4e 	bl	80002dc <__adddf3>
 8008c40:	2000      	movs	r0, #0
 8008c42:	4632      	mov	r2, r6
 8008c44:	463b      	mov	r3, r7
 8008c46:	4604      	mov	r4, r0
 8008c48:	460d      	mov	r5, r1
 8008c4a:	f7f7 fb45 	bl	80002d8 <__aeabi_dsub>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4640      	mov	r0, r8
 8008c54:	4649      	mov	r1, r9
 8008c56:	f7f7 fb3f 	bl	80002d8 <__aeabi_dsub>
 8008c5a:	9b04      	ldr	r3, [sp, #16]
 8008c5c:	9a06      	ldr	r2, [sp, #24]
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	4313      	orrs	r3, r2
 8008c62:	4682      	mov	sl, r0
 8008c64:	468b      	mov	fp, r1
 8008c66:	f040 81e7 	bne.w	8009038 <__ieee754_pow+0x700>
 8008c6a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008d20 <__ieee754_pow+0x3e8>
 8008c6e:	eeb0 8a47 	vmov.f32	s16, s14
 8008c72:	eef0 8a67 	vmov.f32	s17, s15
 8008c76:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008c7a:	2600      	movs	r6, #0
 8008c7c:	4632      	mov	r2, r6
 8008c7e:	463b      	mov	r3, r7
 8008c80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c84:	f7f7 fb28 	bl	80002d8 <__aeabi_dsub>
 8008c88:	4622      	mov	r2, r4
 8008c8a:	462b      	mov	r3, r5
 8008c8c:	f7f7 fcdc 	bl	8000648 <__aeabi_dmul>
 8008c90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c94:	4680      	mov	r8, r0
 8008c96:	4689      	mov	r9, r1
 8008c98:	4650      	mov	r0, sl
 8008c9a:	4659      	mov	r1, fp
 8008c9c:	f7f7 fcd4 	bl	8000648 <__aeabi_dmul>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	4640      	mov	r0, r8
 8008ca6:	4649      	mov	r1, r9
 8008ca8:	f7f7 fb18 	bl	80002dc <__adddf3>
 8008cac:	4632      	mov	r2, r6
 8008cae:	463b      	mov	r3, r7
 8008cb0:	4680      	mov	r8, r0
 8008cb2:	4689      	mov	r9, r1
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	f7f7 fcc6 	bl	8000648 <__aeabi_dmul>
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	460d      	mov	r5, r1
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	4649      	mov	r1, r9
 8008cc6:	4640      	mov	r0, r8
 8008cc8:	f7f7 fb08 	bl	80002dc <__adddf3>
 8008ccc:	4b19      	ldr	r3, [pc, #100]	; (8008d34 <__ieee754_pow+0x3fc>)
 8008cce:	4299      	cmp	r1, r3
 8008cd0:	ec45 4b19 	vmov	d9, r4, r5
 8008cd4:	4606      	mov	r6, r0
 8008cd6:	460f      	mov	r7, r1
 8008cd8:	468b      	mov	fp, r1
 8008cda:	f340 82f0 	ble.w	80092be <__ieee754_pow+0x986>
 8008cde:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008ce2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008ce6:	4303      	orrs	r3, r0
 8008ce8:	f000 81e4 	beq.w	80090b4 <__ieee754_pow+0x77c>
 8008cec:	ec51 0b18 	vmov	r0, r1, d8
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f7f7 ff1a 	bl	8000b2c <__aeabi_dcmplt>
 8008cf8:	3800      	subs	r0, #0
 8008cfa:	bf18      	it	ne
 8008cfc:	2001      	movne	r0, #1
 8008cfe:	e72b      	b.n	8008b58 <__ieee754_pow+0x220>
 8008d00:	60000000 	.word	0x60000000
 8008d04:	3ff71547 	.word	0x3ff71547
 8008d08:	f85ddf44 	.word	0xf85ddf44
 8008d0c:	3e54ae0b 	.word	0x3e54ae0b
 8008d10:	55555555 	.word	0x55555555
 8008d14:	3fd55555 	.word	0x3fd55555
 8008d18:	652b82fe 	.word	0x652b82fe
 8008d1c:	3ff71547 	.word	0x3ff71547
 8008d20:	00000000 	.word	0x00000000
 8008d24:	bff00000 	.word	0xbff00000
 8008d28:	3ff00000 	.word	0x3ff00000
 8008d2c:	3fd00000 	.word	0x3fd00000
 8008d30:	3fe00000 	.word	0x3fe00000
 8008d34:	408fffff 	.word	0x408fffff
 8008d38:	4bd5      	ldr	r3, [pc, #852]	; (8009090 <__ieee754_pow+0x758>)
 8008d3a:	402b      	ands	r3, r5
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	b92b      	cbnz	r3, 8008d4c <__ieee754_pow+0x414>
 8008d40:	4bd4      	ldr	r3, [pc, #848]	; (8009094 <__ieee754_pow+0x75c>)
 8008d42:	f7f7 fc81 	bl	8000648 <__aeabi_dmul>
 8008d46:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	1523      	asrs	r3, r4, #20
 8008d4e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008d52:	4413      	add	r3, r2
 8008d54:	9305      	str	r3, [sp, #20]
 8008d56:	4bd0      	ldr	r3, [pc, #832]	; (8009098 <__ieee754_pow+0x760>)
 8008d58:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008d5c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008d60:	429c      	cmp	r4, r3
 8008d62:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008d66:	dd08      	ble.n	8008d7a <__ieee754_pow+0x442>
 8008d68:	4bcc      	ldr	r3, [pc, #816]	; (800909c <__ieee754_pow+0x764>)
 8008d6a:	429c      	cmp	r4, r3
 8008d6c:	f340 8162 	ble.w	8009034 <__ieee754_pow+0x6fc>
 8008d70:	9b05      	ldr	r3, [sp, #20]
 8008d72:	3301      	adds	r3, #1
 8008d74:	9305      	str	r3, [sp, #20]
 8008d76:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008d7a:	2400      	movs	r4, #0
 8008d7c:	00e3      	lsls	r3, r4, #3
 8008d7e:	9307      	str	r3, [sp, #28]
 8008d80:	4bc7      	ldr	r3, [pc, #796]	; (80090a0 <__ieee754_pow+0x768>)
 8008d82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d86:	ed93 7b00 	vldr	d7, [r3]
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	ec53 2b17 	vmov	r2, r3, d7
 8008d90:	eeb0 9a47 	vmov.f32	s18, s14
 8008d94:	eef0 9a67 	vmov.f32	s19, s15
 8008d98:	4682      	mov	sl, r0
 8008d9a:	f7f7 fa9d 	bl	80002d8 <__aeabi_dsub>
 8008d9e:	4652      	mov	r2, sl
 8008da0:	4606      	mov	r6, r0
 8008da2:	460f      	mov	r7, r1
 8008da4:	462b      	mov	r3, r5
 8008da6:	ec51 0b19 	vmov	r0, r1, d9
 8008daa:	f7f7 fa97 	bl	80002dc <__adddf3>
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	2000      	movs	r0, #0
 8008db4:	49bb      	ldr	r1, [pc, #748]	; (80090a4 <__ieee754_pow+0x76c>)
 8008db6:	f7f7 fd71 	bl	800089c <__aeabi_ddiv>
 8008dba:	ec41 0b1a 	vmov	d10, r0, r1
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	4639      	mov	r1, r7
 8008dc6:	f7f7 fc3f 	bl	8000648 <__aeabi_dmul>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dd0:	9302      	str	r3, [sp, #8]
 8008dd2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008dd6:	46ab      	mov	fp, r5
 8008dd8:	106d      	asrs	r5, r5, #1
 8008dda:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008dde:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008de2:	ec41 0b18 	vmov	d8, r0, r1
 8008de6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008dea:	2200      	movs	r2, #0
 8008dec:	4640      	mov	r0, r8
 8008dee:	4649      	mov	r1, r9
 8008df0:	4614      	mov	r4, r2
 8008df2:	461d      	mov	r5, r3
 8008df4:	f7f7 fc28 	bl	8000648 <__aeabi_dmul>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	4639      	mov	r1, r7
 8008e00:	f7f7 fa6a 	bl	80002d8 <__aeabi_dsub>
 8008e04:	ec53 2b19 	vmov	r2, r3, d9
 8008e08:	4606      	mov	r6, r0
 8008e0a:	460f      	mov	r7, r1
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	4629      	mov	r1, r5
 8008e10:	f7f7 fa62 	bl	80002d8 <__aeabi_dsub>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	4650      	mov	r0, sl
 8008e1a:	4659      	mov	r1, fp
 8008e1c:	f7f7 fa5c 	bl	80002d8 <__aeabi_dsub>
 8008e20:	4642      	mov	r2, r8
 8008e22:	464b      	mov	r3, r9
 8008e24:	f7f7 fc10 	bl	8000648 <__aeabi_dmul>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	4639      	mov	r1, r7
 8008e30:	f7f7 fa52 	bl	80002d8 <__aeabi_dsub>
 8008e34:	ec53 2b1a 	vmov	r2, r3, d10
 8008e38:	f7f7 fc06 	bl	8000648 <__aeabi_dmul>
 8008e3c:	ec53 2b18 	vmov	r2, r3, d8
 8008e40:	ec41 0b19 	vmov	d9, r0, r1
 8008e44:	ec51 0b18 	vmov	r0, r1, d8
 8008e48:	f7f7 fbfe 	bl	8000648 <__aeabi_dmul>
 8008e4c:	a37c      	add	r3, pc, #496	; (adr r3, 8009040 <__ieee754_pow+0x708>)
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	4604      	mov	r4, r0
 8008e54:	460d      	mov	r5, r1
 8008e56:	f7f7 fbf7 	bl	8000648 <__aeabi_dmul>
 8008e5a:	a37b      	add	r3, pc, #492	; (adr r3, 8009048 <__ieee754_pow+0x710>)
 8008e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e60:	f7f7 fa3c 	bl	80002dc <__adddf3>
 8008e64:	4622      	mov	r2, r4
 8008e66:	462b      	mov	r3, r5
 8008e68:	f7f7 fbee 	bl	8000648 <__aeabi_dmul>
 8008e6c:	a378      	add	r3, pc, #480	; (adr r3, 8009050 <__ieee754_pow+0x718>)
 8008e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e72:	f7f7 fa33 	bl	80002dc <__adddf3>
 8008e76:	4622      	mov	r2, r4
 8008e78:	462b      	mov	r3, r5
 8008e7a:	f7f7 fbe5 	bl	8000648 <__aeabi_dmul>
 8008e7e:	a376      	add	r3, pc, #472	; (adr r3, 8009058 <__ieee754_pow+0x720>)
 8008e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e84:	f7f7 fa2a 	bl	80002dc <__adddf3>
 8008e88:	4622      	mov	r2, r4
 8008e8a:	462b      	mov	r3, r5
 8008e8c:	f7f7 fbdc 	bl	8000648 <__aeabi_dmul>
 8008e90:	a373      	add	r3, pc, #460	; (adr r3, 8009060 <__ieee754_pow+0x728>)
 8008e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e96:	f7f7 fa21 	bl	80002dc <__adddf3>
 8008e9a:	4622      	mov	r2, r4
 8008e9c:	462b      	mov	r3, r5
 8008e9e:	f7f7 fbd3 	bl	8000648 <__aeabi_dmul>
 8008ea2:	a371      	add	r3, pc, #452	; (adr r3, 8009068 <__ieee754_pow+0x730>)
 8008ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea8:	f7f7 fa18 	bl	80002dc <__adddf3>
 8008eac:	4622      	mov	r2, r4
 8008eae:	4606      	mov	r6, r0
 8008eb0:	460f      	mov	r7, r1
 8008eb2:	462b      	mov	r3, r5
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	f7f7 fbc6 	bl	8000648 <__aeabi_dmul>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	4639      	mov	r1, r7
 8008ec4:	f7f7 fbc0 	bl	8000648 <__aeabi_dmul>
 8008ec8:	4642      	mov	r2, r8
 8008eca:	4604      	mov	r4, r0
 8008ecc:	460d      	mov	r5, r1
 8008ece:	464b      	mov	r3, r9
 8008ed0:	ec51 0b18 	vmov	r0, r1, d8
 8008ed4:	f7f7 fa02 	bl	80002dc <__adddf3>
 8008ed8:	ec53 2b19 	vmov	r2, r3, d9
 8008edc:	f7f7 fbb4 	bl	8000648 <__aeabi_dmul>
 8008ee0:	4622      	mov	r2, r4
 8008ee2:	462b      	mov	r3, r5
 8008ee4:	f7f7 f9fa 	bl	80002dc <__adddf3>
 8008ee8:	4642      	mov	r2, r8
 8008eea:	4682      	mov	sl, r0
 8008eec:	468b      	mov	fp, r1
 8008eee:	464b      	mov	r3, r9
 8008ef0:	4640      	mov	r0, r8
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	f7f7 fba8 	bl	8000648 <__aeabi_dmul>
 8008ef8:	4b6b      	ldr	r3, [pc, #428]	; (80090a8 <__ieee754_pow+0x770>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	4606      	mov	r6, r0
 8008efe:	460f      	mov	r7, r1
 8008f00:	f7f7 f9ec 	bl	80002dc <__adddf3>
 8008f04:	4652      	mov	r2, sl
 8008f06:	465b      	mov	r3, fp
 8008f08:	f7f7 f9e8 	bl	80002dc <__adddf3>
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	4604      	mov	r4, r0
 8008f10:	460d      	mov	r5, r1
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	4640      	mov	r0, r8
 8008f18:	4649      	mov	r1, r9
 8008f1a:	f7f7 fb95 	bl	8000648 <__aeabi_dmul>
 8008f1e:	4b62      	ldr	r3, [pc, #392]	; (80090a8 <__ieee754_pow+0x770>)
 8008f20:	4680      	mov	r8, r0
 8008f22:	4689      	mov	r9, r1
 8008f24:	2200      	movs	r2, #0
 8008f26:	4620      	mov	r0, r4
 8008f28:	4629      	mov	r1, r5
 8008f2a:	f7f7 f9d5 	bl	80002d8 <__aeabi_dsub>
 8008f2e:	4632      	mov	r2, r6
 8008f30:	463b      	mov	r3, r7
 8008f32:	f7f7 f9d1 	bl	80002d8 <__aeabi_dsub>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	4650      	mov	r0, sl
 8008f3c:	4659      	mov	r1, fp
 8008f3e:	f7f7 f9cb 	bl	80002d8 <__aeabi_dsub>
 8008f42:	ec53 2b18 	vmov	r2, r3, d8
 8008f46:	f7f7 fb7f 	bl	8000648 <__aeabi_dmul>
 8008f4a:	4622      	mov	r2, r4
 8008f4c:	4606      	mov	r6, r0
 8008f4e:	460f      	mov	r7, r1
 8008f50:	462b      	mov	r3, r5
 8008f52:	ec51 0b19 	vmov	r0, r1, d9
 8008f56:	f7f7 fb77 	bl	8000648 <__aeabi_dmul>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	4630      	mov	r0, r6
 8008f60:	4639      	mov	r1, r7
 8008f62:	f7f7 f9bb 	bl	80002dc <__adddf3>
 8008f66:	4606      	mov	r6, r0
 8008f68:	460f      	mov	r7, r1
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4640      	mov	r0, r8
 8008f70:	4649      	mov	r1, r9
 8008f72:	f7f7 f9b3 	bl	80002dc <__adddf3>
 8008f76:	a33e      	add	r3, pc, #248	; (adr r3, 8009070 <__ieee754_pow+0x738>)
 8008f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	4604      	mov	r4, r0
 8008f80:	460d      	mov	r5, r1
 8008f82:	f7f7 fb61 	bl	8000648 <__aeabi_dmul>
 8008f86:	4642      	mov	r2, r8
 8008f88:	ec41 0b18 	vmov	d8, r0, r1
 8008f8c:	464b      	mov	r3, r9
 8008f8e:	4620      	mov	r0, r4
 8008f90:	4629      	mov	r1, r5
 8008f92:	f7f7 f9a1 	bl	80002d8 <__aeabi_dsub>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	4639      	mov	r1, r7
 8008f9e:	f7f7 f99b 	bl	80002d8 <__aeabi_dsub>
 8008fa2:	a335      	add	r3, pc, #212	; (adr r3, 8009078 <__ieee754_pow+0x740>)
 8008fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa8:	f7f7 fb4e 	bl	8000648 <__aeabi_dmul>
 8008fac:	a334      	add	r3, pc, #208	; (adr r3, 8009080 <__ieee754_pow+0x748>)
 8008fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	460f      	mov	r7, r1
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	4629      	mov	r1, r5
 8008fba:	f7f7 fb45 	bl	8000648 <__aeabi_dmul>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	4639      	mov	r1, r7
 8008fc6:	f7f7 f989 	bl	80002dc <__adddf3>
 8008fca:	9a07      	ldr	r2, [sp, #28]
 8008fcc:	4b37      	ldr	r3, [pc, #220]	; (80090ac <__ieee754_pow+0x774>)
 8008fce:	4413      	add	r3, r2
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	f7f7 f982 	bl	80002dc <__adddf3>
 8008fd8:	4682      	mov	sl, r0
 8008fda:	9805      	ldr	r0, [sp, #20]
 8008fdc:	468b      	mov	fp, r1
 8008fde:	f7f7 fac9 	bl	8000574 <__aeabi_i2d>
 8008fe2:	9a07      	ldr	r2, [sp, #28]
 8008fe4:	4b32      	ldr	r3, [pc, #200]	; (80090b0 <__ieee754_pow+0x778>)
 8008fe6:	4413      	add	r3, r2
 8008fe8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fec:	4606      	mov	r6, r0
 8008fee:	460f      	mov	r7, r1
 8008ff0:	4652      	mov	r2, sl
 8008ff2:	465b      	mov	r3, fp
 8008ff4:	ec51 0b18 	vmov	r0, r1, d8
 8008ff8:	f7f7 f970 	bl	80002dc <__adddf3>
 8008ffc:	4642      	mov	r2, r8
 8008ffe:	464b      	mov	r3, r9
 8009000:	f7f7 f96c 	bl	80002dc <__adddf3>
 8009004:	4632      	mov	r2, r6
 8009006:	463b      	mov	r3, r7
 8009008:	f7f7 f968 	bl	80002dc <__adddf3>
 800900c:	2000      	movs	r0, #0
 800900e:	4632      	mov	r2, r6
 8009010:	463b      	mov	r3, r7
 8009012:	4604      	mov	r4, r0
 8009014:	460d      	mov	r5, r1
 8009016:	f7f7 f95f 	bl	80002d8 <__aeabi_dsub>
 800901a:	4642      	mov	r2, r8
 800901c:	464b      	mov	r3, r9
 800901e:	f7f7 f95b 	bl	80002d8 <__aeabi_dsub>
 8009022:	ec53 2b18 	vmov	r2, r3, d8
 8009026:	f7f7 f957 	bl	80002d8 <__aeabi_dsub>
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	4650      	mov	r0, sl
 8009030:	4659      	mov	r1, fp
 8009032:	e610      	b.n	8008c56 <__ieee754_pow+0x31e>
 8009034:	2401      	movs	r4, #1
 8009036:	e6a1      	b.n	8008d7c <__ieee754_pow+0x444>
 8009038:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009088 <__ieee754_pow+0x750>
 800903c:	e617      	b.n	8008c6e <__ieee754_pow+0x336>
 800903e:	bf00      	nop
 8009040:	4a454eef 	.word	0x4a454eef
 8009044:	3fca7e28 	.word	0x3fca7e28
 8009048:	93c9db65 	.word	0x93c9db65
 800904c:	3fcd864a 	.word	0x3fcd864a
 8009050:	a91d4101 	.word	0xa91d4101
 8009054:	3fd17460 	.word	0x3fd17460
 8009058:	518f264d 	.word	0x518f264d
 800905c:	3fd55555 	.word	0x3fd55555
 8009060:	db6fabff 	.word	0xdb6fabff
 8009064:	3fdb6db6 	.word	0x3fdb6db6
 8009068:	33333303 	.word	0x33333303
 800906c:	3fe33333 	.word	0x3fe33333
 8009070:	e0000000 	.word	0xe0000000
 8009074:	3feec709 	.word	0x3feec709
 8009078:	dc3a03fd 	.word	0xdc3a03fd
 800907c:	3feec709 	.word	0x3feec709
 8009080:	145b01f5 	.word	0x145b01f5
 8009084:	be3e2fe0 	.word	0xbe3e2fe0
 8009088:	00000000 	.word	0x00000000
 800908c:	3ff00000 	.word	0x3ff00000
 8009090:	7ff00000 	.word	0x7ff00000
 8009094:	43400000 	.word	0x43400000
 8009098:	0003988e 	.word	0x0003988e
 800909c:	000bb679 	.word	0x000bb679
 80090a0:	0801f358 	.word	0x0801f358
 80090a4:	3ff00000 	.word	0x3ff00000
 80090a8:	40080000 	.word	0x40080000
 80090ac:	0801f378 	.word	0x0801f378
 80090b0:	0801f368 	.word	0x0801f368
 80090b4:	a3b3      	add	r3, pc, #716	; (adr r3, 8009384 <__ieee754_pow+0xa4c>)
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	4640      	mov	r0, r8
 80090bc:	4649      	mov	r1, r9
 80090be:	f7f7 f90d 	bl	80002dc <__adddf3>
 80090c2:	4622      	mov	r2, r4
 80090c4:	ec41 0b1a 	vmov	d10, r0, r1
 80090c8:	462b      	mov	r3, r5
 80090ca:	4630      	mov	r0, r6
 80090cc:	4639      	mov	r1, r7
 80090ce:	f7f7 f903 	bl	80002d8 <__aeabi_dsub>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	ec51 0b1a 	vmov	r0, r1, d10
 80090da:	f7f7 fd45 	bl	8000b68 <__aeabi_dcmpgt>
 80090de:	2800      	cmp	r0, #0
 80090e0:	f47f ae04 	bne.w	8008cec <__ieee754_pow+0x3b4>
 80090e4:	4aa2      	ldr	r2, [pc, #648]	; (8009370 <__ieee754_pow+0xa38>)
 80090e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80090ea:	4293      	cmp	r3, r2
 80090ec:	f340 8107 	ble.w	80092fe <__ieee754_pow+0x9c6>
 80090f0:	151b      	asrs	r3, r3, #20
 80090f2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80090f6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80090fa:	fa4a fa03 	asr.w	sl, sl, r3
 80090fe:	44da      	add	sl, fp
 8009100:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009104:	489b      	ldr	r0, [pc, #620]	; (8009374 <__ieee754_pow+0xa3c>)
 8009106:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800910a:	4108      	asrs	r0, r1
 800910c:	ea00 030a 	and.w	r3, r0, sl
 8009110:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009114:	f1c1 0114 	rsb	r1, r1, #20
 8009118:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800911c:	fa4a fa01 	asr.w	sl, sl, r1
 8009120:	f1bb 0f00 	cmp.w	fp, #0
 8009124:	f04f 0200 	mov.w	r2, #0
 8009128:	4620      	mov	r0, r4
 800912a:	4629      	mov	r1, r5
 800912c:	bfb8      	it	lt
 800912e:	f1ca 0a00 	rsblt	sl, sl, #0
 8009132:	f7f7 f8d1 	bl	80002d8 <__aeabi_dsub>
 8009136:	ec41 0b19 	vmov	d9, r0, r1
 800913a:	4642      	mov	r2, r8
 800913c:	464b      	mov	r3, r9
 800913e:	ec51 0b19 	vmov	r0, r1, d9
 8009142:	f7f7 f8cb 	bl	80002dc <__adddf3>
 8009146:	a37a      	add	r3, pc, #488	; (adr r3, 8009330 <__ieee754_pow+0x9f8>)
 8009148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914c:	2000      	movs	r0, #0
 800914e:	4604      	mov	r4, r0
 8009150:	460d      	mov	r5, r1
 8009152:	f7f7 fa79 	bl	8000648 <__aeabi_dmul>
 8009156:	ec53 2b19 	vmov	r2, r3, d9
 800915a:	4606      	mov	r6, r0
 800915c:	460f      	mov	r7, r1
 800915e:	4620      	mov	r0, r4
 8009160:	4629      	mov	r1, r5
 8009162:	f7f7 f8b9 	bl	80002d8 <__aeabi_dsub>
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	4640      	mov	r0, r8
 800916c:	4649      	mov	r1, r9
 800916e:	f7f7 f8b3 	bl	80002d8 <__aeabi_dsub>
 8009172:	a371      	add	r3, pc, #452	; (adr r3, 8009338 <__ieee754_pow+0xa00>)
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	f7f7 fa66 	bl	8000648 <__aeabi_dmul>
 800917c:	a370      	add	r3, pc, #448	; (adr r3, 8009340 <__ieee754_pow+0xa08>)
 800917e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009182:	4680      	mov	r8, r0
 8009184:	4689      	mov	r9, r1
 8009186:	4620      	mov	r0, r4
 8009188:	4629      	mov	r1, r5
 800918a:	f7f7 fa5d 	bl	8000648 <__aeabi_dmul>
 800918e:	4602      	mov	r2, r0
 8009190:	460b      	mov	r3, r1
 8009192:	4640      	mov	r0, r8
 8009194:	4649      	mov	r1, r9
 8009196:	f7f7 f8a1 	bl	80002dc <__adddf3>
 800919a:	4604      	mov	r4, r0
 800919c:	460d      	mov	r5, r1
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	4630      	mov	r0, r6
 80091a4:	4639      	mov	r1, r7
 80091a6:	f7f7 f899 	bl	80002dc <__adddf3>
 80091aa:	4632      	mov	r2, r6
 80091ac:	463b      	mov	r3, r7
 80091ae:	4680      	mov	r8, r0
 80091b0:	4689      	mov	r9, r1
 80091b2:	f7f7 f891 	bl	80002d8 <__aeabi_dsub>
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	4620      	mov	r0, r4
 80091bc:	4629      	mov	r1, r5
 80091be:	f7f7 f88b 	bl	80002d8 <__aeabi_dsub>
 80091c2:	4642      	mov	r2, r8
 80091c4:	4606      	mov	r6, r0
 80091c6:	460f      	mov	r7, r1
 80091c8:	464b      	mov	r3, r9
 80091ca:	4640      	mov	r0, r8
 80091cc:	4649      	mov	r1, r9
 80091ce:	f7f7 fa3b 	bl	8000648 <__aeabi_dmul>
 80091d2:	a35d      	add	r3, pc, #372	; (adr r3, 8009348 <__ieee754_pow+0xa10>)
 80091d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d8:	4604      	mov	r4, r0
 80091da:	460d      	mov	r5, r1
 80091dc:	f7f7 fa34 	bl	8000648 <__aeabi_dmul>
 80091e0:	a35b      	add	r3, pc, #364	; (adr r3, 8009350 <__ieee754_pow+0xa18>)
 80091e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e6:	f7f7 f877 	bl	80002d8 <__aeabi_dsub>
 80091ea:	4622      	mov	r2, r4
 80091ec:	462b      	mov	r3, r5
 80091ee:	f7f7 fa2b 	bl	8000648 <__aeabi_dmul>
 80091f2:	a359      	add	r3, pc, #356	; (adr r3, 8009358 <__ieee754_pow+0xa20>)
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	f7f7 f870 	bl	80002dc <__adddf3>
 80091fc:	4622      	mov	r2, r4
 80091fe:	462b      	mov	r3, r5
 8009200:	f7f7 fa22 	bl	8000648 <__aeabi_dmul>
 8009204:	a356      	add	r3, pc, #344	; (adr r3, 8009360 <__ieee754_pow+0xa28>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7f7 f865 	bl	80002d8 <__aeabi_dsub>
 800920e:	4622      	mov	r2, r4
 8009210:	462b      	mov	r3, r5
 8009212:	f7f7 fa19 	bl	8000648 <__aeabi_dmul>
 8009216:	a354      	add	r3, pc, #336	; (adr r3, 8009368 <__ieee754_pow+0xa30>)
 8009218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921c:	f7f7 f85e 	bl	80002dc <__adddf3>
 8009220:	4622      	mov	r2, r4
 8009222:	462b      	mov	r3, r5
 8009224:	f7f7 fa10 	bl	8000648 <__aeabi_dmul>
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	4640      	mov	r0, r8
 800922e:	4649      	mov	r1, r9
 8009230:	f7f7 f852 	bl	80002d8 <__aeabi_dsub>
 8009234:	4604      	mov	r4, r0
 8009236:	460d      	mov	r5, r1
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	4640      	mov	r0, r8
 800923e:	4649      	mov	r1, r9
 8009240:	f7f7 fa02 	bl	8000648 <__aeabi_dmul>
 8009244:	2200      	movs	r2, #0
 8009246:	ec41 0b19 	vmov	d9, r0, r1
 800924a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800924e:	4620      	mov	r0, r4
 8009250:	4629      	mov	r1, r5
 8009252:	f7f7 f841 	bl	80002d8 <__aeabi_dsub>
 8009256:	4602      	mov	r2, r0
 8009258:	460b      	mov	r3, r1
 800925a:	ec51 0b19 	vmov	r0, r1, d9
 800925e:	f7f7 fb1d 	bl	800089c <__aeabi_ddiv>
 8009262:	4632      	mov	r2, r6
 8009264:	4604      	mov	r4, r0
 8009266:	460d      	mov	r5, r1
 8009268:	463b      	mov	r3, r7
 800926a:	4640      	mov	r0, r8
 800926c:	4649      	mov	r1, r9
 800926e:	f7f7 f9eb 	bl	8000648 <__aeabi_dmul>
 8009272:	4632      	mov	r2, r6
 8009274:	463b      	mov	r3, r7
 8009276:	f7f7 f831 	bl	80002dc <__adddf3>
 800927a:	4602      	mov	r2, r0
 800927c:	460b      	mov	r3, r1
 800927e:	4620      	mov	r0, r4
 8009280:	4629      	mov	r1, r5
 8009282:	f7f7 f829 	bl	80002d8 <__aeabi_dsub>
 8009286:	4642      	mov	r2, r8
 8009288:	464b      	mov	r3, r9
 800928a:	f7f7 f825 	bl	80002d8 <__aeabi_dsub>
 800928e:	460b      	mov	r3, r1
 8009290:	4602      	mov	r2, r0
 8009292:	4939      	ldr	r1, [pc, #228]	; (8009378 <__ieee754_pow+0xa40>)
 8009294:	2000      	movs	r0, #0
 8009296:	f7f7 f81f 	bl	80002d8 <__aeabi_dsub>
 800929a:	ec41 0b10 	vmov	d0, r0, r1
 800929e:	ee10 3a90 	vmov	r3, s1
 80092a2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80092a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092aa:	da2b      	bge.n	8009304 <__ieee754_pow+0x9cc>
 80092ac:	4650      	mov	r0, sl
 80092ae:	f000 f86f 	bl	8009390 <scalbn>
 80092b2:	ec51 0b10 	vmov	r0, r1, d0
 80092b6:	ec53 2b18 	vmov	r2, r3, d8
 80092ba:	f7ff bbee 	b.w	8008a9a <__ieee754_pow+0x162>
 80092be:	4b2f      	ldr	r3, [pc, #188]	; (800937c <__ieee754_pow+0xa44>)
 80092c0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80092c4:	429e      	cmp	r6, r3
 80092c6:	f77f af0d 	ble.w	80090e4 <__ieee754_pow+0x7ac>
 80092ca:	4b2d      	ldr	r3, [pc, #180]	; (8009380 <__ieee754_pow+0xa48>)
 80092cc:	440b      	add	r3, r1
 80092ce:	4303      	orrs	r3, r0
 80092d0:	d009      	beq.n	80092e6 <__ieee754_pow+0x9ae>
 80092d2:	ec51 0b18 	vmov	r0, r1, d8
 80092d6:	2200      	movs	r2, #0
 80092d8:	2300      	movs	r3, #0
 80092da:	f7f7 fc27 	bl	8000b2c <__aeabi_dcmplt>
 80092de:	3800      	subs	r0, #0
 80092e0:	bf18      	it	ne
 80092e2:	2001      	movne	r0, #1
 80092e4:	e448      	b.n	8008b78 <__ieee754_pow+0x240>
 80092e6:	4622      	mov	r2, r4
 80092e8:	462b      	mov	r3, r5
 80092ea:	f7f6 fff5 	bl	80002d8 <__aeabi_dsub>
 80092ee:	4642      	mov	r2, r8
 80092f0:	464b      	mov	r3, r9
 80092f2:	f7f7 fc2f 	bl	8000b54 <__aeabi_dcmpge>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f43f aef4 	beq.w	80090e4 <__ieee754_pow+0x7ac>
 80092fc:	e7e9      	b.n	80092d2 <__ieee754_pow+0x99a>
 80092fe:	f04f 0a00 	mov.w	sl, #0
 8009302:	e71a      	b.n	800913a <__ieee754_pow+0x802>
 8009304:	ec51 0b10 	vmov	r0, r1, d0
 8009308:	4619      	mov	r1, r3
 800930a:	e7d4      	b.n	80092b6 <__ieee754_pow+0x97e>
 800930c:	491a      	ldr	r1, [pc, #104]	; (8009378 <__ieee754_pow+0xa40>)
 800930e:	2000      	movs	r0, #0
 8009310:	f7ff bb31 	b.w	8008976 <__ieee754_pow+0x3e>
 8009314:	2000      	movs	r0, #0
 8009316:	2100      	movs	r1, #0
 8009318:	f7ff bb2d 	b.w	8008976 <__ieee754_pow+0x3e>
 800931c:	4630      	mov	r0, r6
 800931e:	4639      	mov	r1, r7
 8009320:	f7ff bb29 	b.w	8008976 <__ieee754_pow+0x3e>
 8009324:	9204      	str	r2, [sp, #16]
 8009326:	f7ff bb7b 	b.w	8008a20 <__ieee754_pow+0xe8>
 800932a:	2300      	movs	r3, #0
 800932c:	f7ff bb65 	b.w	80089fa <__ieee754_pow+0xc2>
 8009330:	00000000 	.word	0x00000000
 8009334:	3fe62e43 	.word	0x3fe62e43
 8009338:	fefa39ef 	.word	0xfefa39ef
 800933c:	3fe62e42 	.word	0x3fe62e42
 8009340:	0ca86c39 	.word	0x0ca86c39
 8009344:	be205c61 	.word	0xbe205c61
 8009348:	72bea4d0 	.word	0x72bea4d0
 800934c:	3e663769 	.word	0x3e663769
 8009350:	c5d26bf1 	.word	0xc5d26bf1
 8009354:	3ebbbd41 	.word	0x3ebbbd41
 8009358:	af25de2c 	.word	0xaf25de2c
 800935c:	3f11566a 	.word	0x3f11566a
 8009360:	16bebd93 	.word	0x16bebd93
 8009364:	3f66c16c 	.word	0x3f66c16c
 8009368:	5555553e 	.word	0x5555553e
 800936c:	3fc55555 	.word	0x3fc55555
 8009370:	3fe00000 	.word	0x3fe00000
 8009374:	fff00000 	.word	0xfff00000
 8009378:	3ff00000 	.word	0x3ff00000
 800937c:	4090cbff 	.word	0x4090cbff
 8009380:	3f6f3400 	.word	0x3f6f3400
 8009384:	652b82fe 	.word	0x652b82fe
 8009388:	3c971547 	.word	0x3c971547
 800938c:	00000000 	.word	0x00000000

08009390 <scalbn>:
 8009390:	b570      	push	{r4, r5, r6, lr}
 8009392:	ec55 4b10 	vmov	r4, r5, d0
 8009396:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800939a:	4606      	mov	r6, r0
 800939c:	462b      	mov	r3, r5
 800939e:	b999      	cbnz	r1, 80093c8 <scalbn+0x38>
 80093a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80093a4:	4323      	orrs	r3, r4
 80093a6:	d03f      	beq.n	8009428 <scalbn+0x98>
 80093a8:	4b35      	ldr	r3, [pc, #212]	; (8009480 <scalbn+0xf0>)
 80093aa:	4629      	mov	r1, r5
 80093ac:	ee10 0a10 	vmov	r0, s0
 80093b0:	2200      	movs	r2, #0
 80093b2:	f7f7 f949 	bl	8000648 <__aeabi_dmul>
 80093b6:	4b33      	ldr	r3, [pc, #204]	; (8009484 <scalbn+0xf4>)
 80093b8:	429e      	cmp	r6, r3
 80093ba:	4604      	mov	r4, r0
 80093bc:	460d      	mov	r5, r1
 80093be:	da10      	bge.n	80093e2 <scalbn+0x52>
 80093c0:	a327      	add	r3, pc, #156	; (adr r3, 8009460 <scalbn+0xd0>)
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	e01f      	b.n	8009408 <scalbn+0x78>
 80093c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80093cc:	4291      	cmp	r1, r2
 80093ce:	d10c      	bne.n	80093ea <scalbn+0x5a>
 80093d0:	ee10 2a10 	vmov	r2, s0
 80093d4:	4620      	mov	r0, r4
 80093d6:	4629      	mov	r1, r5
 80093d8:	f7f6 ff80 	bl	80002dc <__adddf3>
 80093dc:	4604      	mov	r4, r0
 80093de:	460d      	mov	r5, r1
 80093e0:	e022      	b.n	8009428 <scalbn+0x98>
 80093e2:	460b      	mov	r3, r1
 80093e4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80093e8:	3936      	subs	r1, #54	; 0x36
 80093ea:	f24c 3250 	movw	r2, #50000	; 0xc350
 80093ee:	4296      	cmp	r6, r2
 80093f0:	dd0d      	ble.n	800940e <scalbn+0x7e>
 80093f2:	2d00      	cmp	r5, #0
 80093f4:	a11c      	add	r1, pc, #112	; (adr r1, 8009468 <scalbn+0xd8>)
 80093f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093fa:	da02      	bge.n	8009402 <scalbn+0x72>
 80093fc:	a11c      	add	r1, pc, #112	; (adr r1, 8009470 <scalbn+0xe0>)
 80093fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009402:	a319      	add	r3, pc, #100	; (adr r3, 8009468 <scalbn+0xd8>)
 8009404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009408:	f7f7 f91e 	bl	8000648 <__aeabi_dmul>
 800940c:	e7e6      	b.n	80093dc <scalbn+0x4c>
 800940e:	1872      	adds	r2, r6, r1
 8009410:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009414:	428a      	cmp	r2, r1
 8009416:	dcec      	bgt.n	80093f2 <scalbn+0x62>
 8009418:	2a00      	cmp	r2, #0
 800941a:	dd08      	ble.n	800942e <scalbn+0x9e>
 800941c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009420:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009424:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009428:	ec45 4b10 	vmov	d0, r4, r5
 800942c:	bd70      	pop	{r4, r5, r6, pc}
 800942e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009432:	da08      	bge.n	8009446 <scalbn+0xb6>
 8009434:	2d00      	cmp	r5, #0
 8009436:	a10a      	add	r1, pc, #40	; (adr r1, 8009460 <scalbn+0xd0>)
 8009438:	e9d1 0100 	ldrd	r0, r1, [r1]
 800943c:	dac0      	bge.n	80093c0 <scalbn+0x30>
 800943e:	a10e      	add	r1, pc, #56	; (adr r1, 8009478 <scalbn+0xe8>)
 8009440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009444:	e7bc      	b.n	80093c0 <scalbn+0x30>
 8009446:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800944a:	3236      	adds	r2, #54	; 0x36
 800944c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009450:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009454:	4620      	mov	r0, r4
 8009456:	4b0c      	ldr	r3, [pc, #48]	; (8009488 <scalbn+0xf8>)
 8009458:	2200      	movs	r2, #0
 800945a:	e7d5      	b.n	8009408 <scalbn+0x78>
 800945c:	f3af 8000 	nop.w
 8009460:	c2f8f359 	.word	0xc2f8f359
 8009464:	01a56e1f 	.word	0x01a56e1f
 8009468:	8800759c 	.word	0x8800759c
 800946c:	7e37e43c 	.word	0x7e37e43c
 8009470:	8800759c 	.word	0x8800759c
 8009474:	fe37e43c 	.word	0xfe37e43c
 8009478:	c2f8f359 	.word	0xc2f8f359
 800947c:	81a56e1f 	.word	0x81a56e1f
 8009480:	43500000 	.word	0x43500000
 8009484:	ffff3cb0 	.word	0xffff3cb0
 8009488:	3c900000 	.word	0x3c900000

0800948c <abort>:
 800948c:	b508      	push	{r3, lr}
 800948e:	2006      	movs	r0, #6
 8009490:	f001 f80c 	bl	800a4ac <raise>
 8009494:	2001      	movs	r0, #1
 8009496:	f7f9 f93f 	bl	8002718 <_exit>
	...

0800949c <malloc>:
 800949c:	4b02      	ldr	r3, [pc, #8]	; (80094a8 <malloc+0xc>)
 800949e:	4601      	mov	r1, r0
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	f000 b823 	b.w	80094ec <_malloc_r>
 80094a6:	bf00      	nop
 80094a8:	200001ec 	.word	0x200001ec

080094ac <sbrk_aligned>:
 80094ac:	b570      	push	{r4, r5, r6, lr}
 80094ae:	4e0e      	ldr	r6, [pc, #56]	; (80094e8 <sbrk_aligned+0x3c>)
 80094b0:	460c      	mov	r4, r1
 80094b2:	6831      	ldr	r1, [r6, #0]
 80094b4:	4605      	mov	r5, r0
 80094b6:	b911      	cbnz	r1, 80094be <sbrk_aligned+0x12>
 80094b8:	f001 f84c 	bl	800a554 <_sbrk_r>
 80094bc:	6030      	str	r0, [r6, #0]
 80094be:	4621      	mov	r1, r4
 80094c0:	4628      	mov	r0, r5
 80094c2:	f001 f847 	bl	800a554 <_sbrk_r>
 80094c6:	1c43      	adds	r3, r0, #1
 80094c8:	d00a      	beq.n	80094e0 <sbrk_aligned+0x34>
 80094ca:	1cc4      	adds	r4, r0, #3
 80094cc:	f024 0403 	bic.w	r4, r4, #3
 80094d0:	42a0      	cmp	r0, r4
 80094d2:	d007      	beq.n	80094e4 <sbrk_aligned+0x38>
 80094d4:	1a21      	subs	r1, r4, r0
 80094d6:	4628      	mov	r0, r5
 80094d8:	f001 f83c 	bl	800a554 <_sbrk_r>
 80094dc:	3001      	adds	r0, #1
 80094de:	d101      	bne.n	80094e4 <sbrk_aligned+0x38>
 80094e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80094e4:	4620      	mov	r0, r4
 80094e6:	bd70      	pop	{r4, r5, r6, pc}
 80094e8:	20014708 	.word	0x20014708

080094ec <_malloc_r>:
 80094ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094f0:	1ccd      	adds	r5, r1, #3
 80094f2:	f025 0503 	bic.w	r5, r5, #3
 80094f6:	3508      	adds	r5, #8
 80094f8:	2d0c      	cmp	r5, #12
 80094fa:	bf38      	it	cc
 80094fc:	250c      	movcc	r5, #12
 80094fe:	2d00      	cmp	r5, #0
 8009500:	4607      	mov	r7, r0
 8009502:	db01      	blt.n	8009508 <_malloc_r+0x1c>
 8009504:	42a9      	cmp	r1, r5
 8009506:	d905      	bls.n	8009514 <_malloc_r+0x28>
 8009508:	230c      	movs	r3, #12
 800950a:	603b      	str	r3, [r7, #0]
 800950c:	2600      	movs	r6, #0
 800950e:	4630      	mov	r0, r6
 8009510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009514:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80095e8 <_malloc_r+0xfc>
 8009518:	f000 f868 	bl	80095ec <__malloc_lock>
 800951c:	f8d8 3000 	ldr.w	r3, [r8]
 8009520:	461c      	mov	r4, r3
 8009522:	bb5c      	cbnz	r4, 800957c <_malloc_r+0x90>
 8009524:	4629      	mov	r1, r5
 8009526:	4638      	mov	r0, r7
 8009528:	f7ff ffc0 	bl	80094ac <sbrk_aligned>
 800952c:	1c43      	adds	r3, r0, #1
 800952e:	4604      	mov	r4, r0
 8009530:	d155      	bne.n	80095de <_malloc_r+0xf2>
 8009532:	f8d8 4000 	ldr.w	r4, [r8]
 8009536:	4626      	mov	r6, r4
 8009538:	2e00      	cmp	r6, #0
 800953a:	d145      	bne.n	80095c8 <_malloc_r+0xdc>
 800953c:	2c00      	cmp	r4, #0
 800953e:	d048      	beq.n	80095d2 <_malloc_r+0xe6>
 8009540:	6823      	ldr	r3, [r4, #0]
 8009542:	4631      	mov	r1, r6
 8009544:	4638      	mov	r0, r7
 8009546:	eb04 0903 	add.w	r9, r4, r3
 800954a:	f001 f803 	bl	800a554 <_sbrk_r>
 800954e:	4581      	cmp	r9, r0
 8009550:	d13f      	bne.n	80095d2 <_malloc_r+0xe6>
 8009552:	6821      	ldr	r1, [r4, #0]
 8009554:	1a6d      	subs	r5, r5, r1
 8009556:	4629      	mov	r1, r5
 8009558:	4638      	mov	r0, r7
 800955a:	f7ff ffa7 	bl	80094ac <sbrk_aligned>
 800955e:	3001      	adds	r0, #1
 8009560:	d037      	beq.n	80095d2 <_malloc_r+0xe6>
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	442b      	add	r3, r5
 8009566:	6023      	str	r3, [r4, #0]
 8009568:	f8d8 3000 	ldr.w	r3, [r8]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d038      	beq.n	80095e2 <_malloc_r+0xf6>
 8009570:	685a      	ldr	r2, [r3, #4]
 8009572:	42a2      	cmp	r2, r4
 8009574:	d12b      	bne.n	80095ce <_malloc_r+0xe2>
 8009576:	2200      	movs	r2, #0
 8009578:	605a      	str	r2, [r3, #4]
 800957a:	e00f      	b.n	800959c <_malloc_r+0xb0>
 800957c:	6822      	ldr	r2, [r4, #0]
 800957e:	1b52      	subs	r2, r2, r5
 8009580:	d41f      	bmi.n	80095c2 <_malloc_r+0xd6>
 8009582:	2a0b      	cmp	r2, #11
 8009584:	d917      	bls.n	80095b6 <_malloc_r+0xca>
 8009586:	1961      	adds	r1, r4, r5
 8009588:	42a3      	cmp	r3, r4
 800958a:	6025      	str	r5, [r4, #0]
 800958c:	bf18      	it	ne
 800958e:	6059      	strne	r1, [r3, #4]
 8009590:	6863      	ldr	r3, [r4, #4]
 8009592:	bf08      	it	eq
 8009594:	f8c8 1000 	streq.w	r1, [r8]
 8009598:	5162      	str	r2, [r4, r5]
 800959a:	604b      	str	r3, [r1, #4]
 800959c:	4638      	mov	r0, r7
 800959e:	f104 060b 	add.w	r6, r4, #11
 80095a2:	f000 f829 	bl	80095f8 <__malloc_unlock>
 80095a6:	f026 0607 	bic.w	r6, r6, #7
 80095aa:	1d23      	adds	r3, r4, #4
 80095ac:	1af2      	subs	r2, r6, r3
 80095ae:	d0ae      	beq.n	800950e <_malloc_r+0x22>
 80095b0:	1b9b      	subs	r3, r3, r6
 80095b2:	50a3      	str	r3, [r4, r2]
 80095b4:	e7ab      	b.n	800950e <_malloc_r+0x22>
 80095b6:	42a3      	cmp	r3, r4
 80095b8:	6862      	ldr	r2, [r4, #4]
 80095ba:	d1dd      	bne.n	8009578 <_malloc_r+0x8c>
 80095bc:	f8c8 2000 	str.w	r2, [r8]
 80095c0:	e7ec      	b.n	800959c <_malloc_r+0xb0>
 80095c2:	4623      	mov	r3, r4
 80095c4:	6864      	ldr	r4, [r4, #4]
 80095c6:	e7ac      	b.n	8009522 <_malloc_r+0x36>
 80095c8:	4634      	mov	r4, r6
 80095ca:	6876      	ldr	r6, [r6, #4]
 80095cc:	e7b4      	b.n	8009538 <_malloc_r+0x4c>
 80095ce:	4613      	mov	r3, r2
 80095d0:	e7cc      	b.n	800956c <_malloc_r+0x80>
 80095d2:	230c      	movs	r3, #12
 80095d4:	603b      	str	r3, [r7, #0]
 80095d6:	4638      	mov	r0, r7
 80095d8:	f000 f80e 	bl	80095f8 <__malloc_unlock>
 80095dc:	e797      	b.n	800950e <_malloc_r+0x22>
 80095de:	6025      	str	r5, [r4, #0]
 80095e0:	e7dc      	b.n	800959c <_malloc_r+0xb0>
 80095e2:	605b      	str	r3, [r3, #4]
 80095e4:	deff      	udf	#255	; 0xff
 80095e6:	bf00      	nop
 80095e8:	20014704 	.word	0x20014704

080095ec <__malloc_lock>:
 80095ec:	4801      	ldr	r0, [pc, #4]	; (80095f4 <__malloc_lock+0x8>)
 80095ee:	f000 bffe 	b.w	800a5ee <__retarget_lock_acquire_recursive>
 80095f2:	bf00      	nop
 80095f4:	2001484c 	.word	0x2001484c

080095f8 <__malloc_unlock>:
 80095f8:	4801      	ldr	r0, [pc, #4]	; (8009600 <__malloc_unlock+0x8>)
 80095fa:	f000 bff9 	b.w	800a5f0 <__retarget_lock_release_recursive>
 80095fe:	bf00      	nop
 8009600:	2001484c 	.word	0x2001484c

08009604 <_realloc_r>:
 8009604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009608:	4680      	mov	r8, r0
 800960a:	4614      	mov	r4, r2
 800960c:	460e      	mov	r6, r1
 800960e:	b921      	cbnz	r1, 800961a <_realloc_r+0x16>
 8009610:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009614:	4611      	mov	r1, r2
 8009616:	f7ff bf69 	b.w	80094ec <_malloc_r>
 800961a:	b92a      	cbnz	r2, 8009628 <_realloc_r+0x24>
 800961c:	f001 fe92 	bl	800b344 <_free_r>
 8009620:	4625      	mov	r5, r4
 8009622:	4628      	mov	r0, r5
 8009624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009628:	f002 fa66 	bl	800baf8 <_malloc_usable_size_r>
 800962c:	4284      	cmp	r4, r0
 800962e:	4607      	mov	r7, r0
 8009630:	d802      	bhi.n	8009638 <_realloc_r+0x34>
 8009632:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009636:	d812      	bhi.n	800965e <_realloc_r+0x5a>
 8009638:	4621      	mov	r1, r4
 800963a:	4640      	mov	r0, r8
 800963c:	f7ff ff56 	bl	80094ec <_malloc_r>
 8009640:	4605      	mov	r5, r0
 8009642:	2800      	cmp	r0, #0
 8009644:	d0ed      	beq.n	8009622 <_realloc_r+0x1e>
 8009646:	42bc      	cmp	r4, r7
 8009648:	4622      	mov	r2, r4
 800964a:	4631      	mov	r1, r6
 800964c:	bf28      	it	cs
 800964e:	463a      	movcs	r2, r7
 8009650:	f000 ffcf 	bl	800a5f2 <memcpy>
 8009654:	4631      	mov	r1, r6
 8009656:	4640      	mov	r0, r8
 8009658:	f001 fe74 	bl	800b344 <_free_r>
 800965c:	e7e1      	b.n	8009622 <_realloc_r+0x1e>
 800965e:	4635      	mov	r5, r6
 8009660:	e7df      	b.n	8009622 <_realloc_r+0x1e>

08009662 <__cvt>:
 8009662:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009666:	ec55 4b10 	vmov	r4, r5, d0
 800966a:	2d00      	cmp	r5, #0
 800966c:	460e      	mov	r6, r1
 800966e:	4619      	mov	r1, r3
 8009670:	462b      	mov	r3, r5
 8009672:	bfbb      	ittet	lt
 8009674:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009678:	461d      	movlt	r5, r3
 800967a:	2300      	movge	r3, #0
 800967c:	232d      	movlt	r3, #45	; 0x2d
 800967e:	700b      	strb	r3, [r1, #0]
 8009680:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009682:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009686:	4691      	mov	r9, r2
 8009688:	f023 0820 	bic.w	r8, r3, #32
 800968c:	bfbc      	itt	lt
 800968e:	4622      	movlt	r2, r4
 8009690:	4614      	movlt	r4, r2
 8009692:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009696:	d005      	beq.n	80096a4 <__cvt+0x42>
 8009698:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800969c:	d100      	bne.n	80096a0 <__cvt+0x3e>
 800969e:	3601      	adds	r6, #1
 80096a0:	2102      	movs	r1, #2
 80096a2:	e000      	b.n	80096a6 <__cvt+0x44>
 80096a4:	2103      	movs	r1, #3
 80096a6:	ab03      	add	r3, sp, #12
 80096a8:	9301      	str	r3, [sp, #4]
 80096aa:	ab02      	add	r3, sp, #8
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	ec45 4b10 	vmov	d0, r4, r5
 80096b2:	4653      	mov	r3, sl
 80096b4:	4632      	mov	r2, r6
 80096b6:	f001 f853 	bl	800a760 <_dtoa_r>
 80096ba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80096be:	4607      	mov	r7, r0
 80096c0:	d102      	bne.n	80096c8 <__cvt+0x66>
 80096c2:	f019 0f01 	tst.w	r9, #1
 80096c6:	d022      	beq.n	800970e <__cvt+0xac>
 80096c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096cc:	eb07 0906 	add.w	r9, r7, r6
 80096d0:	d110      	bne.n	80096f4 <__cvt+0x92>
 80096d2:	783b      	ldrb	r3, [r7, #0]
 80096d4:	2b30      	cmp	r3, #48	; 0x30
 80096d6:	d10a      	bne.n	80096ee <__cvt+0x8c>
 80096d8:	2200      	movs	r2, #0
 80096da:	2300      	movs	r3, #0
 80096dc:	4620      	mov	r0, r4
 80096de:	4629      	mov	r1, r5
 80096e0:	f7f7 fa1a 	bl	8000b18 <__aeabi_dcmpeq>
 80096e4:	b918      	cbnz	r0, 80096ee <__cvt+0x8c>
 80096e6:	f1c6 0601 	rsb	r6, r6, #1
 80096ea:	f8ca 6000 	str.w	r6, [sl]
 80096ee:	f8da 3000 	ldr.w	r3, [sl]
 80096f2:	4499      	add	r9, r3
 80096f4:	2200      	movs	r2, #0
 80096f6:	2300      	movs	r3, #0
 80096f8:	4620      	mov	r0, r4
 80096fa:	4629      	mov	r1, r5
 80096fc:	f7f7 fa0c 	bl	8000b18 <__aeabi_dcmpeq>
 8009700:	b108      	cbz	r0, 8009706 <__cvt+0xa4>
 8009702:	f8cd 900c 	str.w	r9, [sp, #12]
 8009706:	2230      	movs	r2, #48	; 0x30
 8009708:	9b03      	ldr	r3, [sp, #12]
 800970a:	454b      	cmp	r3, r9
 800970c:	d307      	bcc.n	800971e <__cvt+0xbc>
 800970e:	9b03      	ldr	r3, [sp, #12]
 8009710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009712:	1bdb      	subs	r3, r3, r7
 8009714:	4638      	mov	r0, r7
 8009716:	6013      	str	r3, [r2, #0]
 8009718:	b004      	add	sp, #16
 800971a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800971e:	1c59      	adds	r1, r3, #1
 8009720:	9103      	str	r1, [sp, #12]
 8009722:	701a      	strb	r2, [r3, #0]
 8009724:	e7f0      	b.n	8009708 <__cvt+0xa6>

08009726 <__exponent>:
 8009726:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009728:	4603      	mov	r3, r0
 800972a:	2900      	cmp	r1, #0
 800972c:	bfb8      	it	lt
 800972e:	4249      	neglt	r1, r1
 8009730:	f803 2b02 	strb.w	r2, [r3], #2
 8009734:	bfb4      	ite	lt
 8009736:	222d      	movlt	r2, #45	; 0x2d
 8009738:	222b      	movge	r2, #43	; 0x2b
 800973a:	2909      	cmp	r1, #9
 800973c:	7042      	strb	r2, [r0, #1]
 800973e:	dd2a      	ble.n	8009796 <__exponent+0x70>
 8009740:	f10d 0207 	add.w	r2, sp, #7
 8009744:	4617      	mov	r7, r2
 8009746:	260a      	movs	r6, #10
 8009748:	4694      	mov	ip, r2
 800974a:	fb91 f5f6 	sdiv	r5, r1, r6
 800974e:	fb06 1415 	mls	r4, r6, r5, r1
 8009752:	3430      	adds	r4, #48	; 0x30
 8009754:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009758:	460c      	mov	r4, r1
 800975a:	2c63      	cmp	r4, #99	; 0x63
 800975c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009760:	4629      	mov	r1, r5
 8009762:	dcf1      	bgt.n	8009748 <__exponent+0x22>
 8009764:	3130      	adds	r1, #48	; 0x30
 8009766:	f1ac 0402 	sub.w	r4, ip, #2
 800976a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800976e:	1c41      	adds	r1, r0, #1
 8009770:	4622      	mov	r2, r4
 8009772:	42ba      	cmp	r2, r7
 8009774:	d30a      	bcc.n	800978c <__exponent+0x66>
 8009776:	f10d 0209 	add.w	r2, sp, #9
 800977a:	eba2 020c 	sub.w	r2, r2, ip
 800977e:	42bc      	cmp	r4, r7
 8009780:	bf88      	it	hi
 8009782:	2200      	movhi	r2, #0
 8009784:	4413      	add	r3, r2
 8009786:	1a18      	subs	r0, r3, r0
 8009788:	b003      	add	sp, #12
 800978a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800978c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009790:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009794:	e7ed      	b.n	8009772 <__exponent+0x4c>
 8009796:	2330      	movs	r3, #48	; 0x30
 8009798:	3130      	adds	r1, #48	; 0x30
 800979a:	7083      	strb	r3, [r0, #2]
 800979c:	70c1      	strb	r1, [r0, #3]
 800979e:	1d03      	adds	r3, r0, #4
 80097a0:	e7f1      	b.n	8009786 <__exponent+0x60>
	...

080097a4 <_printf_float>:
 80097a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a8:	ed2d 8b02 	vpush	{d8}
 80097ac:	b08d      	sub	sp, #52	; 0x34
 80097ae:	460c      	mov	r4, r1
 80097b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80097b4:	4616      	mov	r6, r2
 80097b6:	461f      	mov	r7, r3
 80097b8:	4605      	mov	r5, r0
 80097ba:	f000 fe7f 	bl	800a4bc <_localeconv_r>
 80097be:	f8d0 a000 	ldr.w	sl, [r0]
 80097c2:	4650      	mov	r0, sl
 80097c4:	f7f6 fd7c 	bl	80002c0 <strlen>
 80097c8:	2300      	movs	r3, #0
 80097ca:	930a      	str	r3, [sp, #40]	; 0x28
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	9305      	str	r3, [sp, #20]
 80097d0:	f8d8 3000 	ldr.w	r3, [r8]
 80097d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80097d8:	3307      	adds	r3, #7
 80097da:	f023 0307 	bic.w	r3, r3, #7
 80097de:	f103 0208 	add.w	r2, r3, #8
 80097e2:	f8c8 2000 	str.w	r2, [r8]
 80097e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80097ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097ee:	9307      	str	r3, [sp, #28]
 80097f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80097f4:	ee08 0a10 	vmov	s16, r0
 80097f8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80097fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009800:	4b9e      	ldr	r3, [pc, #632]	; (8009a7c <_printf_float+0x2d8>)
 8009802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009806:	f7f7 f9b9 	bl	8000b7c <__aeabi_dcmpun>
 800980a:	bb88      	cbnz	r0, 8009870 <_printf_float+0xcc>
 800980c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009810:	4b9a      	ldr	r3, [pc, #616]	; (8009a7c <_printf_float+0x2d8>)
 8009812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009816:	f7f7 f993 	bl	8000b40 <__aeabi_dcmple>
 800981a:	bb48      	cbnz	r0, 8009870 <_printf_float+0xcc>
 800981c:	2200      	movs	r2, #0
 800981e:	2300      	movs	r3, #0
 8009820:	4640      	mov	r0, r8
 8009822:	4649      	mov	r1, r9
 8009824:	f7f7 f982 	bl	8000b2c <__aeabi_dcmplt>
 8009828:	b110      	cbz	r0, 8009830 <_printf_float+0x8c>
 800982a:	232d      	movs	r3, #45	; 0x2d
 800982c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009830:	4a93      	ldr	r2, [pc, #588]	; (8009a80 <_printf_float+0x2dc>)
 8009832:	4b94      	ldr	r3, [pc, #592]	; (8009a84 <_printf_float+0x2e0>)
 8009834:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009838:	bf94      	ite	ls
 800983a:	4690      	movls	r8, r2
 800983c:	4698      	movhi	r8, r3
 800983e:	2303      	movs	r3, #3
 8009840:	6123      	str	r3, [r4, #16]
 8009842:	9b05      	ldr	r3, [sp, #20]
 8009844:	f023 0304 	bic.w	r3, r3, #4
 8009848:	6023      	str	r3, [r4, #0]
 800984a:	f04f 0900 	mov.w	r9, #0
 800984e:	9700      	str	r7, [sp, #0]
 8009850:	4633      	mov	r3, r6
 8009852:	aa0b      	add	r2, sp, #44	; 0x2c
 8009854:	4621      	mov	r1, r4
 8009856:	4628      	mov	r0, r5
 8009858:	f000 f9da 	bl	8009c10 <_printf_common>
 800985c:	3001      	adds	r0, #1
 800985e:	f040 8090 	bne.w	8009982 <_printf_float+0x1de>
 8009862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009866:	b00d      	add	sp, #52	; 0x34
 8009868:	ecbd 8b02 	vpop	{d8}
 800986c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009870:	4642      	mov	r2, r8
 8009872:	464b      	mov	r3, r9
 8009874:	4640      	mov	r0, r8
 8009876:	4649      	mov	r1, r9
 8009878:	f7f7 f980 	bl	8000b7c <__aeabi_dcmpun>
 800987c:	b140      	cbz	r0, 8009890 <_printf_float+0xec>
 800987e:	464b      	mov	r3, r9
 8009880:	2b00      	cmp	r3, #0
 8009882:	bfbc      	itt	lt
 8009884:	232d      	movlt	r3, #45	; 0x2d
 8009886:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800988a:	4a7f      	ldr	r2, [pc, #508]	; (8009a88 <_printf_float+0x2e4>)
 800988c:	4b7f      	ldr	r3, [pc, #508]	; (8009a8c <_printf_float+0x2e8>)
 800988e:	e7d1      	b.n	8009834 <_printf_float+0x90>
 8009890:	6863      	ldr	r3, [r4, #4]
 8009892:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009896:	9206      	str	r2, [sp, #24]
 8009898:	1c5a      	adds	r2, r3, #1
 800989a:	d13f      	bne.n	800991c <_printf_float+0x178>
 800989c:	2306      	movs	r3, #6
 800989e:	6063      	str	r3, [r4, #4]
 80098a0:	9b05      	ldr	r3, [sp, #20]
 80098a2:	6861      	ldr	r1, [r4, #4]
 80098a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80098a8:	2300      	movs	r3, #0
 80098aa:	9303      	str	r3, [sp, #12]
 80098ac:	ab0a      	add	r3, sp, #40	; 0x28
 80098ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80098b2:	ab09      	add	r3, sp, #36	; 0x24
 80098b4:	ec49 8b10 	vmov	d0, r8, r9
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	6022      	str	r2, [r4, #0]
 80098bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098c0:	4628      	mov	r0, r5
 80098c2:	f7ff fece 	bl	8009662 <__cvt>
 80098c6:	9b06      	ldr	r3, [sp, #24]
 80098c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098ca:	2b47      	cmp	r3, #71	; 0x47
 80098cc:	4680      	mov	r8, r0
 80098ce:	d108      	bne.n	80098e2 <_printf_float+0x13e>
 80098d0:	1cc8      	adds	r0, r1, #3
 80098d2:	db02      	blt.n	80098da <_printf_float+0x136>
 80098d4:	6863      	ldr	r3, [r4, #4]
 80098d6:	4299      	cmp	r1, r3
 80098d8:	dd41      	ble.n	800995e <_printf_float+0x1ba>
 80098da:	f1ab 0302 	sub.w	r3, fp, #2
 80098de:	fa5f fb83 	uxtb.w	fp, r3
 80098e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098e6:	d820      	bhi.n	800992a <_printf_float+0x186>
 80098e8:	3901      	subs	r1, #1
 80098ea:	465a      	mov	r2, fp
 80098ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098f0:	9109      	str	r1, [sp, #36]	; 0x24
 80098f2:	f7ff ff18 	bl	8009726 <__exponent>
 80098f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098f8:	1813      	adds	r3, r2, r0
 80098fa:	2a01      	cmp	r2, #1
 80098fc:	4681      	mov	r9, r0
 80098fe:	6123      	str	r3, [r4, #16]
 8009900:	dc02      	bgt.n	8009908 <_printf_float+0x164>
 8009902:	6822      	ldr	r2, [r4, #0]
 8009904:	07d2      	lsls	r2, r2, #31
 8009906:	d501      	bpl.n	800990c <_printf_float+0x168>
 8009908:	3301      	adds	r3, #1
 800990a:	6123      	str	r3, [r4, #16]
 800990c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009910:	2b00      	cmp	r3, #0
 8009912:	d09c      	beq.n	800984e <_printf_float+0xaa>
 8009914:	232d      	movs	r3, #45	; 0x2d
 8009916:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800991a:	e798      	b.n	800984e <_printf_float+0xaa>
 800991c:	9a06      	ldr	r2, [sp, #24]
 800991e:	2a47      	cmp	r2, #71	; 0x47
 8009920:	d1be      	bne.n	80098a0 <_printf_float+0xfc>
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1bc      	bne.n	80098a0 <_printf_float+0xfc>
 8009926:	2301      	movs	r3, #1
 8009928:	e7b9      	b.n	800989e <_printf_float+0xfa>
 800992a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800992e:	d118      	bne.n	8009962 <_printf_float+0x1be>
 8009930:	2900      	cmp	r1, #0
 8009932:	6863      	ldr	r3, [r4, #4]
 8009934:	dd0b      	ble.n	800994e <_printf_float+0x1aa>
 8009936:	6121      	str	r1, [r4, #16]
 8009938:	b913      	cbnz	r3, 8009940 <_printf_float+0x19c>
 800993a:	6822      	ldr	r2, [r4, #0]
 800993c:	07d0      	lsls	r0, r2, #31
 800993e:	d502      	bpl.n	8009946 <_printf_float+0x1a2>
 8009940:	3301      	adds	r3, #1
 8009942:	440b      	add	r3, r1
 8009944:	6123      	str	r3, [r4, #16]
 8009946:	65a1      	str	r1, [r4, #88]	; 0x58
 8009948:	f04f 0900 	mov.w	r9, #0
 800994c:	e7de      	b.n	800990c <_printf_float+0x168>
 800994e:	b913      	cbnz	r3, 8009956 <_printf_float+0x1b2>
 8009950:	6822      	ldr	r2, [r4, #0]
 8009952:	07d2      	lsls	r2, r2, #31
 8009954:	d501      	bpl.n	800995a <_printf_float+0x1b6>
 8009956:	3302      	adds	r3, #2
 8009958:	e7f4      	b.n	8009944 <_printf_float+0x1a0>
 800995a:	2301      	movs	r3, #1
 800995c:	e7f2      	b.n	8009944 <_printf_float+0x1a0>
 800995e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009964:	4299      	cmp	r1, r3
 8009966:	db05      	blt.n	8009974 <_printf_float+0x1d0>
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	6121      	str	r1, [r4, #16]
 800996c:	07d8      	lsls	r0, r3, #31
 800996e:	d5ea      	bpl.n	8009946 <_printf_float+0x1a2>
 8009970:	1c4b      	adds	r3, r1, #1
 8009972:	e7e7      	b.n	8009944 <_printf_float+0x1a0>
 8009974:	2900      	cmp	r1, #0
 8009976:	bfd4      	ite	le
 8009978:	f1c1 0202 	rsble	r2, r1, #2
 800997c:	2201      	movgt	r2, #1
 800997e:	4413      	add	r3, r2
 8009980:	e7e0      	b.n	8009944 <_printf_float+0x1a0>
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	055a      	lsls	r2, r3, #21
 8009986:	d407      	bmi.n	8009998 <_printf_float+0x1f4>
 8009988:	6923      	ldr	r3, [r4, #16]
 800998a:	4642      	mov	r2, r8
 800998c:	4631      	mov	r1, r6
 800998e:	4628      	mov	r0, r5
 8009990:	47b8      	blx	r7
 8009992:	3001      	adds	r0, #1
 8009994:	d12c      	bne.n	80099f0 <_printf_float+0x24c>
 8009996:	e764      	b.n	8009862 <_printf_float+0xbe>
 8009998:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800999c:	f240 80e0 	bls.w	8009b60 <_printf_float+0x3bc>
 80099a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099a4:	2200      	movs	r2, #0
 80099a6:	2300      	movs	r3, #0
 80099a8:	f7f7 f8b6 	bl	8000b18 <__aeabi_dcmpeq>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d034      	beq.n	8009a1a <_printf_float+0x276>
 80099b0:	4a37      	ldr	r2, [pc, #220]	; (8009a90 <_printf_float+0x2ec>)
 80099b2:	2301      	movs	r3, #1
 80099b4:	4631      	mov	r1, r6
 80099b6:	4628      	mov	r0, r5
 80099b8:	47b8      	blx	r7
 80099ba:	3001      	adds	r0, #1
 80099bc:	f43f af51 	beq.w	8009862 <_printf_float+0xbe>
 80099c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099c4:	429a      	cmp	r2, r3
 80099c6:	db02      	blt.n	80099ce <_printf_float+0x22a>
 80099c8:	6823      	ldr	r3, [r4, #0]
 80099ca:	07d8      	lsls	r0, r3, #31
 80099cc:	d510      	bpl.n	80099f0 <_printf_float+0x24c>
 80099ce:	ee18 3a10 	vmov	r3, s16
 80099d2:	4652      	mov	r2, sl
 80099d4:	4631      	mov	r1, r6
 80099d6:	4628      	mov	r0, r5
 80099d8:	47b8      	blx	r7
 80099da:	3001      	adds	r0, #1
 80099dc:	f43f af41 	beq.w	8009862 <_printf_float+0xbe>
 80099e0:	f04f 0800 	mov.w	r8, #0
 80099e4:	f104 091a 	add.w	r9, r4, #26
 80099e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ea:	3b01      	subs	r3, #1
 80099ec:	4543      	cmp	r3, r8
 80099ee:	dc09      	bgt.n	8009a04 <_printf_float+0x260>
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	079b      	lsls	r3, r3, #30
 80099f4:	f100 8107 	bmi.w	8009c06 <_printf_float+0x462>
 80099f8:	68e0      	ldr	r0, [r4, #12]
 80099fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099fc:	4298      	cmp	r0, r3
 80099fe:	bfb8      	it	lt
 8009a00:	4618      	movlt	r0, r3
 8009a02:	e730      	b.n	8009866 <_printf_float+0xc2>
 8009a04:	2301      	movs	r3, #1
 8009a06:	464a      	mov	r2, r9
 8009a08:	4631      	mov	r1, r6
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	47b8      	blx	r7
 8009a0e:	3001      	adds	r0, #1
 8009a10:	f43f af27 	beq.w	8009862 <_printf_float+0xbe>
 8009a14:	f108 0801 	add.w	r8, r8, #1
 8009a18:	e7e6      	b.n	80099e8 <_printf_float+0x244>
 8009a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	dc39      	bgt.n	8009a94 <_printf_float+0x2f0>
 8009a20:	4a1b      	ldr	r2, [pc, #108]	; (8009a90 <_printf_float+0x2ec>)
 8009a22:	2301      	movs	r3, #1
 8009a24:	4631      	mov	r1, r6
 8009a26:	4628      	mov	r0, r5
 8009a28:	47b8      	blx	r7
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	f43f af19 	beq.w	8009862 <_printf_float+0xbe>
 8009a30:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009a34:	4313      	orrs	r3, r2
 8009a36:	d102      	bne.n	8009a3e <_printf_float+0x29a>
 8009a38:	6823      	ldr	r3, [r4, #0]
 8009a3a:	07d9      	lsls	r1, r3, #31
 8009a3c:	d5d8      	bpl.n	80099f0 <_printf_float+0x24c>
 8009a3e:	ee18 3a10 	vmov	r3, s16
 8009a42:	4652      	mov	r2, sl
 8009a44:	4631      	mov	r1, r6
 8009a46:	4628      	mov	r0, r5
 8009a48:	47b8      	blx	r7
 8009a4a:	3001      	adds	r0, #1
 8009a4c:	f43f af09 	beq.w	8009862 <_printf_float+0xbe>
 8009a50:	f04f 0900 	mov.w	r9, #0
 8009a54:	f104 0a1a 	add.w	sl, r4, #26
 8009a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a5a:	425b      	negs	r3, r3
 8009a5c:	454b      	cmp	r3, r9
 8009a5e:	dc01      	bgt.n	8009a64 <_printf_float+0x2c0>
 8009a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a62:	e792      	b.n	800998a <_printf_float+0x1e6>
 8009a64:	2301      	movs	r3, #1
 8009a66:	4652      	mov	r2, sl
 8009a68:	4631      	mov	r1, r6
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	47b8      	blx	r7
 8009a6e:	3001      	adds	r0, #1
 8009a70:	f43f aef7 	beq.w	8009862 <_printf_float+0xbe>
 8009a74:	f109 0901 	add.w	r9, r9, #1
 8009a78:	e7ee      	b.n	8009a58 <_printf_float+0x2b4>
 8009a7a:	bf00      	nop
 8009a7c:	7fefffff 	.word	0x7fefffff
 8009a80:	0801f489 	.word	0x0801f489
 8009a84:	0801f48d 	.word	0x0801f48d
 8009a88:	0801f491 	.word	0x0801f491
 8009a8c:	0801f495 	.word	0x0801f495
 8009a90:	0801f499 	.word	0x0801f499
 8009a94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	bfa8      	it	ge
 8009a9c:	461a      	movge	r2, r3
 8009a9e:	2a00      	cmp	r2, #0
 8009aa0:	4691      	mov	r9, r2
 8009aa2:	dc37      	bgt.n	8009b14 <_printf_float+0x370>
 8009aa4:	f04f 0b00 	mov.w	fp, #0
 8009aa8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009aac:	f104 021a 	add.w	r2, r4, #26
 8009ab0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ab2:	9305      	str	r3, [sp, #20]
 8009ab4:	eba3 0309 	sub.w	r3, r3, r9
 8009ab8:	455b      	cmp	r3, fp
 8009aba:	dc33      	bgt.n	8009b24 <_printf_float+0x380>
 8009abc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	db3b      	blt.n	8009b3c <_printf_float+0x398>
 8009ac4:	6823      	ldr	r3, [r4, #0]
 8009ac6:	07da      	lsls	r2, r3, #31
 8009ac8:	d438      	bmi.n	8009b3c <_printf_float+0x398>
 8009aca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009ace:	eba2 0903 	sub.w	r9, r2, r3
 8009ad2:	9b05      	ldr	r3, [sp, #20]
 8009ad4:	1ad2      	subs	r2, r2, r3
 8009ad6:	4591      	cmp	r9, r2
 8009ad8:	bfa8      	it	ge
 8009ada:	4691      	movge	r9, r2
 8009adc:	f1b9 0f00 	cmp.w	r9, #0
 8009ae0:	dc35      	bgt.n	8009b4e <_printf_float+0x3aa>
 8009ae2:	f04f 0800 	mov.w	r8, #0
 8009ae6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009aea:	f104 0a1a 	add.w	sl, r4, #26
 8009aee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009af2:	1a9b      	subs	r3, r3, r2
 8009af4:	eba3 0309 	sub.w	r3, r3, r9
 8009af8:	4543      	cmp	r3, r8
 8009afa:	f77f af79 	ble.w	80099f0 <_printf_float+0x24c>
 8009afe:	2301      	movs	r3, #1
 8009b00:	4652      	mov	r2, sl
 8009b02:	4631      	mov	r1, r6
 8009b04:	4628      	mov	r0, r5
 8009b06:	47b8      	blx	r7
 8009b08:	3001      	adds	r0, #1
 8009b0a:	f43f aeaa 	beq.w	8009862 <_printf_float+0xbe>
 8009b0e:	f108 0801 	add.w	r8, r8, #1
 8009b12:	e7ec      	b.n	8009aee <_printf_float+0x34a>
 8009b14:	4613      	mov	r3, r2
 8009b16:	4631      	mov	r1, r6
 8009b18:	4642      	mov	r2, r8
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	47b8      	blx	r7
 8009b1e:	3001      	adds	r0, #1
 8009b20:	d1c0      	bne.n	8009aa4 <_printf_float+0x300>
 8009b22:	e69e      	b.n	8009862 <_printf_float+0xbe>
 8009b24:	2301      	movs	r3, #1
 8009b26:	4631      	mov	r1, r6
 8009b28:	4628      	mov	r0, r5
 8009b2a:	9205      	str	r2, [sp, #20]
 8009b2c:	47b8      	blx	r7
 8009b2e:	3001      	adds	r0, #1
 8009b30:	f43f ae97 	beq.w	8009862 <_printf_float+0xbe>
 8009b34:	9a05      	ldr	r2, [sp, #20]
 8009b36:	f10b 0b01 	add.w	fp, fp, #1
 8009b3a:	e7b9      	b.n	8009ab0 <_printf_float+0x30c>
 8009b3c:	ee18 3a10 	vmov	r3, s16
 8009b40:	4652      	mov	r2, sl
 8009b42:	4631      	mov	r1, r6
 8009b44:	4628      	mov	r0, r5
 8009b46:	47b8      	blx	r7
 8009b48:	3001      	adds	r0, #1
 8009b4a:	d1be      	bne.n	8009aca <_printf_float+0x326>
 8009b4c:	e689      	b.n	8009862 <_printf_float+0xbe>
 8009b4e:	9a05      	ldr	r2, [sp, #20]
 8009b50:	464b      	mov	r3, r9
 8009b52:	4442      	add	r2, r8
 8009b54:	4631      	mov	r1, r6
 8009b56:	4628      	mov	r0, r5
 8009b58:	47b8      	blx	r7
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	d1c1      	bne.n	8009ae2 <_printf_float+0x33e>
 8009b5e:	e680      	b.n	8009862 <_printf_float+0xbe>
 8009b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b62:	2a01      	cmp	r2, #1
 8009b64:	dc01      	bgt.n	8009b6a <_printf_float+0x3c6>
 8009b66:	07db      	lsls	r3, r3, #31
 8009b68:	d53a      	bpl.n	8009be0 <_printf_float+0x43c>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	4642      	mov	r2, r8
 8009b6e:	4631      	mov	r1, r6
 8009b70:	4628      	mov	r0, r5
 8009b72:	47b8      	blx	r7
 8009b74:	3001      	adds	r0, #1
 8009b76:	f43f ae74 	beq.w	8009862 <_printf_float+0xbe>
 8009b7a:	ee18 3a10 	vmov	r3, s16
 8009b7e:	4652      	mov	r2, sl
 8009b80:	4631      	mov	r1, r6
 8009b82:	4628      	mov	r0, r5
 8009b84:	47b8      	blx	r7
 8009b86:	3001      	adds	r0, #1
 8009b88:	f43f ae6b 	beq.w	8009862 <_printf_float+0xbe>
 8009b8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b90:	2200      	movs	r2, #0
 8009b92:	2300      	movs	r3, #0
 8009b94:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009b98:	f7f6 ffbe 	bl	8000b18 <__aeabi_dcmpeq>
 8009b9c:	b9d8      	cbnz	r0, 8009bd6 <_printf_float+0x432>
 8009b9e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009ba2:	f108 0201 	add.w	r2, r8, #1
 8009ba6:	4631      	mov	r1, r6
 8009ba8:	4628      	mov	r0, r5
 8009baa:	47b8      	blx	r7
 8009bac:	3001      	adds	r0, #1
 8009bae:	d10e      	bne.n	8009bce <_printf_float+0x42a>
 8009bb0:	e657      	b.n	8009862 <_printf_float+0xbe>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	4652      	mov	r2, sl
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	4628      	mov	r0, r5
 8009bba:	47b8      	blx	r7
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	f43f ae50 	beq.w	8009862 <_printf_float+0xbe>
 8009bc2:	f108 0801 	add.w	r8, r8, #1
 8009bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	4543      	cmp	r3, r8
 8009bcc:	dcf1      	bgt.n	8009bb2 <_printf_float+0x40e>
 8009bce:	464b      	mov	r3, r9
 8009bd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009bd4:	e6da      	b.n	800998c <_printf_float+0x1e8>
 8009bd6:	f04f 0800 	mov.w	r8, #0
 8009bda:	f104 0a1a 	add.w	sl, r4, #26
 8009bde:	e7f2      	b.n	8009bc6 <_printf_float+0x422>
 8009be0:	2301      	movs	r3, #1
 8009be2:	4642      	mov	r2, r8
 8009be4:	e7df      	b.n	8009ba6 <_printf_float+0x402>
 8009be6:	2301      	movs	r3, #1
 8009be8:	464a      	mov	r2, r9
 8009bea:	4631      	mov	r1, r6
 8009bec:	4628      	mov	r0, r5
 8009bee:	47b8      	blx	r7
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	f43f ae36 	beq.w	8009862 <_printf_float+0xbe>
 8009bf6:	f108 0801 	add.w	r8, r8, #1
 8009bfa:	68e3      	ldr	r3, [r4, #12]
 8009bfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bfe:	1a5b      	subs	r3, r3, r1
 8009c00:	4543      	cmp	r3, r8
 8009c02:	dcf0      	bgt.n	8009be6 <_printf_float+0x442>
 8009c04:	e6f8      	b.n	80099f8 <_printf_float+0x254>
 8009c06:	f04f 0800 	mov.w	r8, #0
 8009c0a:	f104 0919 	add.w	r9, r4, #25
 8009c0e:	e7f4      	b.n	8009bfa <_printf_float+0x456>

08009c10 <_printf_common>:
 8009c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c14:	4616      	mov	r6, r2
 8009c16:	4699      	mov	r9, r3
 8009c18:	688a      	ldr	r2, [r1, #8]
 8009c1a:	690b      	ldr	r3, [r1, #16]
 8009c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c20:	4293      	cmp	r3, r2
 8009c22:	bfb8      	it	lt
 8009c24:	4613      	movlt	r3, r2
 8009c26:	6033      	str	r3, [r6, #0]
 8009c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c2c:	4607      	mov	r7, r0
 8009c2e:	460c      	mov	r4, r1
 8009c30:	b10a      	cbz	r2, 8009c36 <_printf_common+0x26>
 8009c32:	3301      	adds	r3, #1
 8009c34:	6033      	str	r3, [r6, #0]
 8009c36:	6823      	ldr	r3, [r4, #0]
 8009c38:	0699      	lsls	r1, r3, #26
 8009c3a:	bf42      	ittt	mi
 8009c3c:	6833      	ldrmi	r3, [r6, #0]
 8009c3e:	3302      	addmi	r3, #2
 8009c40:	6033      	strmi	r3, [r6, #0]
 8009c42:	6825      	ldr	r5, [r4, #0]
 8009c44:	f015 0506 	ands.w	r5, r5, #6
 8009c48:	d106      	bne.n	8009c58 <_printf_common+0x48>
 8009c4a:	f104 0a19 	add.w	sl, r4, #25
 8009c4e:	68e3      	ldr	r3, [r4, #12]
 8009c50:	6832      	ldr	r2, [r6, #0]
 8009c52:	1a9b      	subs	r3, r3, r2
 8009c54:	42ab      	cmp	r3, r5
 8009c56:	dc26      	bgt.n	8009ca6 <_printf_common+0x96>
 8009c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c5c:	1e13      	subs	r3, r2, #0
 8009c5e:	6822      	ldr	r2, [r4, #0]
 8009c60:	bf18      	it	ne
 8009c62:	2301      	movne	r3, #1
 8009c64:	0692      	lsls	r2, r2, #26
 8009c66:	d42b      	bmi.n	8009cc0 <_printf_common+0xb0>
 8009c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c6c:	4649      	mov	r1, r9
 8009c6e:	4638      	mov	r0, r7
 8009c70:	47c0      	blx	r8
 8009c72:	3001      	adds	r0, #1
 8009c74:	d01e      	beq.n	8009cb4 <_printf_common+0xa4>
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	6922      	ldr	r2, [r4, #16]
 8009c7a:	f003 0306 	and.w	r3, r3, #6
 8009c7e:	2b04      	cmp	r3, #4
 8009c80:	bf02      	ittt	eq
 8009c82:	68e5      	ldreq	r5, [r4, #12]
 8009c84:	6833      	ldreq	r3, [r6, #0]
 8009c86:	1aed      	subeq	r5, r5, r3
 8009c88:	68a3      	ldr	r3, [r4, #8]
 8009c8a:	bf0c      	ite	eq
 8009c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c90:	2500      	movne	r5, #0
 8009c92:	4293      	cmp	r3, r2
 8009c94:	bfc4      	itt	gt
 8009c96:	1a9b      	subgt	r3, r3, r2
 8009c98:	18ed      	addgt	r5, r5, r3
 8009c9a:	2600      	movs	r6, #0
 8009c9c:	341a      	adds	r4, #26
 8009c9e:	42b5      	cmp	r5, r6
 8009ca0:	d11a      	bne.n	8009cd8 <_printf_common+0xc8>
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	e008      	b.n	8009cb8 <_printf_common+0xa8>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	4652      	mov	r2, sl
 8009caa:	4649      	mov	r1, r9
 8009cac:	4638      	mov	r0, r7
 8009cae:	47c0      	blx	r8
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	d103      	bne.n	8009cbc <_printf_common+0xac>
 8009cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cbc:	3501      	adds	r5, #1
 8009cbe:	e7c6      	b.n	8009c4e <_printf_common+0x3e>
 8009cc0:	18e1      	adds	r1, r4, r3
 8009cc2:	1c5a      	adds	r2, r3, #1
 8009cc4:	2030      	movs	r0, #48	; 0x30
 8009cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cca:	4422      	add	r2, r4
 8009ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cd4:	3302      	adds	r3, #2
 8009cd6:	e7c7      	b.n	8009c68 <_printf_common+0x58>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	4622      	mov	r2, r4
 8009cdc:	4649      	mov	r1, r9
 8009cde:	4638      	mov	r0, r7
 8009ce0:	47c0      	blx	r8
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	d0e6      	beq.n	8009cb4 <_printf_common+0xa4>
 8009ce6:	3601      	adds	r6, #1
 8009ce8:	e7d9      	b.n	8009c9e <_printf_common+0x8e>
	...

08009cec <_printf_i>:
 8009cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf0:	7e0f      	ldrb	r7, [r1, #24]
 8009cf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009cf4:	2f78      	cmp	r7, #120	; 0x78
 8009cf6:	4691      	mov	r9, r2
 8009cf8:	4680      	mov	r8, r0
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	469a      	mov	sl, r3
 8009cfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d02:	d807      	bhi.n	8009d14 <_printf_i+0x28>
 8009d04:	2f62      	cmp	r7, #98	; 0x62
 8009d06:	d80a      	bhi.n	8009d1e <_printf_i+0x32>
 8009d08:	2f00      	cmp	r7, #0
 8009d0a:	f000 80d4 	beq.w	8009eb6 <_printf_i+0x1ca>
 8009d0e:	2f58      	cmp	r7, #88	; 0x58
 8009d10:	f000 80c0 	beq.w	8009e94 <_printf_i+0x1a8>
 8009d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d1c:	e03a      	b.n	8009d94 <_printf_i+0xa8>
 8009d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d22:	2b15      	cmp	r3, #21
 8009d24:	d8f6      	bhi.n	8009d14 <_printf_i+0x28>
 8009d26:	a101      	add	r1, pc, #4	; (adr r1, 8009d2c <_printf_i+0x40>)
 8009d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d2c:	08009d85 	.word	0x08009d85
 8009d30:	08009d99 	.word	0x08009d99
 8009d34:	08009d15 	.word	0x08009d15
 8009d38:	08009d15 	.word	0x08009d15
 8009d3c:	08009d15 	.word	0x08009d15
 8009d40:	08009d15 	.word	0x08009d15
 8009d44:	08009d99 	.word	0x08009d99
 8009d48:	08009d15 	.word	0x08009d15
 8009d4c:	08009d15 	.word	0x08009d15
 8009d50:	08009d15 	.word	0x08009d15
 8009d54:	08009d15 	.word	0x08009d15
 8009d58:	08009e9d 	.word	0x08009e9d
 8009d5c:	08009dc5 	.word	0x08009dc5
 8009d60:	08009e57 	.word	0x08009e57
 8009d64:	08009d15 	.word	0x08009d15
 8009d68:	08009d15 	.word	0x08009d15
 8009d6c:	08009ebf 	.word	0x08009ebf
 8009d70:	08009d15 	.word	0x08009d15
 8009d74:	08009dc5 	.word	0x08009dc5
 8009d78:	08009d15 	.word	0x08009d15
 8009d7c:	08009d15 	.word	0x08009d15
 8009d80:	08009e5f 	.word	0x08009e5f
 8009d84:	682b      	ldr	r3, [r5, #0]
 8009d86:	1d1a      	adds	r2, r3, #4
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	602a      	str	r2, [r5, #0]
 8009d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d94:	2301      	movs	r3, #1
 8009d96:	e09f      	b.n	8009ed8 <_printf_i+0x1ec>
 8009d98:	6820      	ldr	r0, [r4, #0]
 8009d9a:	682b      	ldr	r3, [r5, #0]
 8009d9c:	0607      	lsls	r7, r0, #24
 8009d9e:	f103 0104 	add.w	r1, r3, #4
 8009da2:	6029      	str	r1, [r5, #0]
 8009da4:	d501      	bpl.n	8009daa <_printf_i+0xbe>
 8009da6:	681e      	ldr	r6, [r3, #0]
 8009da8:	e003      	b.n	8009db2 <_printf_i+0xc6>
 8009daa:	0646      	lsls	r6, r0, #25
 8009dac:	d5fb      	bpl.n	8009da6 <_printf_i+0xba>
 8009dae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009db2:	2e00      	cmp	r6, #0
 8009db4:	da03      	bge.n	8009dbe <_printf_i+0xd2>
 8009db6:	232d      	movs	r3, #45	; 0x2d
 8009db8:	4276      	negs	r6, r6
 8009dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dbe:	485a      	ldr	r0, [pc, #360]	; (8009f28 <_printf_i+0x23c>)
 8009dc0:	230a      	movs	r3, #10
 8009dc2:	e012      	b.n	8009dea <_printf_i+0xfe>
 8009dc4:	682b      	ldr	r3, [r5, #0]
 8009dc6:	6820      	ldr	r0, [r4, #0]
 8009dc8:	1d19      	adds	r1, r3, #4
 8009dca:	6029      	str	r1, [r5, #0]
 8009dcc:	0605      	lsls	r5, r0, #24
 8009dce:	d501      	bpl.n	8009dd4 <_printf_i+0xe8>
 8009dd0:	681e      	ldr	r6, [r3, #0]
 8009dd2:	e002      	b.n	8009dda <_printf_i+0xee>
 8009dd4:	0641      	lsls	r1, r0, #25
 8009dd6:	d5fb      	bpl.n	8009dd0 <_printf_i+0xe4>
 8009dd8:	881e      	ldrh	r6, [r3, #0]
 8009dda:	4853      	ldr	r0, [pc, #332]	; (8009f28 <_printf_i+0x23c>)
 8009ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8009dde:	bf0c      	ite	eq
 8009de0:	2308      	moveq	r3, #8
 8009de2:	230a      	movne	r3, #10
 8009de4:	2100      	movs	r1, #0
 8009de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dea:	6865      	ldr	r5, [r4, #4]
 8009dec:	60a5      	str	r5, [r4, #8]
 8009dee:	2d00      	cmp	r5, #0
 8009df0:	bfa2      	ittt	ge
 8009df2:	6821      	ldrge	r1, [r4, #0]
 8009df4:	f021 0104 	bicge.w	r1, r1, #4
 8009df8:	6021      	strge	r1, [r4, #0]
 8009dfa:	b90e      	cbnz	r6, 8009e00 <_printf_i+0x114>
 8009dfc:	2d00      	cmp	r5, #0
 8009dfe:	d04b      	beq.n	8009e98 <_printf_i+0x1ac>
 8009e00:	4615      	mov	r5, r2
 8009e02:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e06:	fb03 6711 	mls	r7, r3, r1, r6
 8009e0a:	5dc7      	ldrb	r7, [r0, r7]
 8009e0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e10:	4637      	mov	r7, r6
 8009e12:	42bb      	cmp	r3, r7
 8009e14:	460e      	mov	r6, r1
 8009e16:	d9f4      	bls.n	8009e02 <_printf_i+0x116>
 8009e18:	2b08      	cmp	r3, #8
 8009e1a:	d10b      	bne.n	8009e34 <_printf_i+0x148>
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	07de      	lsls	r6, r3, #31
 8009e20:	d508      	bpl.n	8009e34 <_printf_i+0x148>
 8009e22:	6923      	ldr	r3, [r4, #16]
 8009e24:	6861      	ldr	r1, [r4, #4]
 8009e26:	4299      	cmp	r1, r3
 8009e28:	bfde      	ittt	le
 8009e2a:	2330      	movle	r3, #48	; 0x30
 8009e2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e30:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009e34:	1b52      	subs	r2, r2, r5
 8009e36:	6122      	str	r2, [r4, #16]
 8009e38:	f8cd a000 	str.w	sl, [sp]
 8009e3c:	464b      	mov	r3, r9
 8009e3e:	aa03      	add	r2, sp, #12
 8009e40:	4621      	mov	r1, r4
 8009e42:	4640      	mov	r0, r8
 8009e44:	f7ff fee4 	bl	8009c10 <_printf_common>
 8009e48:	3001      	adds	r0, #1
 8009e4a:	d14a      	bne.n	8009ee2 <_printf_i+0x1f6>
 8009e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e50:	b004      	add	sp, #16
 8009e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	f043 0320 	orr.w	r3, r3, #32
 8009e5c:	6023      	str	r3, [r4, #0]
 8009e5e:	4833      	ldr	r0, [pc, #204]	; (8009f2c <_printf_i+0x240>)
 8009e60:	2778      	movs	r7, #120	; 0x78
 8009e62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e66:	6823      	ldr	r3, [r4, #0]
 8009e68:	6829      	ldr	r1, [r5, #0]
 8009e6a:	061f      	lsls	r7, r3, #24
 8009e6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e70:	d402      	bmi.n	8009e78 <_printf_i+0x18c>
 8009e72:	065f      	lsls	r7, r3, #25
 8009e74:	bf48      	it	mi
 8009e76:	b2b6      	uxthmi	r6, r6
 8009e78:	07df      	lsls	r7, r3, #31
 8009e7a:	bf48      	it	mi
 8009e7c:	f043 0320 	orrmi.w	r3, r3, #32
 8009e80:	6029      	str	r1, [r5, #0]
 8009e82:	bf48      	it	mi
 8009e84:	6023      	strmi	r3, [r4, #0]
 8009e86:	b91e      	cbnz	r6, 8009e90 <_printf_i+0x1a4>
 8009e88:	6823      	ldr	r3, [r4, #0]
 8009e8a:	f023 0320 	bic.w	r3, r3, #32
 8009e8e:	6023      	str	r3, [r4, #0]
 8009e90:	2310      	movs	r3, #16
 8009e92:	e7a7      	b.n	8009de4 <_printf_i+0xf8>
 8009e94:	4824      	ldr	r0, [pc, #144]	; (8009f28 <_printf_i+0x23c>)
 8009e96:	e7e4      	b.n	8009e62 <_printf_i+0x176>
 8009e98:	4615      	mov	r5, r2
 8009e9a:	e7bd      	b.n	8009e18 <_printf_i+0x12c>
 8009e9c:	682b      	ldr	r3, [r5, #0]
 8009e9e:	6826      	ldr	r6, [r4, #0]
 8009ea0:	6961      	ldr	r1, [r4, #20]
 8009ea2:	1d18      	adds	r0, r3, #4
 8009ea4:	6028      	str	r0, [r5, #0]
 8009ea6:	0635      	lsls	r5, r6, #24
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	d501      	bpl.n	8009eb0 <_printf_i+0x1c4>
 8009eac:	6019      	str	r1, [r3, #0]
 8009eae:	e002      	b.n	8009eb6 <_printf_i+0x1ca>
 8009eb0:	0670      	lsls	r0, r6, #25
 8009eb2:	d5fb      	bpl.n	8009eac <_printf_i+0x1c0>
 8009eb4:	8019      	strh	r1, [r3, #0]
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	6123      	str	r3, [r4, #16]
 8009eba:	4615      	mov	r5, r2
 8009ebc:	e7bc      	b.n	8009e38 <_printf_i+0x14c>
 8009ebe:	682b      	ldr	r3, [r5, #0]
 8009ec0:	1d1a      	adds	r2, r3, #4
 8009ec2:	602a      	str	r2, [r5, #0]
 8009ec4:	681d      	ldr	r5, [r3, #0]
 8009ec6:	6862      	ldr	r2, [r4, #4]
 8009ec8:	2100      	movs	r1, #0
 8009eca:	4628      	mov	r0, r5
 8009ecc:	f7f6 f9a8 	bl	8000220 <memchr>
 8009ed0:	b108      	cbz	r0, 8009ed6 <_printf_i+0x1ea>
 8009ed2:	1b40      	subs	r0, r0, r5
 8009ed4:	6060      	str	r0, [r4, #4]
 8009ed6:	6863      	ldr	r3, [r4, #4]
 8009ed8:	6123      	str	r3, [r4, #16]
 8009eda:	2300      	movs	r3, #0
 8009edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ee0:	e7aa      	b.n	8009e38 <_printf_i+0x14c>
 8009ee2:	6923      	ldr	r3, [r4, #16]
 8009ee4:	462a      	mov	r2, r5
 8009ee6:	4649      	mov	r1, r9
 8009ee8:	4640      	mov	r0, r8
 8009eea:	47d0      	blx	sl
 8009eec:	3001      	adds	r0, #1
 8009eee:	d0ad      	beq.n	8009e4c <_printf_i+0x160>
 8009ef0:	6823      	ldr	r3, [r4, #0]
 8009ef2:	079b      	lsls	r3, r3, #30
 8009ef4:	d413      	bmi.n	8009f1e <_printf_i+0x232>
 8009ef6:	68e0      	ldr	r0, [r4, #12]
 8009ef8:	9b03      	ldr	r3, [sp, #12]
 8009efa:	4298      	cmp	r0, r3
 8009efc:	bfb8      	it	lt
 8009efe:	4618      	movlt	r0, r3
 8009f00:	e7a6      	b.n	8009e50 <_printf_i+0x164>
 8009f02:	2301      	movs	r3, #1
 8009f04:	4632      	mov	r2, r6
 8009f06:	4649      	mov	r1, r9
 8009f08:	4640      	mov	r0, r8
 8009f0a:	47d0      	blx	sl
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	d09d      	beq.n	8009e4c <_printf_i+0x160>
 8009f10:	3501      	adds	r5, #1
 8009f12:	68e3      	ldr	r3, [r4, #12]
 8009f14:	9903      	ldr	r1, [sp, #12]
 8009f16:	1a5b      	subs	r3, r3, r1
 8009f18:	42ab      	cmp	r3, r5
 8009f1a:	dcf2      	bgt.n	8009f02 <_printf_i+0x216>
 8009f1c:	e7eb      	b.n	8009ef6 <_printf_i+0x20a>
 8009f1e:	2500      	movs	r5, #0
 8009f20:	f104 0619 	add.w	r6, r4, #25
 8009f24:	e7f5      	b.n	8009f12 <_printf_i+0x226>
 8009f26:	bf00      	nop
 8009f28:	0801f49b 	.word	0x0801f49b
 8009f2c:	0801f4ac 	.word	0x0801f4ac

08009f30 <__sflush_r>:
 8009f30:	898a      	ldrh	r2, [r1, #12]
 8009f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f36:	4605      	mov	r5, r0
 8009f38:	0710      	lsls	r0, r2, #28
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	d458      	bmi.n	8009ff0 <__sflush_r+0xc0>
 8009f3e:	684b      	ldr	r3, [r1, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	dc05      	bgt.n	8009f50 <__sflush_r+0x20>
 8009f44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	dc02      	bgt.n	8009f50 <__sflush_r+0x20>
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f52:	2e00      	cmp	r6, #0
 8009f54:	d0f9      	beq.n	8009f4a <__sflush_r+0x1a>
 8009f56:	2300      	movs	r3, #0
 8009f58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f5c:	682f      	ldr	r7, [r5, #0]
 8009f5e:	6a21      	ldr	r1, [r4, #32]
 8009f60:	602b      	str	r3, [r5, #0]
 8009f62:	d032      	beq.n	8009fca <__sflush_r+0x9a>
 8009f64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	075a      	lsls	r2, r3, #29
 8009f6a:	d505      	bpl.n	8009f78 <__sflush_r+0x48>
 8009f6c:	6863      	ldr	r3, [r4, #4]
 8009f6e:	1ac0      	subs	r0, r0, r3
 8009f70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f72:	b10b      	cbz	r3, 8009f78 <__sflush_r+0x48>
 8009f74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f76:	1ac0      	subs	r0, r0, r3
 8009f78:	2300      	movs	r3, #0
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f7e:	6a21      	ldr	r1, [r4, #32]
 8009f80:	4628      	mov	r0, r5
 8009f82:	47b0      	blx	r6
 8009f84:	1c43      	adds	r3, r0, #1
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	d106      	bne.n	8009f98 <__sflush_r+0x68>
 8009f8a:	6829      	ldr	r1, [r5, #0]
 8009f8c:	291d      	cmp	r1, #29
 8009f8e:	d82b      	bhi.n	8009fe8 <__sflush_r+0xb8>
 8009f90:	4a29      	ldr	r2, [pc, #164]	; (800a038 <__sflush_r+0x108>)
 8009f92:	410a      	asrs	r2, r1
 8009f94:	07d6      	lsls	r6, r2, #31
 8009f96:	d427      	bmi.n	8009fe8 <__sflush_r+0xb8>
 8009f98:	2200      	movs	r2, #0
 8009f9a:	6062      	str	r2, [r4, #4]
 8009f9c:	04d9      	lsls	r1, r3, #19
 8009f9e:	6922      	ldr	r2, [r4, #16]
 8009fa0:	6022      	str	r2, [r4, #0]
 8009fa2:	d504      	bpl.n	8009fae <__sflush_r+0x7e>
 8009fa4:	1c42      	adds	r2, r0, #1
 8009fa6:	d101      	bne.n	8009fac <__sflush_r+0x7c>
 8009fa8:	682b      	ldr	r3, [r5, #0]
 8009faa:	b903      	cbnz	r3, 8009fae <__sflush_r+0x7e>
 8009fac:	6560      	str	r0, [r4, #84]	; 0x54
 8009fae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fb0:	602f      	str	r7, [r5, #0]
 8009fb2:	2900      	cmp	r1, #0
 8009fb4:	d0c9      	beq.n	8009f4a <__sflush_r+0x1a>
 8009fb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fba:	4299      	cmp	r1, r3
 8009fbc:	d002      	beq.n	8009fc4 <__sflush_r+0x94>
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f001 f9c0 	bl	800b344 <_free_r>
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	6360      	str	r0, [r4, #52]	; 0x34
 8009fc8:	e7c0      	b.n	8009f4c <__sflush_r+0x1c>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	4628      	mov	r0, r5
 8009fce:	47b0      	blx	r6
 8009fd0:	1c41      	adds	r1, r0, #1
 8009fd2:	d1c8      	bne.n	8009f66 <__sflush_r+0x36>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d0c5      	beq.n	8009f66 <__sflush_r+0x36>
 8009fda:	2b1d      	cmp	r3, #29
 8009fdc:	d001      	beq.n	8009fe2 <__sflush_r+0xb2>
 8009fde:	2b16      	cmp	r3, #22
 8009fe0:	d101      	bne.n	8009fe6 <__sflush_r+0xb6>
 8009fe2:	602f      	str	r7, [r5, #0]
 8009fe4:	e7b1      	b.n	8009f4a <__sflush_r+0x1a>
 8009fe6:	89a3      	ldrh	r3, [r4, #12]
 8009fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fec:	81a3      	strh	r3, [r4, #12]
 8009fee:	e7ad      	b.n	8009f4c <__sflush_r+0x1c>
 8009ff0:	690f      	ldr	r7, [r1, #16]
 8009ff2:	2f00      	cmp	r7, #0
 8009ff4:	d0a9      	beq.n	8009f4a <__sflush_r+0x1a>
 8009ff6:	0793      	lsls	r3, r2, #30
 8009ff8:	680e      	ldr	r6, [r1, #0]
 8009ffa:	bf08      	it	eq
 8009ffc:	694b      	ldreq	r3, [r1, #20]
 8009ffe:	600f      	str	r7, [r1, #0]
 800a000:	bf18      	it	ne
 800a002:	2300      	movne	r3, #0
 800a004:	eba6 0807 	sub.w	r8, r6, r7
 800a008:	608b      	str	r3, [r1, #8]
 800a00a:	f1b8 0f00 	cmp.w	r8, #0
 800a00e:	dd9c      	ble.n	8009f4a <__sflush_r+0x1a>
 800a010:	6a21      	ldr	r1, [r4, #32]
 800a012:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a014:	4643      	mov	r3, r8
 800a016:	463a      	mov	r2, r7
 800a018:	4628      	mov	r0, r5
 800a01a:	47b0      	blx	r6
 800a01c:	2800      	cmp	r0, #0
 800a01e:	dc06      	bgt.n	800a02e <__sflush_r+0xfe>
 800a020:	89a3      	ldrh	r3, [r4, #12]
 800a022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a026:	81a3      	strh	r3, [r4, #12]
 800a028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a02c:	e78e      	b.n	8009f4c <__sflush_r+0x1c>
 800a02e:	4407      	add	r7, r0
 800a030:	eba8 0800 	sub.w	r8, r8, r0
 800a034:	e7e9      	b.n	800a00a <__sflush_r+0xda>
 800a036:	bf00      	nop
 800a038:	dfbffffe 	.word	0xdfbffffe

0800a03c <_fflush_r>:
 800a03c:	b538      	push	{r3, r4, r5, lr}
 800a03e:	690b      	ldr	r3, [r1, #16]
 800a040:	4605      	mov	r5, r0
 800a042:	460c      	mov	r4, r1
 800a044:	b913      	cbnz	r3, 800a04c <_fflush_r+0x10>
 800a046:	2500      	movs	r5, #0
 800a048:	4628      	mov	r0, r5
 800a04a:	bd38      	pop	{r3, r4, r5, pc}
 800a04c:	b118      	cbz	r0, 800a056 <_fflush_r+0x1a>
 800a04e:	6a03      	ldr	r3, [r0, #32]
 800a050:	b90b      	cbnz	r3, 800a056 <_fflush_r+0x1a>
 800a052:	f000 f8a7 	bl	800a1a4 <__sinit>
 800a056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d0f3      	beq.n	800a046 <_fflush_r+0xa>
 800a05e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a060:	07d0      	lsls	r0, r2, #31
 800a062:	d404      	bmi.n	800a06e <_fflush_r+0x32>
 800a064:	0599      	lsls	r1, r3, #22
 800a066:	d402      	bmi.n	800a06e <_fflush_r+0x32>
 800a068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a06a:	f000 fac0 	bl	800a5ee <__retarget_lock_acquire_recursive>
 800a06e:	4628      	mov	r0, r5
 800a070:	4621      	mov	r1, r4
 800a072:	f7ff ff5d 	bl	8009f30 <__sflush_r>
 800a076:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a078:	07da      	lsls	r2, r3, #31
 800a07a:	4605      	mov	r5, r0
 800a07c:	d4e4      	bmi.n	800a048 <_fflush_r+0xc>
 800a07e:	89a3      	ldrh	r3, [r4, #12]
 800a080:	059b      	lsls	r3, r3, #22
 800a082:	d4e1      	bmi.n	800a048 <_fflush_r+0xc>
 800a084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a086:	f000 fab3 	bl	800a5f0 <__retarget_lock_release_recursive>
 800a08a:	e7dd      	b.n	800a048 <_fflush_r+0xc>

0800a08c <std>:
 800a08c:	2300      	movs	r3, #0
 800a08e:	b510      	push	{r4, lr}
 800a090:	4604      	mov	r4, r0
 800a092:	e9c0 3300 	strd	r3, r3, [r0]
 800a096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a09a:	6083      	str	r3, [r0, #8]
 800a09c:	8181      	strh	r1, [r0, #12]
 800a09e:	6643      	str	r3, [r0, #100]	; 0x64
 800a0a0:	81c2      	strh	r2, [r0, #14]
 800a0a2:	6183      	str	r3, [r0, #24]
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	2208      	movs	r2, #8
 800a0a8:	305c      	adds	r0, #92	; 0x5c
 800a0aa:	f000 f9cf 	bl	800a44c <memset>
 800a0ae:	4b0d      	ldr	r3, [pc, #52]	; (800a0e4 <std+0x58>)
 800a0b0:	6263      	str	r3, [r4, #36]	; 0x24
 800a0b2:	4b0d      	ldr	r3, [pc, #52]	; (800a0e8 <std+0x5c>)
 800a0b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a0b6:	4b0d      	ldr	r3, [pc, #52]	; (800a0ec <std+0x60>)
 800a0b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0ba:	4b0d      	ldr	r3, [pc, #52]	; (800a0f0 <std+0x64>)
 800a0bc:	6323      	str	r3, [r4, #48]	; 0x30
 800a0be:	4b0d      	ldr	r3, [pc, #52]	; (800a0f4 <std+0x68>)
 800a0c0:	6224      	str	r4, [r4, #32]
 800a0c2:	429c      	cmp	r4, r3
 800a0c4:	d006      	beq.n	800a0d4 <std+0x48>
 800a0c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a0ca:	4294      	cmp	r4, r2
 800a0cc:	d002      	beq.n	800a0d4 <std+0x48>
 800a0ce:	33d0      	adds	r3, #208	; 0xd0
 800a0d0:	429c      	cmp	r4, r3
 800a0d2:	d105      	bne.n	800a0e0 <std+0x54>
 800a0d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0dc:	f000 ba86 	b.w	800a5ec <__retarget_lock_init_recursive>
 800a0e0:	bd10      	pop	{r4, pc}
 800a0e2:	bf00      	nop
 800a0e4:	0800a29d 	.word	0x0800a29d
 800a0e8:	0800a2bf 	.word	0x0800a2bf
 800a0ec:	0800a2f7 	.word	0x0800a2f7
 800a0f0:	0800a31b 	.word	0x0800a31b
 800a0f4:	2001470c 	.word	0x2001470c

0800a0f8 <stdio_exit_handler>:
 800a0f8:	4a02      	ldr	r2, [pc, #8]	; (800a104 <stdio_exit_handler+0xc>)
 800a0fa:	4903      	ldr	r1, [pc, #12]	; (800a108 <stdio_exit_handler+0x10>)
 800a0fc:	4803      	ldr	r0, [pc, #12]	; (800a10c <stdio_exit_handler+0x14>)
 800a0fe:	f000 b87b 	b.w	800a1f8 <_fwalk_sglue>
 800a102:	bf00      	nop
 800a104:	20000028 	.word	0x20000028
 800a108:	0800a03d 	.word	0x0800a03d
 800a10c:	200001a0 	.word	0x200001a0

0800a110 <cleanup_stdio>:
 800a110:	6841      	ldr	r1, [r0, #4]
 800a112:	4b0c      	ldr	r3, [pc, #48]	; (800a144 <cleanup_stdio+0x34>)
 800a114:	4299      	cmp	r1, r3
 800a116:	b510      	push	{r4, lr}
 800a118:	4604      	mov	r4, r0
 800a11a:	d001      	beq.n	800a120 <cleanup_stdio+0x10>
 800a11c:	f7ff ff8e 	bl	800a03c <_fflush_r>
 800a120:	68a1      	ldr	r1, [r4, #8]
 800a122:	4b09      	ldr	r3, [pc, #36]	; (800a148 <cleanup_stdio+0x38>)
 800a124:	4299      	cmp	r1, r3
 800a126:	d002      	beq.n	800a12e <cleanup_stdio+0x1e>
 800a128:	4620      	mov	r0, r4
 800a12a:	f7ff ff87 	bl	800a03c <_fflush_r>
 800a12e:	68e1      	ldr	r1, [r4, #12]
 800a130:	4b06      	ldr	r3, [pc, #24]	; (800a14c <cleanup_stdio+0x3c>)
 800a132:	4299      	cmp	r1, r3
 800a134:	d004      	beq.n	800a140 <cleanup_stdio+0x30>
 800a136:	4620      	mov	r0, r4
 800a138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a13c:	f7ff bf7e 	b.w	800a03c <_fflush_r>
 800a140:	bd10      	pop	{r4, pc}
 800a142:	bf00      	nop
 800a144:	2001470c 	.word	0x2001470c
 800a148:	20014774 	.word	0x20014774
 800a14c:	200147dc 	.word	0x200147dc

0800a150 <global_stdio_init.part.0>:
 800a150:	b510      	push	{r4, lr}
 800a152:	4b0b      	ldr	r3, [pc, #44]	; (800a180 <global_stdio_init.part.0+0x30>)
 800a154:	4c0b      	ldr	r4, [pc, #44]	; (800a184 <global_stdio_init.part.0+0x34>)
 800a156:	4a0c      	ldr	r2, [pc, #48]	; (800a188 <global_stdio_init.part.0+0x38>)
 800a158:	601a      	str	r2, [r3, #0]
 800a15a:	4620      	mov	r0, r4
 800a15c:	2200      	movs	r2, #0
 800a15e:	2104      	movs	r1, #4
 800a160:	f7ff ff94 	bl	800a08c <std>
 800a164:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a168:	2201      	movs	r2, #1
 800a16a:	2109      	movs	r1, #9
 800a16c:	f7ff ff8e 	bl	800a08c <std>
 800a170:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a174:	2202      	movs	r2, #2
 800a176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a17a:	2112      	movs	r1, #18
 800a17c:	f7ff bf86 	b.w	800a08c <std>
 800a180:	20014844 	.word	0x20014844
 800a184:	2001470c 	.word	0x2001470c
 800a188:	0800a0f9 	.word	0x0800a0f9

0800a18c <__sfp_lock_acquire>:
 800a18c:	4801      	ldr	r0, [pc, #4]	; (800a194 <__sfp_lock_acquire+0x8>)
 800a18e:	f000 ba2e 	b.w	800a5ee <__retarget_lock_acquire_recursive>
 800a192:	bf00      	nop
 800a194:	2001484d 	.word	0x2001484d

0800a198 <__sfp_lock_release>:
 800a198:	4801      	ldr	r0, [pc, #4]	; (800a1a0 <__sfp_lock_release+0x8>)
 800a19a:	f000 ba29 	b.w	800a5f0 <__retarget_lock_release_recursive>
 800a19e:	bf00      	nop
 800a1a0:	2001484d 	.word	0x2001484d

0800a1a4 <__sinit>:
 800a1a4:	b510      	push	{r4, lr}
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	f7ff fff0 	bl	800a18c <__sfp_lock_acquire>
 800a1ac:	6a23      	ldr	r3, [r4, #32]
 800a1ae:	b11b      	cbz	r3, 800a1b8 <__sinit+0x14>
 800a1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1b4:	f7ff bff0 	b.w	800a198 <__sfp_lock_release>
 800a1b8:	4b04      	ldr	r3, [pc, #16]	; (800a1cc <__sinit+0x28>)
 800a1ba:	6223      	str	r3, [r4, #32]
 800a1bc:	4b04      	ldr	r3, [pc, #16]	; (800a1d0 <__sinit+0x2c>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1f5      	bne.n	800a1b0 <__sinit+0xc>
 800a1c4:	f7ff ffc4 	bl	800a150 <global_stdio_init.part.0>
 800a1c8:	e7f2      	b.n	800a1b0 <__sinit+0xc>
 800a1ca:	bf00      	nop
 800a1cc:	0800a111 	.word	0x0800a111
 800a1d0:	20014844 	.word	0x20014844

0800a1d4 <fiprintf>:
 800a1d4:	b40e      	push	{r1, r2, r3}
 800a1d6:	b503      	push	{r0, r1, lr}
 800a1d8:	4601      	mov	r1, r0
 800a1da:	ab03      	add	r3, sp, #12
 800a1dc:	4805      	ldr	r0, [pc, #20]	; (800a1f4 <fiprintf+0x20>)
 800a1de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1e2:	6800      	ldr	r0, [r0, #0]
 800a1e4:	9301      	str	r3, [sp, #4]
 800a1e6:	f001 fe1f 	bl	800be28 <_vfiprintf_r>
 800a1ea:	b002      	add	sp, #8
 800a1ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1f0:	b003      	add	sp, #12
 800a1f2:	4770      	bx	lr
 800a1f4:	200001ec 	.word	0x200001ec

0800a1f8 <_fwalk_sglue>:
 800a1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1fc:	4607      	mov	r7, r0
 800a1fe:	4688      	mov	r8, r1
 800a200:	4614      	mov	r4, r2
 800a202:	2600      	movs	r6, #0
 800a204:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a208:	f1b9 0901 	subs.w	r9, r9, #1
 800a20c:	d505      	bpl.n	800a21a <_fwalk_sglue+0x22>
 800a20e:	6824      	ldr	r4, [r4, #0]
 800a210:	2c00      	cmp	r4, #0
 800a212:	d1f7      	bne.n	800a204 <_fwalk_sglue+0xc>
 800a214:	4630      	mov	r0, r6
 800a216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a21a:	89ab      	ldrh	r3, [r5, #12]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d907      	bls.n	800a230 <_fwalk_sglue+0x38>
 800a220:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a224:	3301      	adds	r3, #1
 800a226:	d003      	beq.n	800a230 <_fwalk_sglue+0x38>
 800a228:	4629      	mov	r1, r5
 800a22a:	4638      	mov	r0, r7
 800a22c:	47c0      	blx	r8
 800a22e:	4306      	orrs	r6, r0
 800a230:	3568      	adds	r5, #104	; 0x68
 800a232:	e7e9      	b.n	800a208 <_fwalk_sglue+0x10>

0800a234 <sniprintf>:
 800a234:	b40c      	push	{r2, r3}
 800a236:	b530      	push	{r4, r5, lr}
 800a238:	4b17      	ldr	r3, [pc, #92]	; (800a298 <sniprintf+0x64>)
 800a23a:	1e0c      	subs	r4, r1, #0
 800a23c:	681d      	ldr	r5, [r3, #0]
 800a23e:	b09d      	sub	sp, #116	; 0x74
 800a240:	da08      	bge.n	800a254 <sniprintf+0x20>
 800a242:	238b      	movs	r3, #139	; 0x8b
 800a244:	602b      	str	r3, [r5, #0]
 800a246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a24a:	b01d      	add	sp, #116	; 0x74
 800a24c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a250:	b002      	add	sp, #8
 800a252:	4770      	bx	lr
 800a254:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a258:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a25c:	bf14      	ite	ne
 800a25e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a262:	4623      	moveq	r3, r4
 800a264:	9304      	str	r3, [sp, #16]
 800a266:	9307      	str	r3, [sp, #28]
 800a268:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a26c:	9002      	str	r0, [sp, #8]
 800a26e:	9006      	str	r0, [sp, #24]
 800a270:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a274:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a276:	ab21      	add	r3, sp, #132	; 0x84
 800a278:	a902      	add	r1, sp, #8
 800a27a:	4628      	mov	r0, r5
 800a27c:	9301      	str	r3, [sp, #4]
 800a27e:	f001 fcab 	bl	800bbd8 <_svfiprintf_r>
 800a282:	1c43      	adds	r3, r0, #1
 800a284:	bfbc      	itt	lt
 800a286:	238b      	movlt	r3, #139	; 0x8b
 800a288:	602b      	strlt	r3, [r5, #0]
 800a28a:	2c00      	cmp	r4, #0
 800a28c:	d0dd      	beq.n	800a24a <sniprintf+0x16>
 800a28e:	9b02      	ldr	r3, [sp, #8]
 800a290:	2200      	movs	r2, #0
 800a292:	701a      	strb	r2, [r3, #0]
 800a294:	e7d9      	b.n	800a24a <sniprintf+0x16>
 800a296:	bf00      	nop
 800a298:	200001ec 	.word	0x200001ec

0800a29c <__sread>:
 800a29c:	b510      	push	{r4, lr}
 800a29e:	460c      	mov	r4, r1
 800a2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a4:	f000 f930 	bl	800a508 <_read_r>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	bfab      	itete	ge
 800a2ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2ae:	89a3      	ldrhlt	r3, [r4, #12]
 800a2b0:	181b      	addge	r3, r3, r0
 800a2b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2b6:	bfac      	ite	ge
 800a2b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2ba:	81a3      	strhlt	r3, [r4, #12]
 800a2bc:	bd10      	pop	{r4, pc}

0800a2be <__swrite>:
 800a2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c2:	461f      	mov	r7, r3
 800a2c4:	898b      	ldrh	r3, [r1, #12]
 800a2c6:	05db      	lsls	r3, r3, #23
 800a2c8:	4605      	mov	r5, r0
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	4616      	mov	r6, r2
 800a2ce:	d505      	bpl.n	800a2dc <__swrite+0x1e>
 800a2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f000 f904 	bl	800a4e4 <_lseek_r>
 800a2dc:	89a3      	ldrh	r3, [r4, #12]
 800a2de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2e6:	81a3      	strh	r3, [r4, #12]
 800a2e8:	4632      	mov	r2, r6
 800a2ea:	463b      	mov	r3, r7
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f2:	f000 b93f 	b.w	800a574 <_write_r>

0800a2f6 <__sseek>:
 800a2f6:	b510      	push	{r4, lr}
 800a2f8:	460c      	mov	r4, r1
 800a2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fe:	f000 f8f1 	bl	800a4e4 <_lseek_r>
 800a302:	1c43      	adds	r3, r0, #1
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	bf15      	itete	ne
 800a308:	6560      	strne	r0, [r4, #84]	; 0x54
 800a30a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a30e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a312:	81a3      	strheq	r3, [r4, #12]
 800a314:	bf18      	it	ne
 800a316:	81a3      	strhne	r3, [r4, #12]
 800a318:	bd10      	pop	{r4, pc}

0800a31a <__sclose>:
 800a31a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31e:	f000 b8d1 	b.w	800a4c4 <_close_r>

0800a322 <__swbuf_r>:
 800a322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a324:	460e      	mov	r6, r1
 800a326:	4614      	mov	r4, r2
 800a328:	4605      	mov	r5, r0
 800a32a:	b118      	cbz	r0, 800a334 <__swbuf_r+0x12>
 800a32c:	6a03      	ldr	r3, [r0, #32]
 800a32e:	b90b      	cbnz	r3, 800a334 <__swbuf_r+0x12>
 800a330:	f7ff ff38 	bl	800a1a4 <__sinit>
 800a334:	69a3      	ldr	r3, [r4, #24]
 800a336:	60a3      	str	r3, [r4, #8]
 800a338:	89a3      	ldrh	r3, [r4, #12]
 800a33a:	071a      	lsls	r2, r3, #28
 800a33c:	d525      	bpl.n	800a38a <__swbuf_r+0x68>
 800a33e:	6923      	ldr	r3, [r4, #16]
 800a340:	b31b      	cbz	r3, 800a38a <__swbuf_r+0x68>
 800a342:	6823      	ldr	r3, [r4, #0]
 800a344:	6922      	ldr	r2, [r4, #16]
 800a346:	1a98      	subs	r0, r3, r2
 800a348:	6963      	ldr	r3, [r4, #20]
 800a34a:	b2f6      	uxtb	r6, r6
 800a34c:	4283      	cmp	r3, r0
 800a34e:	4637      	mov	r7, r6
 800a350:	dc04      	bgt.n	800a35c <__swbuf_r+0x3a>
 800a352:	4621      	mov	r1, r4
 800a354:	4628      	mov	r0, r5
 800a356:	f7ff fe71 	bl	800a03c <_fflush_r>
 800a35a:	b9e0      	cbnz	r0, 800a396 <__swbuf_r+0x74>
 800a35c:	68a3      	ldr	r3, [r4, #8]
 800a35e:	3b01      	subs	r3, #1
 800a360:	60a3      	str	r3, [r4, #8]
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	1c5a      	adds	r2, r3, #1
 800a366:	6022      	str	r2, [r4, #0]
 800a368:	701e      	strb	r6, [r3, #0]
 800a36a:	6962      	ldr	r2, [r4, #20]
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	429a      	cmp	r2, r3
 800a370:	d004      	beq.n	800a37c <__swbuf_r+0x5a>
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	07db      	lsls	r3, r3, #31
 800a376:	d506      	bpl.n	800a386 <__swbuf_r+0x64>
 800a378:	2e0a      	cmp	r6, #10
 800a37a:	d104      	bne.n	800a386 <__swbuf_r+0x64>
 800a37c:	4621      	mov	r1, r4
 800a37e:	4628      	mov	r0, r5
 800a380:	f7ff fe5c 	bl	800a03c <_fflush_r>
 800a384:	b938      	cbnz	r0, 800a396 <__swbuf_r+0x74>
 800a386:	4638      	mov	r0, r7
 800a388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a38a:	4621      	mov	r1, r4
 800a38c:	4628      	mov	r0, r5
 800a38e:	f000 f805 	bl	800a39c <__swsetup_r>
 800a392:	2800      	cmp	r0, #0
 800a394:	d0d5      	beq.n	800a342 <__swbuf_r+0x20>
 800a396:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a39a:	e7f4      	b.n	800a386 <__swbuf_r+0x64>

0800a39c <__swsetup_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	4b2a      	ldr	r3, [pc, #168]	; (800a448 <__swsetup_r+0xac>)
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	6818      	ldr	r0, [r3, #0]
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	b118      	cbz	r0, 800a3b0 <__swsetup_r+0x14>
 800a3a8:	6a03      	ldr	r3, [r0, #32]
 800a3aa:	b90b      	cbnz	r3, 800a3b0 <__swsetup_r+0x14>
 800a3ac:	f7ff fefa 	bl	800a1a4 <__sinit>
 800a3b0:	89a3      	ldrh	r3, [r4, #12]
 800a3b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3b6:	0718      	lsls	r0, r3, #28
 800a3b8:	d422      	bmi.n	800a400 <__swsetup_r+0x64>
 800a3ba:	06d9      	lsls	r1, r3, #27
 800a3bc:	d407      	bmi.n	800a3ce <__swsetup_r+0x32>
 800a3be:	2309      	movs	r3, #9
 800a3c0:	602b      	str	r3, [r5, #0]
 800a3c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3c6:	81a3      	strh	r3, [r4, #12]
 800a3c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3cc:	e034      	b.n	800a438 <__swsetup_r+0x9c>
 800a3ce:	0758      	lsls	r0, r3, #29
 800a3d0:	d512      	bpl.n	800a3f8 <__swsetup_r+0x5c>
 800a3d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3d4:	b141      	cbz	r1, 800a3e8 <__swsetup_r+0x4c>
 800a3d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3da:	4299      	cmp	r1, r3
 800a3dc:	d002      	beq.n	800a3e4 <__swsetup_r+0x48>
 800a3de:	4628      	mov	r0, r5
 800a3e0:	f000 ffb0 	bl	800b344 <_free_r>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	6363      	str	r3, [r4, #52]	; 0x34
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3ee:	81a3      	strh	r3, [r4, #12]
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	6063      	str	r3, [r4, #4]
 800a3f4:	6923      	ldr	r3, [r4, #16]
 800a3f6:	6023      	str	r3, [r4, #0]
 800a3f8:	89a3      	ldrh	r3, [r4, #12]
 800a3fa:	f043 0308 	orr.w	r3, r3, #8
 800a3fe:	81a3      	strh	r3, [r4, #12]
 800a400:	6923      	ldr	r3, [r4, #16]
 800a402:	b94b      	cbnz	r3, 800a418 <__swsetup_r+0x7c>
 800a404:	89a3      	ldrh	r3, [r4, #12]
 800a406:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a40a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a40e:	d003      	beq.n	800a418 <__swsetup_r+0x7c>
 800a410:	4621      	mov	r1, r4
 800a412:	4628      	mov	r0, r5
 800a414:	f001 fe48 	bl	800c0a8 <__smakebuf_r>
 800a418:	89a0      	ldrh	r0, [r4, #12]
 800a41a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a41e:	f010 0301 	ands.w	r3, r0, #1
 800a422:	d00a      	beq.n	800a43a <__swsetup_r+0x9e>
 800a424:	2300      	movs	r3, #0
 800a426:	60a3      	str	r3, [r4, #8]
 800a428:	6963      	ldr	r3, [r4, #20]
 800a42a:	425b      	negs	r3, r3
 800a42c:	61a3      	str	r3, [r4, #24]
 800a42e:	6923      	ldr	r3, [r4, #16]
 800a430:	b943      	cbnz	r3, 800a444 <__swsetup_r+0xa8>
 800a432:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a436:	d1c4      	bne.n	800a3c2 <__swsetup_r+0x26>
 800a438:	bd38      	pop	{r3, r4, r5, pc}
 800a43a:	0781      	lsls	r1, r0, #30
 800a43c:	bf58      	it	pl
 800a43e:	6963      	ldrpl	r3, [r4, #20]
 800a440:	60a3      	str	r3, [r4, #8]
 800a442:	e7f4      	b.n	800a42e <__swsetup_r+0x92>
 800a444:	2000      	movs	r0, #0
 800a446:	e7f7      	b.n	800a438 <__swsetup_r+0x9c>
 800a448:	200001ec 	.word	0x200001ec

0800a44c <memset>:
 800a44c:	4402      	add	r2, r0
 800a44e:	4603      	mov	r3, r0
 800a450:	4293      	cmp	r3, r2
 800a452:	d100      	bne.n	800a456 <memset+0xa>
 800a454:	4770      	bx	lr
 800a456:	f803 1b01 	strb.w	r1, [r3], #1
 800a45a:	e7f9      	b.n	800a450 <memset+0x4>

0800a45c <_raise_r>:
 800a45c:	291f      	cmp	r1, #31
 800a45e:	b538      	push	{r3, r4, r5, lr}
 800a460:	4604      	mov	r4, r0
 800a462:	460d      	mov	r5, r1
 800a464:	d904      	bls.n	800a470 <_raise_r+0x14>
 800a466:	2316      	movs	r3, #22
 800a468:	6003      	str	r3, [r0, #0]
 800a46a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a46e:	bd38      	pop	{r3, r4, r5, pc}
 800a470:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a472:	b112      	cbz	r2, 800a47a <_raise_r+0x1e>
 800a474:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a478:	b94b      	cbnz	r3, 800a48e <_raise_r+0x32>
 800a47a:	4620      	mov	r0, r4
 800a47c:	f000 f868 	bl	800a550 <_getpid_r>
 800a480:	462a      	mov	r2, r5
 800a482:	4601      	mov	r1, r0
 800a484:	4620      	mov	r0, r4
 800a486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a48a:	f000 b84f 	b.w	800a52c <_kill_r>
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d00a      	beq.n	800a4a8 <_raise_r+0x4c>
 800a492:	1c59      	adds	r1, r3, #1
 800a494:	d103      	bne.n	800a49e <_raise_r+0x42>
 800a496:	2316      	movs	r3, #22
 800a498:	6003      	str	r3, [r0, #0]
 800a49a:	2001      	movs	r0, #1
 800a49c:	e7e7      	b.n	800a46e <_raise_r+0x12>
 800a49e:	2400      	movs	r4, #0
 800a4a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	4798      	blx	r3
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	e7e0      	b.n	800a46e <_raise_r+0x12>

0800a4ac <raise>:
 800a4ac:	4b02      	ldr	r3, [pc, #8]	; (800a4b8 <raise+0xc>)
 800a4ae:	4601      	mov	r1, r0
 800a4b0:	6818      	ldr	r0, [r3, #0]
 800a4b2:	f7ff bfd3 	b.w	800a45c <_raise_r>
 800a4b6:	bf00      	nop
 800a4b8:	200001ec 	.word	0x200001ec

0800a4bc <_localeconv_r>:
 800a4bc:	4800      	ldr	r0, [pc, #0]	; (800a4c0 <_localeconv_r+0x4>)
 800a4be:	4770      	bx	lr
 800a4c0:	20000124 	.word	0x20000124

0800a4c4 <_close_r>:
 800a4c4:	b538      	push	{r3, r4, r5, lr}
 800a4c6:	4d06      	ldr	r5, [pc, #24]	; (800a4e0 <_close_r+0x1c>)
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	4608      	mov	r0, r1
 800a4ce:	602b      	str	r3, [r5, #0]
 800a4d0:	f7f8 f965 	bl	800279e <_close>
 800a4d4:	1c43      	adds	r3, r0, #1
 800a4d6:	d102      	bne.n	800a4de <_close_r+0x1a>
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	b103      	cbz	r3, 800a4de <_close_r+0x1a>
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	20014848 	.word	0x20014848

0800a4e4 <_lseek_r>:
 800a4e4:	b538      	push	{r3, r4, r5, lr}
 800a4e6:	4d07      	ldr	r5, [pc, #28]	; (800a504 <_lseek_r+0x20>)
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	4608      	mov	r0, r1
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	602a      	str	r2, [r5, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f7f8 f97a 	bl	80027ec <_lseek>
 800a4f8:	1c43      	adds	r3, r0, #1
 800a4fa:	d102      	bne.n	800a502 <_lseek_r+0x1e>
 800a4fc:	682b      	ldr	r3, [r5, #0]
 800a4fe:	b103      	cbz	r3, 800a502 <_lseek_r+0x1e>
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	bd38      	pop	{r3, r4, r5, pc}
 800a504:	20014848 	.word	0x20014848

0800a508 <_read_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	4d07      	ldr	r5, [pc, #28]	; (800a528 <_read_r+0x20>)
 800a50c:	4604      	mov	r4, r0
 800a50e:	4608      	mov	r0, r1
 800a510:	4611      	mov	r1, r2
 800a512:	2200      	movs	r2, #0
 800a514:	602a      	str	r2, [r5, #0]
 800a516:	461a      	mov	r2, r3
 800a518:	f7f8 f908 	bl	800272c <_read>
 800a51c:	1c43      	adds	r3, r0, #1
 800a51e:	d102      	bne.n	800a526 <_read_r+0x1e>
 800a520:	682b      	ldr	r3, [r5, #0]
 800a522:	b103      	cbz	r3, 800a526 <_read_r+0x1e>
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	20014848 	.word	0x20014848

0800a52c <_kill_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	4d07      	ldr	r5, [pc, #28]	; (800a54c <_kill_r+0x20>)
 800a530:	2300      	movs	r3, #0
 800a532:	4604      	mov	r4, r0
 800a534:	4608      	mov	r0, r1
 800a536:	4611      	mov	r1, r2
 800a538:	602b      	str	r3, [r5, #0]
 800a53a:	f7f8 f8dd 	bl	80026f8 <_kill>
 800a53e:	1c43      	adds	r3, r0, #1
 800a540:	d102      	bne.n	800a548 <_kill_r+0x1c>
 800a542:	682b      	ldr	r3, [r5, #0]
 800a544:	b103      	cbz	r3, 800a548 <_kill_r+0x1c>
 800a546:	6023      	str	r3, [r4, #0]
 800a548:	bd38      	pop	{r3, r4, r5, pc}
 800a54a:	bf00      	nop
 800a54c:	20014848 	.word	0x20014848

0800a550 <_getpid_r>:
 800a550:	f7f8 b8ca 	b.w	80026e8 <_getpid>

0800a554 <_sbrk_r>:
 800a554:	b538      	push	{r3, r4, r5, lr}
 800a556:	4d06      	ldr	r5, [pc, #24]	; (800a570 <_sbrk_r+0x1c>)
 800a558:	2300      	movs	r3, #0
 800a55a:	4604      	mov	r4, r0
 800a55c:	4608      	mov	r0, r1
 800a55e:	602b      	str	r3, [r5, #0]
 800a560:	f7f8 f952 	bl	8002808 <_sbrk>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d102      	bne.n	800a56e <_sbrk_r+0x1a>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	b103      	cbz	r3, 800a56e <_sbrk_r+0x1a>
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	20014848 	.word	0x20014848

0800a574 <_write_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	4d07      	ldr	r5, [pc, #28]	; (800a594 <_write_r+0x20>)
 800a578:	4604      	mov	r4, r0
 800a57a:	4608      	mov	r0, r1
 800a57c:	4611      	mov	r1, r2
 800a57e:	2200      	movs	r2, #0
 800a580:	602a      	str	r2, [r5, #0]
 800a582:	461a      	mov	r2, r3
 800a584:	f7f8 f8ef 	bl	8002766 <_write>
 800a588:	1c43      	adds	r3, r0, #1
 800a58a:	d102      	bne.n	800a592 <_write_r+0x1e>
 800a58c:	682b      	ldr	r3, [r5, #0]
 800a58e:	b103      	cbz	r3, 800a592 <_write_r+0x1e>
 800a590:	6023      	str	r3, [r4, #0]
 800a592:	bd38      	pop	{r3, r4, r5, pc}
 800a594:	20014848 	.word	0x20014848

0800a598 <__errno>:
 800a598:	4b01      	ldr	r3, [pc, #4]	; (800a5a0 <__errno+0x8>)
 800a59a:	6818      	ldr	r0, [r3, #0]
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	200001ec 	.word	0x200001ec

0800a5a4 <__libc_init_array>:
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	4d0d      	ldr	r5, [pc, #52]	; (800a5dc <__libc_init_array+0x38>)
 800a5a8:	4c0d      	ldr	r4, [pc, #52]	; (800a5e0 <__libc_init_array+0x3c>)
 800a5aa:	1b64      	subs	r4, r4, r5
 800a5ac:	10a4      	asrs	r4, r4, #2
 800a5ae:	2600      	movs	r6, #0
 800a5b0:	42a6      	cmp	r6, r4
 800a5b2:	d109      	bne.n	800a5c8 <__libc_init_array+0x24>
 800a5b4:	4d0b      	ldr	r5, [pc, #44]	; (800a5e4 <__libc_init_array+0x40>)
 800a5b6:	4c0c      	ldr	r4, [pc, #48]	; (800a5e8 <__libc_init_array+0x44>)
 800a5b8:	f001 fe04 	bl	800c1c4 <_init>
 800a5bc:	1b64      	subs	r4, r4, r5
 800a5be:	10a4      	asrs	r4, r4, #2
 800a5c0:	2600      	movs	r6, #0
 800a5c2:	42a6      	cmp	r6, r4
 800a5c4:	d105      	bne.n	800a5d2 <__libc_init_array+0x2e>
 800a5c6:	bd70      	pop	{r4, r5, r6, pc}
 800a5c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5cc:	4798      	blx	r3
 800a5ce:	3601      	adds	r6, #1
 800a5d0:	e7ee      	b.n	800a5b0 <__libc_init_array+0xc>
 800a5d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5d6:	4798      	blx	r3
 800a5d8:	3601      	adds	r6, #1
 800a5da:	e7f2      	b.n	800a5c2 <__libc_init_array+0x1e>
 800a5dc:	0801f708 	.word	0x0801f708
 800a5e0:	0801f708 	.word	0x0801f708
 800a5e4:	0801f708 	.word	0x0801f708
 800a5e8:	0801f70c 	.word	0x0801f70c

0800a5ec <__retarget_lock_init_recursive>:
 800a5ec:	4770      	bx	lr

0800a5ee <__retarget_lock_acquire_recursive>:
 800a5ee:	4770      	bx	lr

0800a5f0 <__retarget_lock_release_recursive>:
 800a5f0:	4770      	bx	lr

0800a5f2 <memcpy>:
 800a5f2:	440a      	add	r2, r1
 800a5f4:	4291      	cmp	r1, r2
 800a5f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a5fa:	d100      	bne.n	800a5fe <memcpy+0xc>
 800a5fc:	4770      	bx	lr
 800a5fe:	b510      	push	{r4, lr}
 800a600:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a604:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a608:	4291      	cmp	r1, r2
 800a60a:	d1f9      	bne.n	800a600 <memcpy+0xe>
 800a60c:	bd10      	pop	{r4, pc}
	...

0800a610 <__assert_func>:
 800a610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a612:	4614      	mov	r4, r2
 800a614:	461a      	mov	r2, r3
 800a616:	4b09      	ldr	r3, [pc, #36]	; (800a63c <__assert_func+0x2c>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4605      	mov	r5, r0
 800a61c:	68d8      	ldr	r0, [r3, #12]
 800a61e:	b14c      	cbz	r4, 800a634 <__assert_func+0x24>
 800a620:	4b07      	ldr	r3, [pc, #28]	; (800a640 <__assert_func+0x30>)
 800a622:	9100      	str	r1, [sp, #0]
 800a624:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a628:	4906      	ldr	r1, [pc, #24]	; (800a644 <__assert_func+0x34>)
 800a62a:	462b      	mov	r3, r5
 800a62c:	f7ff fdd2 	bl	800a1d4 <fiprintf>
 800a630:	f7fe ff2c 	bl	800948c <abort>
 800a634:	4b04      	ldr	r3, [pc, #16]	; (800a648 <__assert_func+0x38>)
 800a636:	461c      	mov	r4, r3
 800a638:	e7f3      	b.n	800a622 <__assert_func+0x12>
 800a63a:	bf00      	nop
 800a63c:	200001ec 	.word	0x200001ec
 800a640:	0801f4c7 	.word	0x0801f4c7
 800a644:	0801f4d4 	.word	0x0801f4d4
 800a648:	0801f502 	.word	0x0801f502

0800a64c <quorem>:
 800a64c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a650:	6903      	ldr	r3, [r0, #16]
 800a652:	690c      	ldr	r4, [r1, #16]
 800a654:	42a3      	cmp	r3, r4
 800a656:	4607      	mov	r7, r0
 800a658:	db7e      	blt.n	800a758 <quorem+0x10c>
 800a65a:	3c01      	subs	r4, #1
 800a65c:	f101 0814 	add.w	r8, r1, #20
 800a660:	f100 0514 	add.w	r5, r0, #20
 800a664:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a668:	9301      	str	r3, [sp, #4]
 800a66a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a66e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a672:	3301      	adds	r3, #1
 800a674:	429a      	cmp	r2, r3
 800a676:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a67a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a67e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a682:	d331      	bcc.n	800a6e8 <quorem+0x9c>
 800a684:	f04f 0e00 	mov.w	lr, #0
 800a688:	4640      	mov	r0, r8
 800a68a:	46ac      	mov	ip, r5
 800a68c:	46f2      	mov	sl, lr
 800a68e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a692:	b293      	uxth	r3, r2
 800a694:	fb06 e303 	mla	r3, r6, r3, lr
 800a698:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a69c:	0c1a      	lsrs	r2, r3, #16
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	ebaa 0303 	sub.w	r3, sl, r3
 800a6a4:	f8dc a000 	ldr.w	sl, [ip]
 800a6a8:	fa13 f38a 	uxtah	r3, r3, sl
 800a6ac:	fb06 220e 	mla	r2, r6, lr, r2
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	9b00      	ldr	r3, [sp, #0]
 800a6b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a6b8:	b292      	uxth	r2, r2
 800a6ba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a6be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6c2:	f8bd 3000 	ldrh.w	r3, [sp]
 800a6c6:	4581      	cmp	r9, r0
 800a6c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6cc:	f84c 3b04 	str.w	r3, [ip], #4
 800a6d0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a6d4:	d2db      	bcs.n	800a68e <quorem+0x42>
 800a6d6:	f855 300b 	ldr.w	r3, [r5, fp]
 800a6da:	b92b      	cbnz	r3, 800a6e8 <quorem+0x9c>
 800a6dc:	9b01      	ldr	r3, [sp, #4]
 800a6de:	3b04      	subs	r3, #4
 800a6e0:	429d      	cmp	r5, r3
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	d32c      	bcc.n	800a740 <quorem+0xf4>
 800a6e6:	613c      	str	r4, [r7, #16]
 800a6e8:	4638      	mov	r0, r7
 800a6ea:	f001 f905 	bl	800b8f8 <__mcmp>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	db22      	blt.n	800a738 <quorem+0xec>
 800a6f2:	3601      	adds	r6, #1
 800a6f4:	4629      	mov	r1, r5
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6fc:	f8d1 c000 	ldr.w	ip, [r1]
 800a700:	b293      	uxth	r3, r2
 800a702:	1ac3      	subs	r3, r0, r3
 800a704:	0c12      	lsrs	r2, r2, #16
 800a706:	fa13 f38c 	uxtah	r3, r3, ip
 800a70a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a70e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a712:	b29b      	uxth	r3, r3
 800a714:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a718:	45c1      	cmp	r9, r8
 800a71a:	f841 3b04 	str.w	r3, [r1], #4
 800a71e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a722:	d2e9      	bcs.n	800a6f8 <quorem+0xac>
 800a724:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a728:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a72c:	b922      	cbnz	r2, 800a738 <quorem+0xec>
 800a72e:	3b04      	subs	r3, #4
 800a730:	429d      	cmp	r5, r3
 800a732:	461a      	mov	r2, r3
 800a734:	d30a      	bcc.n	800a74c <quorem+0x100>
 800a736:	613c      	str	r4, [r7, #16]
 800a738:	4630      	mov	r0, r6
 800a73a:	b003      	add	sp, #12
 800a73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a740:	6812      	ldr	r2, [r2, #0]
 800a742:	3b04      	subs	r3, #4
 800a744:	2a00      	cmp	r2, #0
 800a746:	d1ce      	bne.n	800a6e6 <quorem+0x9a>
 800a748:	3c01      	subs	r4, #1
 800a74a:	e7c9      	b.n	800a6e0 <quorem+0x94>
 800a74c:	6812      	ldr	r2, [r2, #0]
 800a74e:	3b04      	subs	r3, #4
 800a750:	2a00      	cmp	r2, #0
 800a752:	d1f0      	bne.n	800a736 <quorem+0xea>
 800a754:	3c01      	subs	r4, #1
 800a756:	e7eb      	b.n	800a730 <quorem+0xe4>
 800a758:	2000      	movs	r0, #0
 800a75a:	e7ee      	b.n	800a73a <quorem+0xee>
 800a75c:	0000      	movs	r0, r0
	...

0800a760 <_dtoa_r>:
 800a760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a764:	ed2d 8b04 	vpush	{d8-d9}
 800a768:	69c5      	ldr	r5, [r0, #28]
 800a76a:	b093      	sub	sp, #76	; 0x4c
 800a76c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a770:	ec57 6b10 	vmov	r6, r7, d0
 800a774:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a778:	9107      	str	r1, [sp, #28]
 800a77a:	4604      	mov	r4, r0
 800a77c:	920a      	str	r2, [sp, #40]	; 0x28
 800a77e:	930d      	str	r3, [sp, #52]	; 0x34
 800a780:	b975      	cbnz	r5, 800a7a0 <_dtoa_r+0x40>
 800a782:	2010      	movs	r0, #16
 800a784:	f7fe fe8a 	bl	800949c <malloc>
 800a788:	4602      	mov	r2, r0
 800a78a:	61e0      	str	r0, [r4, #28]
 800a78c:	b920      	cbnz	r0, 800a798 <_dtoa_r+0x38>
 800a78e:	4bae      	ldr	r3, [pc, #696]	; (800aa48 <_dtoa_r+0x2e8>)
 800a790:	21ef      	movs	r1, #239	; 0xef
 800a792:	48ae      	ldr	r0, [pc, #696]	; (800aa4c <_dtoa_r+0x2ec>)
 800a794:	f7ff ff3c 	bl	800a610 <__assert_func>
 800a798:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a79c:	6005      	str	r5, [r0, #0]
 800a79e:	60c5      	str	r5, [r0, #12]
 800a7a0:	69e3      	ldr	r3, [r4, #28]
 800a7a2:	6819      	ldr	r1, [r3, #0]
 800a7a4:	b151      	cbz	r1, 800a7bc <_dtoa_r+0x5c>
 800a7a6:	685a      	ldr	r2, [r3, #4]
 800a7a8:	604a      	str	r2, [r1, #4]
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	4093      	lsls	r3, r2
 800a7ae:	608b      	str	r3, [r1, #8]
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f000 fe65 	bl	800b480 <_Bfree>
 800a7b6:	69e3      	ldr	r3, [r4, #28]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	601a      	str	r2, [r3, #0]
 800a7bc:	1e3b      	subs	r3, r7, #0
 800a7be:	bfbb      	ittet	lt
 800a7c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a7c4:	9303      	strlt	r3, [sp, #12]
 800a7c6:	2300      	movge	r3, #0
 800a7c8:	2201      	movlt	r2, #1
 800a7ca:	bfac      	ite	ge
 800a7cc:	f8c8 3000 	strge.w	r3, [r8]
 800a7d0:	f8c8 2000 	strlt.w	r2, [r8]
 800a7d4:	4b9e      	ldr	r3, [pc, #632]	; (800aa50 <_dtoa_r+0x2f0>)
 800a7d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a7da:	ea33 0308 	bics.w	r3, r3, r8
 800a7de:	d11b      	bne.n	800a818 <_dtoa_r+0xb8>
 800a7e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7e2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7e6:	6013      	str	r3, [r2, #0]
 800a7e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a7ec:	4333      	orrs	r3, r6
 800a7ee:	f000 8593 	beq.w	800b318 <_dtoa_r+0xbb8>
 800a7f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7f4:	b963      	cbnz	r3, 800a810 <_dtoa_r+0xb0>
 800a7f6:	4b97      	ldr	r3, [pc, #604]	; (800aa54 <_dtoa_r+0x2f4>)
 800a7f8:	e027      	b.n	800a84a <_dtoa_r+0xea>
 800a7fa:	4b97      	ldr	r3, [pc, #604]	; (800aa58 <_dtoa_r+0x2f8>)
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	3308      	adds	r3, #8
 800a800:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a802:	6013      	str	r3, [r2, #0]
 800a804:	9800      	ldr	r0, [sp, #0]
 800a806:	b013      	add	sp, #76	; 0x4c
 800a808:	ecbd 8b04 	vpop	{d8-d9}
 800a80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a810:	4b90      	ldr	r3, [pc, #576]	; (800aa54 <_dtoa_r+0x2f4>)
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	3303      	adds	r3, #3
 800a816:	e7f3      	b.n	800a800 <_dtoa_r+0xa0>
 800a818:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a81c:	2200      	movs	r2, #0
 800a81e:	ec51 0b17 	vmov	r0, r1, d7
 800a822:	eeb0 8a47 	vmov.f32	s16, s14
 800a826:	eef0 8a67 	vmov.f32	s17, s15
 800a82a:	2300      	movs	r3, #0
 800a82c:	f7f6 f974 	bl	8000b18 <__aeabi_dcmpeq>
 800a830:	4681      	mov	r9, r0
 800a832:	b160      	cbz	r0, 800a84e <_dtoa_r+0xee>
 800a834:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a836:	2301      	movs	r3, #1
 800a838:	6013      	str	r3, [r2, #0]
 800a83a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f000 8568 	beq.w	800b312 <_dtoa_r+0xbb2>
 800a842:	4b86      	ldr	r3, [pc, #536]	; (800aa5c <_dtoa_r+0x2fc>)
 800a844:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a846:	6013      	str	r3, [r2, #0]
 800a848:	3b01      	subs	r3, #1
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	e7da      	b.n	800a804 <_dtoa_r+0xa4>
 800a84e:	aa10      	add	r2, sp, #64	; 0x40
 800a850:	a911      	add	r1, sp, #68	; 0x44
 800a852:	4620      	mov	r0, r4
 800a854:	eeb0 0a48 	vmov.f32	s0, s16
 800a858:	eef0 0a68 	vmov.f32	s1, s17
 800a85c:	f001 f8f2 	bl	800ba44 <__d2b>
 800a860:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a864:	4682      	mov	sl, r0
 800a866:	2d00      	cmp	r5, #0
 800a868:	d07f      	beq.n	800a96a <_dtoa_r+0x20a>
 800a86a:	ee18 3a90 	vmov	r3, s17
 800a86e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a872:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a876:	ec51 0b18 	vmov	r0, r1, d8
 800a87a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a87e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a882:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a886:	4619      	mov	r1, r3
 800a888:	2200      	movs	r2, #0
 800a88a:	4b75      	ldr	r3, [pc, #468]	; (800aa60 <_dtoa_r+0x300>)
 800a88c:	f7f5 fd24 	bl	80002d8 <__aeabi_dsub>
 800a890:	a367      	add	r3, pc, #412	; (adr r3, 800aa30 <_dtoa_r+0x2d0>)
 800a892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a896:	f7f5 fed7 	bl	8000648 <__aeabi_dmul>
 800a89a:	a367      	add	r3, pc, #412	; (adr r3, 800aa38 <_dtoa_r+0x2d8>)
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	f7f5 fd1c 	bl	80002dc <__adddf3>
 800a8a4:	4606      	mov	r6, r0
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	460f      	mov	r7, r1
 800a8aa:	f7f5 fe63 	bl	8000574 <__aeabi_i2d>
 800a8ae:	a364      	add	r3, pc, #400	; (adr r3, 800aa40 <_dtoa_r+0x2e0>)
 800a8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b4:	f7f5 fec8 	bl	8000648 <__aeabi_dmul>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	4630      	mov	r0, r6
 800a8be:	4639      	mov	r1, r7
 800a8c0:	f7f5 fd0c 	bl	80002dc <__adddf3>
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	460f      	mov	r7, r1
 800a8c8:	f7f6 f96e 	bl	8000ba8 <__aeabi_d2iz>
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	4683      	mov	fp, r0
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	4639      	mov	r1, r7
 800a8d6:	f7f6 f929 	bl	8000b2c <__aeabi_dcmplt>
 800a8da:	b148      	cbz	r0, 800a8f0 <_dtoa_r+0x190>
 800a8dc:	4658      	mov	r0, fp
 800a8de:	f7f5 fe49 	bl	8000574 <__aeabi_i2d>
 800a8e2:	4632      	mov	r2, r6
 800a8e4:	463b      	mov	r3, r7
 800a8e6:	f7f6 f917 	bl	8000b18 <__aeabi_dcmpeq>
 800a8ea:	b908      	cbnz	r0, 800a8f0 <_dtoa_r+0x190>
 800a8ec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a8f0:	f1bb 0f16 	cmp.w	fp, #22
 800a8f4:	d857      	bhi.n	800a9a6 <_dtoa_r+0x246>
 800a8f6:	4b5b      	ldr	r3, [pc, #364]	; (800aa64 <_dtoa_r+0x304>)
 800a8f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a900:	ec51 0b18 	vmov	r0, r1, d8
 800a904:	f7f6 f912 	bl	8000b2c <__aeabi_dcmplt>
 800a908:	2800      	cmp	r0, #0
 800a90a:	d04e      	beq.n	800a9aa <_dtoa_r+0x24a>
 800a90c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a910:	2300      	movs	r3, #0
 800a912:	930c      	str	r3, [sp, #48]	; 0x30
 800a914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a916:	1b5b      	subs	r3, r3, r5
 800a918:	1e5a      	subs	r2, r3, #1
 800a91a:	bf45      	ittet	mi
 800a91c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a920:	9305      	strmi	r3, [sp, #20]
 800a922:	2300      	movpl	r3, #0
 800a924:	2300      	movmi	r3, #0
 800a926:	9206      	str	r2, [sp, #24]
 800a928:	bf54      	ite	pl
 800a92a:	9305      	strpl	r3, [sp, #20]
 800a92c:	9306      	strmi	r3, [sp, #24]
 800a92e:	f1bb 0f00 	cmp.w	fp, #0
 800a932:	db3c      	blt.n	800a9ae <_dtoa_r+0x24e>
 800a934:	9b06      	ldr	r3, [sp, #24]
 800a936:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a93a:	445b      	add	r3, fp
 800a93c:	9306      	str	r3, [sp, #24]
 800a93e:	2300      	movs	r3, #0
 800a940:	9308      	str	r3, [sp, #32]
 800a942:	9b07      	ldr	r3, [sp, #28]
 800a944:	2b09      	cmp	r3, #9
 800a946:	d868      	bhi.n	800aa1a <_dtoa_r+0x2ba>
 800a948:	2b05      	cmp	r3, #5
 800a94a:	bfc4      	itt	gt
 800a94c:	3b04      	subgt	r3, #4
 800a94e:	9307      	strgt	r3, [sp, #28]
 800a950:	9b07      	ldr	r3, [sp, #28]
 800a952:	f1a3 0302 	sub.w	r3, r3, #2
 800a956:	bfcc      	ite	gt
 800a958:	2500      	movgt	r5, #0
 800a95a:	2501      	movle	r5, #1
 800a95c:	2b03      	cmp	r3, #3
 800a95e:	f200 8085 	bhi.w	800aa6c <_dtoa_r+0x30c>
 800a962:	e8df f003 	tbb	[pc, r3]
 800a966:	3b2e      	.short	0x3b2e
 800a968:	5839      	.short	0x5839
 800a96a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a96e:	441d      	add	r5, r3
 800a970:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a974:	2b20      	cmp	r3, #32
 800a976:	bfc1      	itttt	gt
 800a978:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a97c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a980:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a984:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a988:	bfd6      	itet	le
 800a98a:	f1c3 0320 	rsble	r3, r3, #32
 800a98e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a992:	fa06 f003 	lslle.w	r0, r6, r3
 800a996:	f7f5 fddd 	bl	8000554 <__aeabi_ui2d>
 800a99a:	2201      	movs	r2, #1
 800a99c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a9a0:	3d01      	subs	r5, #1
 800a9a2:	920e      	str	r2, [sp, #56]	; 0x38
 800a9a4:	e76f      	b.n	800a886 <_dtoa_r+0x126>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e7b3      	b.n	800a912 <_dtoa_r+0x1b2>
 800a9aa:	900c      	str	r0, [sp, #48]	; 0x30
 800a9ac:	e7b2      	b.n	800a914 <_dtoa_r+0x1b4>
 800a9ae:	9b05      	ldr	r3, [sp, #20]
 800a9b0:	eba3 030b 	sub.w	r3, r3, fp
 800a9b4:	9305      	str	r3, [sp, #20]
 800a9b6:	f1cb 0300 	rsb	r3, fp, #0
 800a9ba:	9308      	str	r3, [sp, #32]
 800a9bc:	2300      	movs	r3, #0
 800a9be:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9c0:	e7bf      	b.n	800a942 <_dtoa_r+0x1e2>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	dc52      	bgt.n	800aa72 <_dtoa_r+0x312>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	9301      	str	r3, [sp, #4]
 800a9d0:	9304      	str	r3, [sp, #16]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	920a      	str	r2, [sp, #40]	; 0x28
 800a9d6:	e00b      	b.n	800a9f0 <_dtoa_r+0x290>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e7f3      	b.n	800a9c4 <_dtoa_r+0x264>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	9309      	str	r3, [sp, #36]	; 0x24
 800a9e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9e2:	445b      	add	r3, fp
 800a9e4:	9301      	str	r3, [sp, #4]
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	9304      	str	r3, [sp, #16]
 800a9ec:	bfb8      	it	lt
 800a9ee:	2301      	movlt	r3, #1
 800a9f0:	69e0      	ldr	r0, [r4, #28]
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	2204      	movs	r2, #4
 800a9f6:	f102 0614 	add.w	r6, r2, #20
 800a9fa:	429e      	cmp	r6, r3
 800a9fc:	d93d      	bls.n	800aa7a <_dtoa_r+0x31a>
 800a9fe:	6041      	str	r1, [r0, #4]
 800aa00:	4620      	mov	r0, r4
 800aa02:	f000 fcfd 	bl	800b400 <_Balloc>
 800aa06:	9000      	str	r0, [sp, #0]
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d139      	bne.n	800aa80 <_dtoa_r+0x320>
 800aa0c:	4b16      	ldr	r3, [pc, #88]	; (800aa68 <_dtoa_r+0x308>)
 800aa0e:	4602      	mov	r2, r0
 800aa10:	f240 11af 	movw	r1, #431	; 0x1af
 800aa14:	e6bd      	b.n	800a792 <_dtoa_r+0x32>
 800aa16:	2301      	movs	r3, #1
 800aa18:	e7e1      	b.n	800a9de <_dtoa_r+0x27e>
 800aa1a:	2501      	movs	r5, #1
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	9307      	str	r3, [sp, #28]
 800aa20:	9509      	str	r5, [sp, #36]	; 0x24
 800aa22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa26:	9301      	str	r3, [sp, #4]
 800aa28:	9304      	str	r3, [sp, #16]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	2312      	movs	r3, #18
 800aa2e:	e7d1      	b.n	800a9d4 <_dtoa_r+0x274>
 800aa30:	636f4361 	.word	0x636f4361
 800aa34:	3fd287a7 	.word	0x3fd287a7
 800aa38:	8b60c8b3 	.word	0x8b60c8b3
 800aa3c:	3fc68a28 	.word	0x3fc68a28
 800aa40:	509f79fb 	.word	0x509f79fb
 800aa44:	3fd34413 	.word	0x3fd34413
 800aa48:	0801f510 	.word	0x0801f510
 800aa4c:	0801f527 	.word	0x0801f527
 800aa50:	7ff00000 	.word	0x7ff00000
 800aa54:	0801f50c 	.word	0x0801f50c
 800aa58:	0801f503 	.word	0x0801f503
 800aa5c:	0801f49a 	.word	0x0801f49a
 800aa60:	3ff80000 	.word	0x3ff80000
 800aa64:	0801f618 	.word	0x0801f618
 800aa68:	0801f57f 	.word	0x0801f57f
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa70:	e7d7      	b.n	800aa22 <_dtoa_r+0x2c2>
 800aa72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa74:	9301      	str	r3, [sp, #4]
 800aa76:	9304      	str	r3, [sp, #16]
 800aa78:	e7ba      	b.n	800a9f0 <_dtoa_r+0x290>
 800aa7a:	3101      	adds	r1, #1
 800aa7c:	0052      	lsls	r2, r2, #1
 800aa7e:	e7ba      	b.n	800a9f6 <_dtoa_r+0x296>
 800aa80:	69e3      	ldr	r3, [r4, #28]
 800aa82:	9a00      	ldr	r2, [sp, #0]
 800aa84:	601a      	str	r2, [r3, #0]
 800aa86:	9b04      	ldr	r3, [sp, #16]
 800aa88:	2b0e      	cmp	r3, #14
 800aa8a:	f200 80a8 	bhi.w	800abde <_dtoa_r+0x47e>
 800aa8e:	2d00      	cmp	r5, #0
 800aa90:	f000 80a5 	beq.w	800abde <_dtoa_r+0x47e>
 800aa94:	f1bb 0f00 	cmp.w	fp, #0
 800aa98:	dd38      	ble.n	800ab0c <_dtoa_r+0x3ac>
 800aa9a:	4bc0      	ldr	r3, [pc, #768]	; (800ad9c <_dtoa_r+0x63c>)
 800aa9c:	f00b 020f 	and.w	r2, fp, #15
 800aaa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaa4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aaa8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aaac:	ea4f 182b 	mov.w	r8, fp, asr #4
 800aab0:	d019      	beq.n	800aae6 <_dtoa_r+0x386>
 800aab2:	4bbb      	ldr	r3, [pc, #748]	; (800ada0 <_dtoa_r+0x640>)
 800aab4:	ec51 0b18 	vmov	r0, r1, d8
 800aab8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aabc:	f7f5 feee 	bl	800089c <__aeabi_ddiv>
 800aac0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aac4:	f008 080f 	and.w	r8, r8, #15
 800aac8:	2503      	movs	r5, #3
 800aaca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ada0 <_dtoa_r+0x640>
 800aace:	f1b8 0f00 	cmp.w	r8, #0
 800aad2:	d10a      	bne.n	800aaea <_dtoa_r+0x38a>
 800aad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aad8:	4632      	mov	r2, r6
 800aada:	463b      	mov	r3, r7
 800aadc:	f7f5 fede 	bl	800089c <__aeabi_ddiv>
 800aae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aae4:	e02b      	b.n	800ab3e <_dtoa_r+0x3de>
 800aae6:	2502      	movs	r5, #2
 800aae8:	e7ef      	b.n	800aaca <_dtoa_r+0x36a>
 800aaea:	f018 0f01 	tst.w	r8, #1
 800aaee:	d008      	beq.n	800ab02 <_dtoa_r+0x3a2>
 800aaf0:	4630      	mov	r0, r6
 800aaf2:	4639      	mov	r1, r7
 800aaf4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aaf8:	f7f5 fda6 	bl	8000648 <__aeabi_dmul>
 800aafc:	3501      	adds	r5, #1
 800aafe:	4606      	mov	r6, r0
 800ab00:	460f      	mov	r7, r1
 800ab02:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ab06:	f109 0908 	add.w	r9, r9, #8
 800ab0a:	e7e0      	b.n	800aace <_dtoa_r+0x36e>
 800ab0c:	f000 809f 	beq.w	800ac4e <_dtoa_r+0x4ee>
 800ab10:	f1cb 0600 	rsb	r6, fp, #0
 800ab14:	4ba1      	ldr	r3, [pc, #644]	; (800ad9c <_dtoa_r+0x63c>)
 800ab16:	4fa2      	ldr	r7, [pc, #648]	; (800ada0 <_dtoa_r+0x640>)
 800ab18:	f006 020f 	and.w	r2, r6, #15
 800ab1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab24:	ec51 0b18 	vmov	r0, r1, d8
 800ab28:	f7f5 fd8e 	bl	8000648 <__aeabi_dmul>
 800ab2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab30:	1136      	asrs	r6, r6, #4
 800ab32:	2300      	movs	r3, #0
 800ab34:	2502      	movs	r5, #2
 800ab36:	2e00      	cmp	r6, #0
 800ab38:	d17e      	bne.n	800ac38 <_dtoa_r+0x4d8>
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1d0      	bne.n	800aae0 <_dtoa_r+0x380>
 800ab3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab40:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f000 8084 	beq.w	800ac52 <_dtoa_r+0x4f2>
 800ab4a:	4b96      	ldr	r3, [pc, #600]	; (800ada4 <_dtoa_r+0x644>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	4640      	mov	r0, r8
 800ab50:	4649      	mov	r1, r9
 800ab52:	f7f5 ffeb 	bl	8000b2c <__aeabi_dcmplt>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	d07b      	beq.n	800ac52 <_dtoa_r+0x4f2>
 800ab5a:	9b04      	ldr	r3, [sp, #16]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d078      	beq.n	800ac52 <_dtoa_r+0x4f2>
 800ab60:	9b01      	ldr	r3, [sp, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	dd39      	ble.n	800abda <_dtoa_r+0x47a>
 800ab66:	4b90      	ldr	r3, [pc, #576]	; (800ada8 <_dtoa_r+0x648>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	4649      	mov	r1, r9
 800ab6e:	f7f5 fd6b 	bl	8000648 <__aeabi_dmul>
 800ab72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab76:	9e01      	ldr	r6, [sp, #4]
 800ab78:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800ab7c:	3501      	adds	r5, #1
 800ab7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab82:	4628      	mov	r0, r5
 800ab84:	f7f5 fcf6 	bl	8000574 <__aeabi_i2d>
 800ab88:	4642      	mov	r2, r8
 800ab8a:	464b      	mov	r3, r9
 800ab8c:	f7f5 fd5c 	bl	8000648 <__aeabi_dmul>
 800ab90:	4b86      	ldr	r3, [pc, #536]	; (800adac <_dtoa_r+0x64c>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	f7f5 fba2 	bl	80002dc <__adddf3>
 800ab98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ab9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aba0:	9303      	str	r3, [sp, #12]
 800aba2:	2e00      	cmp	r6, #0
 800aba4:	d158      	bne.n	800ac58 <_dtoa_r+0x4f8>
 800aba6:	4b82      	ldr	r3, [pc, #520]	; (800adb0 <_dtoa_r+0x650>)
 800aba8:	2200      	movs	r2, #0
 800abaa:	4640      	mov	r0, r8
 800abac:	4649      	mov	r1, r9
 800abae:	f7f5 fb93 	bl	80002d8 <__aeabi_dsub>
 800abb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abb6:	4680      	mov	r8, r0
 800abb8:	4689      	mov	r9, r1
 800abba:	f7f5 ffd5 	bl	8000b68 <__aeabi_dcmpgt>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f040 8296 	bne.w	800b0f0 <_dtoa_r+0x990>
 800abc4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800abc8:	4640      	mov	r0, r8
 800abca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abce:	4649      	mov	r1, r9
 800abd0:	f7f5 ffac 	bl	8000b2c <__aeabi_dcmplt>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	f040 8289 	bne.w	800b0ec <_dtoa_r+0x98c>
 800abda:	ed8d 8b02 	vstr	d8, [sp, #8]
 800abde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f2c0 814e 	blt.w	800ae82 <_dtoa_r+0x722>
 800abe6:	f1bb 0f0e 	cmp.w	fp, #14
 800abea:	f300 814a 	bgt.w	800ae82 <_dtoa_r+0x722>
 800abee:	4b6b      	ldr	r3, [pc, #428]	; (800ad9c <_dtoa_r+0x63c>)
 800abf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800abf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f280 80dc 	bge.w	800adb8 <_dtoa_r+0x658>
 800ac00:	9b04      	ldr	r3, [sp, #16]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f300 80d8 	bgt.w	800adb8 <_dtoa_r+0x658>
 800ac08:	f040 826f 	bne.w	800b0ea <_dtoa_r+0x98a>
 800ac0c:	4b68      	ldr	r3, [pc, #416]	; (800adb0 <_dtoa_r+0x650>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	4640      	mov	r0, r8
 800ac12:	4649      	mov	r1, r9
 800ac14:	f7f5 fd18 	bl	8000648 <__aeabi_dmul>
 800ac18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac1c:	f7f5 ff9a 	bl	8000b54 <__aeabi_dcmpge>
 800ac20:	9e04      	ldr	r6, [sp, #16]
 800ac22:	4637      	mov	r7, r6
 800ac24:	2800      	cmp	r0, #0
 800ac26:	f040 8245 	bne.w	800b0b4 <_dtoa_r+0x954>
 800ac2a:	9d00      	ldr	r5, [sp, #0]
 800ac2c:	2331      	movs	r3, #49	; 0x31
 800ac2e:	f805 3b01 	strb.w	r3, [r5], #1
 800ac32:	f10b 0b01 	add.w	fp, fp, #1
 800ac36:	e241      	b.n	800b0bc <_dtoa_r+0x95c>
 800ac38:	07f2      	lsls	r2, r6, #31
 800ac3a:	d505      	bpl.n	800ac48 <_dtoa_r+0x4e8>
 800ac3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac40:	f7f5 fd02 	bl	8000648 <__aeabi_dmul>
 800ac44:	3501      	adds	r5, #1
 800ac46:	2301      	movs	r3, #1
 800ac48:	1076      	asrs	r6, r6, #1
 800ac4a:	3708      	adds	r7, #8
 800ac4c:	e773      	b.n	800ab36 <_dtoa_r+0x3d6>
 800ac4e:	2502      	movs	r5, #2
 800ac50:	e775      	b.n	800ab3e <_dtoa_r+0x3de>
 800ac52:	9e04      	ldr	r6, [sp, #16]
 800ac54:	465f      	mov	r7, fp
 800ac56:	e792      	b.n	800ab7e <_dtoa_r+0x41e>
 800ac58:	9900      	ldr	r1, [sp, #0]
 800ac5a:	4b50      	ldr	r3, [pc, #320]	; (800ad9c <_dtoa_r+0x63c>)
 800ac5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac60:	4431      	add	r1, r6
 800ac62:	9102      	str	r1, [sp, #8]
 800ac64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac66:	eeb0 9a47 	vmov.f32	s18, s14
 800ac6a:	eef0 9a67 	vmov.f32	s19, s15
 800ac6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac76:	2900      	cmp	r1, #0
 800ac78:	d044      	beq.n	800ad04 <_dtoa_r+0x5a4>
 800ac7a:	494e      	ldr	r1, [pc, #312]	; (800adb4 <_dtoa_r+0x654>)
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	f7f5 fe0d 	bl	800089c <__aeabi_ddiv>
 800ac82:	ec53 2b19 	vmov	r2, r3, d9
 800ac86:	f7f5 fb27 	bl	80002d8 <__aeabi_dsub>
 800ac8a:	9d00      	ldr	r5, [sp, #0]
 800ac8c:	ec41 0b19 	vmov	d9, r0, r1
 800ac90:	4649      	mov	r1, r9
 800ac92:	4640      	mov	r0, r8
 800ac94:	f7f5 ff88 	bl	8000ba8 <__aeabi_d2iz>
 800ac98:	4606      	mov	r6, r0
 800ac9a:	f7f5 fc6b 	bl	8000574 <__aeabi_i2d>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	460b      	mov	r3, r1
 800aca2:	4640      	mov	r0, r8
 800aca4:	4649      	mov	r1, r9
 800aca6:	f7f5 fb17 	bl	80002d8 <__aeabi_dsub>
 800acaa:	3630      	adds	r6, #48	; 0x30
 800acac:	f805 6b01 	strb.w	r6, [r5], #1
 800acb0:	ec53 2b19 	vmov	r2, r3, d9
 800acb4:	4680      	mov	r8, r0
 800acb6:	4689      	mov	r9, r1
 800acb8:	f7f5 ff38 	bl	8000b2c <__aeabi_dcmplt>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d164      	bne.n	800ad8a <_dtoa_r+0x62a>
 800acc0:	4642      	mov	r2, r8
 800acc2:	464b      	mov	r3, r9
 800acc4:	4937      	ldr	r1, [pc, #220]	; (800ada4 <_dtoa_r+0x644>)
 800acc6:	2000      	movs	r0, #0
 800acc8:	f7f5 fb06 	bl	80002d8 <__aeabi_dsub>
 800accc:	ec53 2b19 	vmov	r2, r3, d9
 800acd0:	f7f5 ff2c 	bl	8000b2c <__aeabi_dcmplt>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	f040 80b6 	bne.w	800ae46 <_dtoa_r+0x6e6>
 800acda:	9b02      	ldr	r3, [sp, #8]
 800acdc:	429d      	cmp	r5, r3
 800acde:	f43f af7c 	beq.w	800abda <_dtoa_r+0x47a>
 800ace2:	4b31      	ldr	r3, [pc, #196]	; (800ada8 <_dtoa_r+0x648>)
 800ace4:	ec51 0b19 	vmov	r0, r1, d9
 800ace8:	2200      	movs	r2, #0
 800acea:	f7f5 fcad 	bl	8000648 <__aeabi_dmul>
 800acee:	4b2e      	ldr	r3, [pc, #184]	; (800ada8 <_dtoa_r+0x648>)
 800acf0:	ec41 0b19 	vmov	d9, r0, r1
 800acf4:	2200      	movs	r2, #0
 800acf6:	4640      	mov	r0, r8
 800acf8:	4649      	mov	r1, r9
 800acfa:	f7f5 fca5 	bl	8000648 <__aeabi_dmul>
 800acfe:	4680      	mov	r8, r0
 800ad00:	4689      	mov	r9, r1
 800ad02:	e7c5      	b.n	800ac90 <_dtoa_r+0x530>
 800ad04:	ec51 0b17 	vmov	r0, r1, d7
 800ad08:	f7f5 fc9e 	bl	8000648 <__aeabi_dmul>
 800ad0c:	9b02      	ldr	r3, [sp, #8]
 800ad0e:	9d00      	ldr	r5, [sp, #0]
 800ad10:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad12:	ec41 0b19 	vmov	d9, r0, r1
 800ad16:	4649      	mov	r1, r9
 800ad18:	4640      	mov	r0, r8
 800ad1a:	f7f5 ff45 	bl	8000ba8 <__aeabi_d2iz>
 800ad1e:	4606      	mov	r6, r0
 800ad20:	f7f5 fc28 	bl	8000574 <__aeabi_i2d>
 800ad24:	3630      	adds	r6, #48	; 0x30
 800ad26:	4602      	mov	r2, r0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	4640      	mov	r0, r8
 800ad2c:	4649      	mov	r1, r9
 800ad2e:	f7f5 fad3 	bl	80002d8 <__aeabi_dsub>
 800ad32:	f805 6b01 	strb.w	r6, [r5], #1
 800ad36:	9b02      	ldr	r3, [sp, #8]
 800ad38:	429d      	cmp	r5, r3
 800ad3a:	4680      	mov	r8, r0
 800ad3c:	4689      	mov	r9, r1
 800ad3e:	f04f 0200 	mov.w	r2, #0
 800ad42:	d124      	bne.n	800ad8e <_dtoa_r+0x62e>
 800ad44:	4b1b      	ldr	r3, [pc, #108]	; (800adb4 <_dtoa_r+0x654>)
 800ad46:	ec51 0b19 	vmov	r0, r1, d9
 800ad4a:	f7f5 fac7 	bl	80002dc <__adddf3>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	460b      	mov	r3, r1
 800ad52:	4640      	mov	r0, r8
 800ad54:	4649      	mov	r1, r9
 800ad56:	f7f5 ff07 	bl	8000b68 <__aeabi_dcmpgt>
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	d173      	bne.n	800ae46 <_dtoa_r+0x6e6>
 800ad5e:	ec53 2b19 	vmov	r2, r3, d9
 800ad62:	4914      	ldr	r1, [pc, #80]	; (800adb4 <_dtoa_r+0x654>)
 800ad64:	2000      	movs	r0, #0
 800ad66:	f7f5 fab7 	bl	80002d8 <__aeabi_dsub>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	4640      	mov	r0, r8
 800ad70:	4649      	mov	r1, r9
 800ad72:	f7f5 fedb 	bl	8000b2c <__aeabi_dcmplt>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	f43f af2f 	beq.w	800abda <_dtoa_r+0x47a>
 800ad7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ad7e:	1e6b      	subs	r3, r5, #1
 800ad80:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad86:	2b30      	cmp	r3, #48	; 0x30
 800ad88:	d0f8      	beq.n	800ad7c <_dtoa_r+0x61c>
 800ad8a:	46bb      	mov	fp, r7
 800ad8c:	e04a      	b.n	800ae24 <_dtoa_r+0x6c4>
 800ad8e:	4b06      	ldr	r3, [pc, #24]	; (800ada8 <_dtoa_r+0x648>)
 800ad90:	f7f5 fc5a 	bl	8000648 <__aeabi_dmul>
 800ad94:	4680      	mov	r8, r0
 800ad96:	4689      	mov	r9, r1
 800ad98:	e7bd      	b.n	800ad16 <_dtoa_r+0x5b6>
 800ad9a:	bf00      	nop
 800ad9c:	0801f618 	.word	0x0801f618
 800ada0:	0801f5f0 	.word	0x0801f5f0
 800ada4:	3ff00000 	.word	0x3ff00000
 800ada8:	40240000 	.word	0x40240000
 800adac:	401c0000 	.word	0x401c0000
 800adb0:	40140000 	.word	0x40140000
 800adb4:	3fe00000 	.word	0x3fe00000
 800adb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800adbc:	9d00      	ldr	r5, [sp, #0]
 800adbe:	4642      	mov	r2, r8
 800adc0:	464b      	mov	r3, r9
 800adc2:	4630      	mov	r0, r6
 800adc4:	4639      	mov	r1, r7
 800adc6:	f7f5 fd69 	bl	800089c <__aeabi_ddiv>
 800adca:	f7f5 feed 	bl	8000ba8 <__aeabi_d2iz>
 800adce:	9001      	str	r0, [sp, #4]
 800add0:	f7f5 fbd0 	bl	8000574 <__aeabi_i2d>
 800add4:	4642      	mov	r2, r8
 800add6:	464b      	mov	r3, r9
 800add8:	f7f5 fc36 	bl	8000648 <__aeabi_dmul>
 800addc:	4602      	mov	r2, r0
 800adde:	460b      	mov	r3, r1
 800ade0:	4630      	mov	r0, r6
 800ade2:	4639      	mov	r1, r7
 800ade4:	f7f5 fa78 	bl	80002d8 <__aeabi_dsub>
 800ade8:	9e01      	ldr	r6, [sp, #4]
 800adea:	9f04      	ldr	r7, [sp, #16]
 800adec:	3630      	adds	r6, #48	; 0x30
 800adee:	f805 6b01 	strb.w	r6, [r5], #1
 800adf2:	9e00      	ldr	r6, [sp, #0]
 800adf4:	1bae      	subs	r6, r5, r6
 800adf6:	42b7      	cmp	r7, r6
 800adf8:	4602      	mov	r2, r0
 800adfa:	460b      	mov	r3, r1
 800adfc:	d134      	bne.n	800ae68 <_dtoa_r+0x708>
 800adfe:	f7f5 fa6d 	bl	80002dc <__adddf3>
 800ae02:	4642      	mov	r2, r8
 800ae04:	464b      	mov	r3, r9
 800ae06:	4606      	mov	r6, r0
 800ae08:	460f      	mov	r7, r1
 800ae0a:	f7f5 fead 	bl	8000b68 <__aeabi_dcmpgt>
 800ae0e:	b9c8      	cbnz	r0, 800ae44 <_dtoa_r+0x6e4>
 800ae10:	4642      	mov	r2, r8
 800ae12:	464b      	mov	r3, r9
 800ae14:	4630      	mov	r0, r6
 800ae16:	4639      	mov	r1, r7
 800ae18:	f7f5 fe7e 	bl	8000b18 <__aeabi_dcmpeq>
 800ae1c:	b110      	cbz	r0, 800ae24 <_dtoa_r+0x6c4>
 800ae1e:	9b01      	ldr	r3, [sp, #4]
 800ae20:	07db      	lsls	r3, r3, #31
 800ae22:	d40f      	bmi.n	800ae44 <_dtoa_r+0x6e4>
 800ae24:	4651      	mov	r1, sl
 800ae26:	4620      	mov	r0, r4
 800ae28:	f000 fb2a 	bl	800b480 <_Bfree>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae30:	702b      	strb	r3, [r5, #0]
 800ae32:	f10b 0301 	add.w	r3, fp, #1
 800ae36:	6013      	str	r3, [r2, #0]
 800ae38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f43f ace2 	beq.w	800a804 <_dtoa_r+0xa4>
 800ae40:	601d      	str	r5, [r3, #0]
 800ae42:	e4df      	b.n	800a804 <_dtoa_r+0xa4>
 800ae44:	465f      	mov	r7, fp
 800ae46:	462b      	mov	r3, r5
 800ae48:	461d      	mov	r5, r3
 800ae4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae4e:	2a39      	cmp	r2, #57	; 0x39
 800ae50:	d106      	bne.n	800ae60 <_dtoa_r+0x700>
 800ae52:	9a00      	ldr	r2, [sp, #0]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d1f7      	bne.n	800ae48 <_dtoa_r+0x6e8>
 800ae58:	9900      	ldr	r1, [sp, #0]
 800ae5a:	2230      	movs	r2, #48	; 0x30
 800ae5c:	3701      	adds	r7, #1
 800ae5e:	700a      	strb	r2, [r1, #0]
 800ae60:	781a      	ldrb	r2, [r3, #0]
 800ae62:	3201      	adds	r2, #1
 800ae64:	701a      	strb	r2, [r3, #0]
 800ae66:	e790      	b.n	800ad8a <_dtoa_r+0x62a>
 800ae68:	4ba3      	ldr	r3, [pc, #652]	; (800b0f8 <_dtoa_r+0x998>)
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f7f5 fbec 	bl	8000648 <__aeabi_dmul>
 800ae70:	2200      	movs	r2, #0
 800ae72:	2300      	movs	r3, #0
 800ae74:	4606      	mov	r6, r0
 800ae76:	460f      	mov	r7, r1
 800ae78:	f7f5 fe4e 	bl	8000b18 <__aeabi_dcmpeq>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d09e      	beq.n	800adbe <_dtoa_r+0x65e>
 800ae80:	e7d0      	b.n	800ae24 <_dtoa_r+0x6c4>
 800ae82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae84:	2a00      	cmp	r2, #0
 800ae86:	f000 80ca 	beq.w	800b01e <_dtoa_r+0x8be>
 800ae8a:	9a07      	ldr	r2, [sp, #28]
 800ae8c:	2a01      	cmp	r2, #1
 800ae8e:	f300 80ad 	bgt.w	800afec <_dtoa_r+0x88c>
 800ae92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae94:	2a00      	cmp	r2, #0
 800ae96:	f000 80a5 	beq.w	800afe4 <_dtoa_r+0x884>
 800ae9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae9e:	9e08      	ldr	r6, [sp, #32]
 800aea0:	9d05      	ldr	r5, [sp, #20]
 800aea2:	9a05      	ldr	r2, [sp, #20]
 800aea4:	441a      	add	r2, r3
 800aea6:	9205      	str	r2, [sp, #20]
 800aea8:	9a06      	ldr	r2, [sp, #24]
 800aeaa:	2101      	movs	r1, #1
 800aeac:	441a      	add	r2, r3
 800aeae:	4620      	mov	r0, r4
 800aeb0:	9206      	str	r2, [sp, #24]
 800aeb2:	f000 fb9b 	bl	800b5ec <__i2b>
 800aeb6:	4607      	mov	r7, r0
 800aeb8:	b165      	cbz	r5, 800aed4 <_dtoa_r+0x774>
 800aeba:	9b06      	ldr	r3, [sp, #24]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	dd09      	ble.n	800aed4 <_dtoa_r+0x774>
 800aec0:	42ab      	cmp	r3, r5
 800aec2:	9a05      	ldr	r2, [sp, #20]
 800aec4:	bfa8      	it	ge
 800aec6:	462b      	movge	r3, r5
 800aec8:	1ad2      	subs	r2, r2, r3
 800aeca:	9205      	str	r2, [sp, #20]
 800aecc:	9a06      	ldr	r2, [sp, #24]
 800aece:	1aed      	subs	r5, r5, r3
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	9306      	str	r3, [sp, #24]
 800aed4:	9b08      	ldr	r3, [sp, #32]
 800aed6:	b1f3      	cbz	r3, 800af16 <_dtoa_r+0x7b6>
 800aed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f000 80a3 	beq.w	800b026 <_dtoa_r+0x8c6>
 800aee0:	2e00      	cmp	r6, #0
 800aee2:	dd10      	ble.n	800af06 <_dtoa_r+0x7a6>
 800aee4:	4639      	mov	r1, r7
 800aee6:	4632      	mov	r2, r6
 800aee8:	4620      	mov	r0, r4
 800aeea:	f000 fc3f 	bl	800b76c <__pow5mult>
 800aeee:	4652      	mov	r2, sl
 800aef0:	4601      	mov	r1, r0
 800aef2:	4607      	mov	r7, r0
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 fb8f 	bl	800b618 <__multiply>
 800aefa:	4651      	mov	r1, sl
 800aefc:	4680      	mov	r8, r0
 800aefe:	4620      	mov	r0, r4
 800af00:	f000 fabe 	bl	800b480 <_Bfree>
 800af04:	46c2      	mov	sl, r8
 800af06:	9b08      	ldr	r3, [sp, #32]
 800af08:	1b9a      	subs	r2, r3, r6
 800af0a:	d004      	beq.n	800af16 <_dtoa_r+0x7b6>
 800af0c:	4651      	mov	r1, sl
 800af0e:	4620      	mov	r0, r4
 800af10:	f000 fc2c 	bl	800b76c <__pow5mult>
 800af14:	4682      	mov	sl, r0
 800af16:	2101      	movs	r1, #1
 800af18:	4620      	mov	r0, r4
 800af1a:	f000 fb67 	bl	800b5ec <__i2b>
 800af1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af20:	2b00      	cmp	r3, #0
 800af22:	4606      	mov	r6, r0
 800af24:	f340 8081 	ble.w	800b02a <_dtoa_r+0x8ca>
 800af28:	461a      	mov	r2, r3
 800af2a:	4601      	mov	r1, r0
 800af2c:	4620      	mov	r0, r4
 800af2e:	f000 fc1d 	bl	800b76c <__pow5mult>
 800af32:	9b07      	ldr	r3, [sp, #28]
 800af34:	2b01      	cmp	r3, #1
 800af36:	4606      	mov	r6, r0
 800af38:	dd7a      	ble.n	800b030 <_dtoa_r+0x8d0>
 800af3a:	f04f 0800 	mov.w	r8, #0
 800af3e:	6933      	ldr	r3, [r6, #16]
 800af40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af44:	6918      	ldr	r0, [r3, #16]
 800af46:	f000 fb03 	bl	800b550 <__hi0bits>
 800af4a:	f1c0 0020 	rsb	r0, r0, #32
 800af4e:	9b06      	ldr	r3, [sp, #24]
 800af50:	4418      	add	r0, r3
 800af52:	f010 001f 	ands.w	r0, r0, #31
 800af56:	f000 8094 	beq.w	800b082 <_dtoa_r+0x922>
 800af5a:	f1c0 0320 	rsb	r3, r0, #32
 800af5e:	2b04      	cmp	r3, #4
 800af60:	f340 8085 	ble.w	800b06e <_dtoa_r+0x90e>
 800af64:	9b05      	ldr	r3, [sp, #20]
 800af66:	f1c0 001c 	rsb	r0, r0, #28
 800af6a:	4403      	add	r3, r0
 800af6c:	9305      	str	r3, [sp, #20]
 800af6e:	9b06      	ldr	r3, [sp, #24]
 800af70:	4403      	add	r3, r0
 800af72:	4405      	add	r5, r0
 800af74:	9306      	str	r3, [sp, #24]
 800af76:	9b05      	ldr	r3, [sp, #20]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	dd05      	ble.n	800af88 <_dtoa_r+0x828>
 800af7c:	4651      	mov	r1, sl
 800af7e:	461a      	mov	r2, r3
 800af80:	4620      	mov	r0, r4
 800af82:	f000 fc4d 	bl	800b820 <__lshift>
 800af86:	4682      	mov	sl, r0
 800af88:	9b06      	ldr	r3, [sp, #24]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	dd05      	ble.n	800af9a <_dtoa_r+0x83a>
 800af8e:	4631      	mov	r1, r6
 800af90:	461a      	mov	r2, r3
 800af92:	4620      	mov	r0, r4
 800af94:	f000 fc44 	bl	800b820 <__lshift>
 800af98:	4606      	mov	r6, r0
 800af9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d072      	beq.n	800b086 <_dtoa_r+0x926>
 800afa0:	4631      	mov	r1, r6
 800afa2:	4650      	mov	r0, sl
 800afa4:	f000 fca8 	bl	800b8f8 <__mcmp>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	da6c      	bge.n	800b086 <_dtoa_r+0x926>
 800afac:	2300      	movs	r3, #0
 800afae:	4651      	mov	r1, sl
 800afb0:	220a      	movs	r2, #10
 800afb2:	4620      	mov	r0, r4
 800afb4:	f000 fa86 	bl	800b4c4 <__multadd>
 800afb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800afbe:	4682      	mov	sl, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f000 81b0 	beq.w	800b326 <_dtoa_r+0xbc6>
 800afc6:	2300      	movs	r3, #0
 800afc8:	4639      	mov	r1, r7
 800afca:	220a      	movs	r2, #10
 800afcc:	4620      	mov	r0, r4
 800afce:	f000 fa79 	bl	800b4c4 <__multadd>
 800afd2:	9b01      	ldr	r3, [sp, #4]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	4607      	mov	r7, r0
 800afd8:	f300 8096 	bgt.w	800b108 <_dtoa_r+0x9a8>
 800afdc:	9b07      	ldr	r3, [sp, #28]
 800afde:	2b02      	cmp	r3, #2
 800afe0:	dc59      	bgt.n	800b096 <_dtoa_r+0x936>
 800afe2:	e091      	b.n	800b108 <_dtoa_r+0x9a8>
 800afe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800afea:	e758      	b.n	800ae9e <_dtoa_r+0x73e>
 800afec:	9b04      	ldr	r3, [sp, #16]
 800afee:	1e5e      	subs	r6, r3, #1
 800aff0:	9b08      	ldr	r3, [sp, #32]
 800aff2:	42b3      	cmp	r3, r6
 800aff4:	bfbf      	itttt	lt
 800aff6:	9b08      	ldrlt	r3, [sp, #32]
 800aff8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800affa:	9608      	strlt	r6, [sp, #32]
 800affc:	1af3      	sublt	r3, r6, r3
 800affe:	bfb4      	ite	lt
 800b000:	18d2      	addlt	r2, r2, r3
 800b002:	1b9e      	subge	r6, r3, r6
 800b004:	9b04      	ldr	r3, [sp, #16]
 800b006:	bfbc      	itt	lt
 800b008:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b00a:	2600      	movlt	r6, #0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	bfb7      	itett	lt
 800b010:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b014:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b018:	1a9d      	sublt	r5, r3, r2
 800b01a:	2300      	movlt	r3, #0
 800b01c:	e741      	b.n	800aea2 <_dtoa_r+0x742>
 800b01e:	9e08      	ldr	r6, [sp, #32]
 800b020:	9d05      	ldr	r5, [sp, #20]
 800b022:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b024:	e748      	b.n	800aeb8 <_dtoa_r+0x758>
 800b026:	9a08      	ldr	r2, [sp, #32]
 800b028:	e770      	b.n	800af0c <_dtoa_r+0x7ac>
 800b02a:	9b07      	ldr	r3, [sp, #28]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	dc19      	bgt.n	800b064 <_dtoa_r+0x904>
 800b030:	9b02      	ldr	r3, [sp, #8]
 800b032:	b9bb      	cbnz	r3, 800b064 <_dtoa_r+0x904>
 800b034:	9b03      	ldr	r3, [sp, #12]
 800b036:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b03a:	b99b      	cbnz	r3, 800b064 <_dtoa_r+0x904>
 800b03c:	9b03      	ldr	r3, [sp, #12]
 800b03e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b042:	0d1b      	lsrs	r3, r3, #20
 800b044:	051b      	lsls	r3, r3, #20
 800b046:	b183      	cbz	r3, 800b06a <_dtoa_r+0x90a>
 800b048:	9b05      	ldr	r3, [sp, #20]
 800b04a:	3301      	adds	r3, #1
 800b04c:	9305      	str	r3, [sp, #20]
 800b04e:	9b06      	ldr	r3, [sp, #24]
 800b050:	3301      	adds	r3, #1
 800b052:	9306      	str	r3, [sp, #24]
 800b054:	f04f 0801 	mov.w	r8, #1
 800b058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f47f af6f 	bne.w	800af3e <_dtoa_r+0x7de>
 800b060:	2001      	movs	r0, #1
 800b062:	e774      	b.n	800af4e <_dtoa_r+0x7ee>
 800b064:	f04f 0800 	mov.w	r8, #0
 800b068:	e7f6      	b.n	800b058 <_dtoa_r+0x8f8>
 800b06a:	4698      	mov	r8, r3
 800b06c:	e7f4      	b.n	800b058 <_dtoa_r+0x8f8>
 800b06e:	d082      	beq.n	800af76 <_dtoa_r+0x816>
 800b070:	9a05      	ldr	r2, [sp, #20]
 800b072:	331c      	adds	r3, #28
 800b074:	441a      	add	r2, r3
 800b076:	9205      	str	r2, [sp, #20]
 800b078:	9a06      	ldr	r2, [sp, #24]
 800b07a:	441a      	add	r2, r3
 800b07c:	441d      	add	r5, r3
 800b07e:	9206      	str	r2, [sp, #24]
 800b080:	e779      	b.n	800af76 <_dtoa_r+0x816>
 800b082:	4603      	mov	r3, r0
 800b084:	e7f4      	b.n	800b070 <_dtoa_r+0x910>
 800b086:	9b04      	ldr	r3, [sp, #16]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	dc37      	bgt.n	800b0fc <_dtoa_r+0x99c>
 800b08c:	9b07      	ldr	r3, [sp, #28]
 800b08e:	2b02      	cmp	r3, #2
 800b090:	dd34      	ble.n	800b0fc <_dtoa_r+0x99c>
 800b092:	9b04      	ldr	r3, [sp, #16]
 800b094:	9301      	str	r3, [sp, #4]
 800b096:	9b01      	ldr	r3, [sp, #4]
 800b098:	b963      	cbnz	r3, 800b0b4 <_dtoa_r+0x954>
 800b09a:	4631      	mov	r1, r6
 800b09c:	2205      	movs	r2, #5
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f000 fa10 	bl	800b4c4 <__multadd>
 800b0a4:	4601      	mov	r1, r0
 800b0a6:	4606      	mov	r6, r0
 800b0a8:	4650      	mov	r0, sl
 800b0aa:	f000 fc25 	bl	800b8f8 <__mcmp>
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	f73f adbb 	bgt.w	800ac2a <_dtoa_r+0x4ca>
 800b0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0b6:	9d00      	ldr	r5, [sp, #0]
 800b0b8:	ea6f 0b03 	mvn.w	fp, r3
 800b0bc:	f04f 0800 	mov.w	r8, #0
 800b0c0:	4631      	mov	r1, r6
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f000 f9dc 	bl	800b480 <_Bfree>
 800b0c8:	2f00      	cmp	r7, #0
 800b0ca:	f43f aeab 	beq.w	800ae24 <_dtoa_r+0x6c4>
 800b0ce:	f1b8 0f00 	cmp.w	r8, #0
 800b0d2:	d005      	beq.n	800b0e0 <_dtoa_r+0x980>
 800b0d4:	45b8      	cmp	r8, r7
 800b0d6:	d003      	beq.n	800b0e0 <_dtoa_r+0x980>
 800b0d8:	4641      	mov	r1, r8
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f000 f9d0 	bl	800b480 <_Bfree>
 800b0e0:	4639      	mov	r1, r7
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f000 f9cc 	bl	800b480 <_Bfree>
 800b0e8:	e69c      	b.n	800ae24 <_dtoa_r+0x6c4>
 800b0ea:	2600      	movs	r6, #0
 800b0ec:	4637      	mov	r7, r6
 800b0ee:	e7e1      	b.n	800b0b4 <_dtoa_r+0x954>
 800b0f0:	46bb      	mov	fp, r7
 800b0f2:	4637      	mov	r7, r6
 800b0f4:	e599      	b.n	800ac2a <_dtoa_r+0x4ca>
 800b0f6:	bf00      	nop
 800b0f8:	40240000 	.word	0x40240000
 800b0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f000 80c8 	beq.w	800b294 <_dtoa_r+0xb34>
 800b104:	9b04      	ldr	r3, [sp, #16]
 800b106:	9301      	str	r3, [sp, #4]
 800b108:	2d00      	cmp	r5, #0
 800b10a:	dd05      	ble.n	800b118 <_dtoa_r+0x9b8>
 800b10c:	4639      	mov	r1, r7
 800b10e:	462a      	mov	r2, r5
 800b110:	4620      	mov	r0, r4
 800b112:	f000 fb85 	bl	800b820 <__lshift>
 800b116:	4607      	mov	r7, r0
 800b118:	f1b8 0f00 	cmp.w	r8, #0
 800b11c:	d05b      	beq.n	800b1d6 <_dtoa_r+0xa76>
 800b11e:	6879      	ldr	r1, [r7, #4]
 800b120:	4620      	mov	r0, r4
 800b122:	f000 f96d 	bl	800b400 <_Balloc>
 800b126:	4605      	mov	r5, r0
 800b128:	b928      	cbnz	r0, 800b136 <_dtoa_r+0x9d6>
 800b12a:	4b83      	ldr	r3, [pc, #524]	; (800b338 <_dtoa_r+0xbd8>)
 800b12c:	4602      	mov	r2, r0
 800b12e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b132:	f7ff bb2e 	b.w	800a792 <_dtoa_r+0x32>
 800b136:	693a      	ldr	r2, [r7, #16]
 800b138:	3202      	adds	r2, #2
 800b13a:	0092      	lsls	r2, r2, #2
 800b13c:	f107 010c 	add.w	r1, r7, #12
 800b140:	300c      	adds	r0, #12
 800b142:	f7ff fa56 	bl	800a5f2 <memcpy>
 800b146:	2201      	movs	r2, #1
 800b148:	4629      	mov	r1, r5
 800b14a:	4620      	mov	r0, r4
 800b14c:	f000 fb68 	bl	800b820 <__lshift>
 800b150:	9b00      	ldr	r3, [sp, #0]
 800b152:	3301      	adds	r3, #1
 800b154:	9304      	str	r3, [sp, #16]
 800b156:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b15a:	4413      	add	r3, r2
 800b15c:	9308      	str	r3, [sp, #32]
 800b15e:	9b02      	ldr	r3, [sp, #8]
 800b160:	f003 0301 	and.w	r3, r3, #1
 800b164:	46b8      	mov	r8, r7
 800b166:	9306      	str	r3, [sp, #24]
 800b168:	4607      	mov	r7, r0
 800b16a:	9b04      	ldr	r3, [sp, #16]
 800b16c:	4631      	mov	r1, r6
 800b16e:	3b01      	subs	r3, #1
 800b170:	4650      	mov	r0, sl
 800b172:	9301      	str	r3, [sp, #4]
 800b174:	f7ff fa6a 	bl	800a64c <quorem>
 800b178:	4641      	mov	r1, r8
 800b17a:	9002      	str	r0, [sp, #8]
 800b17c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b180:	4650      	mov	r0, sl
 800b182:	f000 fbb9 	bl	800b8f8 <__mcmp>
 800b186:	463a      	mov	r2, r7
 800b188:	9005      	str	r0, [sp, #20]
 800b18a:	4631      	mov	r1, r6
 800b18c:	4620      	mov	r0, r4
 800b18e:	f000 fbcf 	bl	800b930 <__mdiff>
 800b192:	68c2      	ldr	r2, [r0, #12]
 800b194:	4605      	mov	r5, r0
 800b196:	bb02      	cbnz	r2, 800b1da <_dtoa_r+0xa7a>
 800b198:	4601      	mov	r1, r0
 800b19a:	4650      	mov	r0, sl
 800b19c:	f000 fbac 	bl	800b8f8 <__mcmp>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	4629      	mov	r1, r5
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	9209      	str	r2, [sp, #36]	; 0x24
 800b1a8:	f000 f96a 	bl	800b480 <_Bfree>
 800b1ac:	9b07      	ldr	r3, [sp, #28]
 800b1ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1b0:	9d04      	ldr	r5, [sp, #16]
 800b1b2:	ea43 0102 	orr.w	r1, r3, r2
 800b1b6:	9b06      	ldr	r3, [sp, #24]
 800b1b8:	4319      	orrs	r1, r3
 800b1ba:	d110      	bne.n	800b1de <_dtoa_r+0xa7e>
 800b1bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b1c0:	d029      	beq.n	800b216 <_dtoa_r+0xab6>
 800b1c2:	9b05      	ldr	r3, [sp, #20]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	dd02      	ble.n	800b1ce <_dtoa_r+0xa6e>
 800b1c8:	9b02      	ldr	r3, [sp, #8]
 800b1ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b1ce:	9b01      	ldr	r3, [sp, #4]
 800b1d0:	f883 9000 	strb.w	r9, [r3]
 800b1d4:	e774      	b.n	800b0c0 <_dtoa_r+0x960>
 800b1d6:	4638      	mov	r0, r7
 800b1d8:	e7ba      	b.n	800b150 <_dtoa_r+0x9f0>
 800b1da:	2201      	movs	r2, #1
 800b1dc:	e7e1      	b.n	800b1a2 <_dtoa_r+0xa42>
 800b1de:	9b05      	ldr	r3, [sp, #20]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	db04      	blt.n	800b1ee <_dtoa_r+0xa8e>
 800b1e4:	9907      	ldr	r1, [sp, #28]
 800b1e6:	430b      	orrs	r3, r1
 800b1e8:	9906      	ldr	r1, [sp, #24]
 800b1ea:	430b      	orrs	r3, r1
 800b1ec:	d120      	bne.n	800b230 <_dtoa_r+0xad0>
 800b1ee:	2a00      	cmp	r2, #0
 800b1f0:	dded      	ble.n	800b1ce <_dtoa_r+0xa6e>
 800b1f2:	4651      	mov	r1, sl
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	f000 fb12 	bl	800b820 <__lshift>
 800b1fc:	4631      	mov	r1, r6
 800b1fe:	4682      	mov	sl, r0
 800b200:	f000 fb7a 	bl	800b8f8 <__mcmp>
 800b204:	2800      	cmp	r0, #0
 800b206:	dc03      	bgt.n	800b210 <_dtoa_r+0xab0>
 800b208:	d1e1      	bne.n	800b1ce <_dtoa_r+0xa6e>
 800b20a:	f019 0f01 	tst.w	r9, #1
 800b20e:	d0de      	beq.n	800b1ce <_dtoa_r+0xa6e>
 800b210:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b214:	d1d8      	bne.n	800b1c8 <_dtoa_r+0xa68>
 800b216:	9a01      	ldr	r2, [sp, #4]
 800b218:	2339      	movs	r3, #57	; 0x39
 800b21a:	7013      	strb	r3, [r2, #0]
 800b21c:	462b      	mov	r3, r5
 800b21e:	461d      	mov	r5, r3
 800b220:	3b01      	subs	r3, #1
 800b222:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b226:	2a39      	cmp	r2, #57	; 0x39
 800b228:	d06c      	beq.n	800b304 <_dtoa_r+0xba4>
 800b22a:	3201      	adds	r2, #1
 800b22c:	701a      	strb	r2, [r3, #0]
 800b22e:	e747      	b.n	800b0c0 <_dtoa_r+0x960>
 800b230:	2a00      	cmp	r2, #0
 800b232:	dd07      	ble.n	800b244 <_dtoa_r+0xae4>
 800b234:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b238:	d0ed      	beq.n	800b216 <_dtoa_r+0xab6>
 800b23a:	9a01      	ldr	r2, [sp, #4]
 800b23c:	f109 0301 	add.w	r3, r9, #1
 800b240:	7013      	strb	r3, [r2, #0]
 800b242:	e73d      	b.n	800b0c0 <_dtoa_r+0x960>
 800b244:	9b04      	ldr	r3, [sp, #16]
 800b246:	9a08      	ldr	r2, [sp, #32]
 800b248:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d043      	beq.n	800b2d8 <_dtoa_r+0xb78>
 800b250:	4651      	mov	r1, sl
 800b252:	2300      	movs	r3, #0
 800b254:	220a      	movs	r2, #10
 800b256:	4620      	mov	r0, r4
 800b258:	f000 f934 	bl	800b4c4 <__multadd>
 800b25c:	45b8      	cmp	r8, r7
 800b25e:	4682      	mov	sl, r0
 800b260:	f04f 0300 	mov.w	r3, #0
 800b264:	f04f 020a 	mov.w	r2, #10
 800b268:	4641      	mov	r1, r8
 800b26a:	4620      	mov	r0, r4
 800b26c:	d107      	bne.n	800b27e <_dtoa_r+0xb1e>
 800b26e:	f000 f929 	bl	800b4c4 <__multadd>
 800b272:	4680      	mov	r8, r0
 800b274:	4607      	mov	r7, r0
 800b276:	9b04      	ldr	r3, [sp, #16]
 800b278:	3301      	adds	r3, #1
 800b27a:	9304      	str	r3, [sp, #16]
 800b27c:	e775      	b.n	800b16a <_dtoa_r+0xa0a>
 800b27e:	f000 f921 	bl	800b4c4 <__multadd>
 800b282:	4639      	mov	r1, r7
 800b284:	4680      	mov	r8, r0
 800b286:	2300      	movs	r3, #0
 800b288:	220a      	movs	r2, #10
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 f91a 	bl	800b4c4 <__multadd>
 800b290:	4607      	mov	r7, r0
 800b292:	e7f0      	b.n	800b276 <_dtoa_r+0xb16>
 800b294:	9b04      	ldr	r3, [sp, #16]
 800b296:	9301      	str	r3, [sp, #4]
 800b298:	9d00      	ldr	r5, [sp, #0]
 800b29a:	4631      	mov	r1, r6
 800b29c:	4650      	mov	r0, sl
 800b29e:	f7ff f9d5 	bl	800a64c <quorem>
 800b2a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b2a6:	9b00      	ldr	r3, [sp, #0]
 800b2a8:	f805 9b01 	strb.w	r9, [r5], #1
 800b2ac:	1aea      	subs	r2, r5, r3
 800b2ae:	9b01      	ldr	r3, [sp, #4]
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	dd07      	ble.n	800b2c4 <_dtoa_r+0xb64>
 800b2b4:	4651      	mov	r1, sl
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	220a      	movs	r2, #10
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	f000 f902 	bl	800b4c4 <__multadd>
 800b2c0:	4682      	mov	sl, r0
 800b2c2:	e7ea      	b.n	800b29a <_dtoa_r+0xb3a>
 800b2c4:	9b01      	ldr	r3, [sp, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	bfc8      	it	gt
 800b2ca:	461d      	movgt	r5, r3
 800b2cc:	9b00      	ldr	r3, [sp, #0]
 800b2ce:	bfd8      	it	le
 800b2d0:	2501      	movle	r5, #1
 800b2d2:	441d      	add	r5, r3
 800b2d4:	f04f 0800 	mov.w	r8, #0
 800b2d8:	4651      	mov	r1, sl
 800b2da:	2201      	movs	r2, #1
 800b2dc:	4620      	mov	r0, r4
 800b2de:	f000 fa9f 	bl	800b820 <__lshift>
 800b2e2:	4631      	mov	r1, r6
 800b2e4:	4682      	mov	sl, r0
 800b2e6:	f000 fb07 	bl	800b8f8 <__mcmp>
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	dc96      	bgt.n	800b21c <_dtoa_r+0xabc>
 800b2ee:	d102      	bne.n	800b2f6 <_dtoa_r+0xb96>
 800b2f0:	f019 0f01 	tst.w	r9, #1
 800b2f4:	d192      	bne.n	800b21c <_dtoa_r+0xabc>
 800b2f6:	462b      	mov	r3, r5
 800b2f8:	461d      	mov	r5, r3
 800b2fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2fe:	2a30      	cmp	r2, #48	; 0x30
 800b300:	d0fa      	beq.n	800b2f8 <_dtoa_r+0xb98>
 800b302:	e6dd      	b.n	800b0c0 <_dtoa_r+0x960>
 800b304:	9a00      	ldr	r2, [sp, #0]
 800b306:	429a      	cmp	r2, r3
 800b308:	d189      	bne.n	800b21e <_dtoa_r+0xabe>
 800b30a:	f10b 0b01 	add.w	fp, fp, #1
 800b30e:	2331      	movs	r3, #49	; 0x31
 800b310:	e796      	b.n	800b240 <_dtoa_r+0xae0>
 800b312:	4b0a      	ldr	r3, [pc, #40]	; (800b33c <_dtoa_r+0xbdc>)
 800b314:	f7ff ba99 	b.w	800a84a <_dtoa_r+0xea>
 800b318:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	f47f aa6d 	bne.w	800a7fa <_dtoa_r+0x9a>
 800b320:	4b07      	ldr	r3, [pc, #28]	; (800b340 <_dtoa_r+0xbe0>)
 800b322:	f7ff ba92 	b.w	800a84a <_dtoa_r+0xea>
 800b326:	9b01      	ldr	r3, [sp, #4]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	dcb5      	bgt.n	800b298 <_dtoa_r+0xb38>
 800b32c:	9b07      	ldr	r3, [sp, #28]
 800b32e:	2b02      	cmp	r3, #2
 800b330:	f73f aeb1 	bgt.w	800b096 <_dtoa_r+0x936>
 800b334:	e7b0      	b.n	800b298 <_dtoa_r+0xb38>
 800b336:	bf00      	nop
 800b338:	0801f57f 	.word	0x0801f57f
 800b33c:	0801f499 	.word	0x0801f499
 800b340:	0801f503 	.word	0x0801f503

0800b344 <_free_r>:
 800b344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b346:	2900      	cmp	r1, #0
 800b348:	d044      	beq.n	800b3d4 <_free_r+0x90>
 800b34a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b34e:	9001      	str	r0, [sp, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	f1a1 0404 	sub.w	r4, r1, #4
 800b356:	bfb8      	it	lt
 800b358:	18e4      	addlt	r4, r4, r3
 800b35a:	f7fe f947 	bl	80095ec <__malloc_lock>
 800b35e:	4a1e      	ldr	r2, [pc, #120]	; (800b3d8 <_free_r+0x94>)
 800b360:	9801      	ldr	r0, [sp, #4]
 800b362:	6813      	ldr	r3, [r2, #0]
 800b364:	b933      	cbnz	r3, 800b374 <_free_r+0x30>
 800b366:	6063      	str	r3, [r4, #4]
 800b368:	6014      	str	r4, [r2, #0]
 800b36a:	b003      	add	sp, #12
 800b36c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b370:	f7fe b942 	b.w	80095f8 <__malloc_unlock>
 800b374:	42a3      	cmp	r3, r4
 800b376:	d908      	bls.n	800b38a <_free_r+0x46>
 800b378:	6825      	ldr	r5, [r4, #0]
 800b37a:	1961      	adds	r1, r4, r5
 800b37c:	428b      	cmp	r3, r1
 800b37e:	bf01      	itttt	eq
 800b380:	6819      	ldreq	r1, [r3, #0]
 800b382:	685b      	ldreq	r3, [r3, #4]
 800b384:	1949      	addeq	r1, r1, r5
 800b386:	6021      	streq	r1, [r4, #0]
 800b388:	e7ed      	b.n	800b366 <_free_r+0x22>
 800b38a:	461a      	mov	r2, r3
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	b10b      	cbz	r3, 800b394 <_free_r+0x50>
 800b390:	42a3      	cmp	r3, r4
 800b392:	d9fa      	bls.n	800b38a <_free_r+0x46>
 800b394:	6811      	ldr	r1, [r2, #0]
 800b396:	1855      	adds	r5, r2, r1
 800b398:	42a5      	cmp	r5, r4
 800b39a:	d10b      	bne.n	800b3b4 <_free_r+0x70>
 800b39c:	6824      	ldr	r4, [r4, #0]
 800b39e:	4421      	add	r1, r4
 800b3a0:	1854      	adds	r4, r2, r1
 800b3a2:	42a3      	cmp	r3, r4
 800b3a4:	6011      	str	r1, [r2, #0]
 800b3a6:	d1e0      	bne.n	800b36a <_free_r+0x26>
 800b3a8:	681c      	ldr	r4, [r3, #0]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	6053      	str	r3, [r2, #4]
 800b3ae:	440c      	add	r4, r1
 800b3b0:	6014      	str	r4, [r2, #0]
 800b3b2:	e7da      	b.n	800b36a <_free_r+0x26>
 800b3b4:	d902      	bls.n	800b3bc <_free_r+0x78>
 800b3b6:	230c      	movs	r3, #12
 800b3b8:	6003      	str	r3, [r0, #0]
 800b3ba:	e7d6      	b.n	800b36a <_free_r+0x26>
 800b3bc:	6825      	ldr	r5, [r4, #0]
 800b3be:	1961      	adds	r1, r4, r5
 800b3c0:	428b      	cmp	r3, r1
 800b3c2:	bf04      	itt	eq
 800b3c4:	6819      	ldreq	r1, [r3, #0]
 800b3c6:	685b      	ldreq	r3, [r3, #4]
 800b3c8:	6063      	str	r3, [r4, #4]
 800b3ca:	bf04      	itt	eq
 800b3cc:	1949      	addeq	r1, r1, r5
 800b3ce:	6021      	streq	r1, [r4, #0]
 800b3d0:	6054      	str	r4, [r2, #4]
 800b3d2:	e7ca      	b.n	800b36a <_free_r+0x26>
 800b3d4:	b003      	add	sp, #12
 800b3d6:	bd30      	pop	{r4, r5, pc}
 800b3d8:	20014704 	.word	0x20014704

0800b3dc <__ascii_mbtowc>:
 800b3dc:	b082      	sub	sp, #8
 800b3de:	b901      	cbnz	r1, 800b3e2 <__ascii_mbtowc+0x6>
 800b3e0:	a901      	add	r1, sp, #4
 800b3e2:	b142      	cbz	r2, 800b3f6 <__ascii_mbtowc+0x1a>
 800b3e4:	b14b      	cbz	r3, 800b3fa <__ascii_mbtowc+0x1e>
 800b3e6:	7813      	ldrb	r3, [r2, #0]
 800b3e8:	600b      	str	r3, [r1, #0]
 800b3ea:	7812      	ldrb	r2, [r2, #0]
 800b3ec:	1e10      	subs	r0, r2, #0
 800b3ee:	bf18      	it	ne
 800b3f0:	2001      	movne	r0, #1
 800b3f2:	b002      	add	sp, #8
 800b3f4:	4770      	bx	lr
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	e7fb      	b.n	800b3f2 <__ascii_mbtowc+0x16>
 800b3fa:	f06f 0001 	mvn.w	r0, #1
 800b3fe:	e7f8      	b.n	800b3f2 <__ascii_mbtowc+0x16>

0800b400 <_Balloc>:
 800b400:	b570      	push	{r4, r5, r6, lr}
 800b402:	69c6      	ldr	r6, [r0, #28]
 800b404:	4604      	mov	r4, r0
 800b406:	460d      	mov	r5, r1
 800b408:	b976      	cbnz	r6, 800b428 <_Balloc+0x28>
 800b40a:	2010      	movs	r0, #16
 800b40c:	f7fe f846 	bl	800949c <malloc>
 800b410:	4602      	mov	r2, r0
 800b412:	61e0      	str	r0, [r4, #28]
 800b414:	b920      	cbnz	r0, 800b420 <_Balloc+0x20>
 800b416:	4b18      	ldr	r3, [pc, #96]	; (800b478 <_Balloc+0x78>)
 800b418:	4818      	ldr	r0, [pc, #96]	; (800b47c <_Balloc+0x7c>)
 800b41a:	216b      	movs	r1, #107	; 0x6b
 800b41c:	f7ff f8f8 	bl	800a610 <__assert_func>
 800b420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b424:	6006      	str	r6, [r0, #0]
 800b426:	60c6      	str	r6, [r0, #12]
 800b428:	69e6      	ldr	r6, [r4, #28]
 800b42a:	68f3      	ldr	r3, [r6, #12]
 800b42c:	b183      	cbz	r3, 800b450 <_Balloc+0x50>
 800b42e:	69e3      	ldr	r3, [r4, #28]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b436:	b9b8      	cbnz	r0, 800b468 <_Balloc+0x68>
 800b438:	2101      	movs	r1, #1
 800b43a:	fa01 f605 	lsl.w	r6, r1, r5
 800b43e:	1d72      	adds	r2, r6, #5
 800b440:	0092      	lsls	r2, r2, #2
 800b442:	4620      	mov	r0, r4
 800b444:	f000 fea8 	bl	800c198 <_calloc_r>
 800b448:	b160      	cbz	r0, 800b464 <_Balloc+0x64>
 800b44a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b44e:	e00e      	b.n	800b46e <_Balloc+0x6e>
 800b450:	2221      	movs	r2, #33	; 0x21
 800b452:	2104      	movs	r1, #4
 800b454:	4620      	mov	r0, r4
 800b456:	f000 fe9f 	bl	800c198 <_calloc_r>
 800b45a:	69e3      	ldr	r3, [r4, #28]
 800b45c:	60f0      	str	r0, [r6, #12]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1e4      	bne.n	800b42e <_Balloc+0x2e>
 800b464:	2000      	movs	r0, #0
 800b466:	bd70      	pop	{r4, r5, r6, pc}
 800b468:	6802      	ldr	r2, [r0, #0]
 800b46a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b46e:	2300      	movs	r3, #0
 800b470:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b474:	e7f7      	b.n	800b466 <_Balloc+0x66>
 800b476:	bf00      	nop
 800b478:	0801f510 	.word	0x0801f510
 800b47c:	0801f590 	.word	0x0801f590

0800b480 <_Bfree>:
 800b480:	b570      	push	{r4, r5, r6, lr}
 800b482:	69c6      	ldr	r6, [r0, #28]
 800b484:	4605      	mov	r5, r0
 800b486:	460c      	mov	r4, r1
 800b488:	b976      	cbnz	r6, 800b4a8 <_Bfree+0x28>
 800b48a:	2010      	movs	r0, #16
 800b48c:	f7fe f806 	bl	800949c <malloc>
 800b490:	4602      	mov	r2, r0
 800b492:	61e8      	str	r0, [r5, #28]
 800b494:	b920      	cbnz	r0, 800b4a0 <_Bfree+0x20>
 800b496:	4b09      	ldr	r3, [pc, #36]	; (800b4bc <_Bfree+0x3c>)
 800b498:	4809      	ldr	r0, [pc, #36]	; (800b4c0 <_Bfree+0x40>)
 800b49a:	218f      	movs	r1, #143	; 0x8f
 800b49c:	f7ff f8b8 	bl	800a610 <__assert_func>
 800b4a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4a4:	6006      	str	r6, [r0, #0]
 800b4a6:	60c6      	str	r6, [r0, #12]
 800b4a8:	b13c      	cbz	r4, 800b4ba <_Bfree+0x3a>
 800b4aa:	69eb      	ldr	r3, [r5, #28]
 800b4ac:	6862      	ldr	r2, [r4, #4]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4b4:	6021      	str	r1, [r4, #0]
 800b4b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b4ba:	bd70      	pop	{r4, r5, r6, pc}
 800b4bc:	0801f510 	.word	0x0801f510
 800b4c0:	0801f590 	.word	0x0801f590

0800b4c4 <__multadd>:
 800b4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c8:	690d      	ldr	r5, [r1, #16]
 800b4ca:	4607      	mov	r7, r0
 800b4cc:	460c      	mov	r4, r1
 800b4ce:	461e      	mov	r6, r3
 800b4d0:	f101 0c14 	add.w	ip, r1, #20
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	f8dc 3000 	ldr.w	r3, [ip]
 800b4da:	b299      	uxth	r1, r3
 800b4dc:	fb02 6101 	mla	r1, r2, r1, r6
 800b4e0:	0c1e      	lsrs	r6, r3, #16
 800b4e2:	0c0b      	lsrs	r3, r1, #16
 800b4e4:	fb02 3306 	mla	r3, r2, r6, r3
 800b4e8:	b289      	uxth	r1, r1
 800b4ea:	3001      	adds	r0, #1
 800b4ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b4f0:	4285      	cmp	r5, r0
 800b4f2:	f84c 1b04 	str.w	r1, [ip], #4
 800b4f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b4fa:	dcec      	bgt.n	800b4d6 <__multadd+0x12>
 800b4fc:	b30e      	cbz	r6, 800b542 <__multadd+0x7e>
 800b4fe:	68a3      	ldr	r3, [r4, #8]
 800b500:	42ab      	cmp	r3, r5
 800b502:	dc19      	bgt.n	800b538 <__multadd+0x74>
 800b504:	6861      	ldr	r1, [r4, #4]
 800b506:	4638      	mov	r0, r7
 800b508:	3101      	adds	r1, #1
 800b50a:	f7ff ff79 	bl	800b400 <_Balloc>
 800b50e:	4680      	mov	r8, r0
 800b510:	b928      	cbnz	r0, 800b51e <__multadd+0x5a>
 800b512:	4602      	mov	r2, r0
 800b514:	4b0c      	ldr	r3, [pc, #48]	; (800b548 <__multadd+0x84>)
 800b516:	480d      	ldr	r0, [pc, #52]	; (800b54c <__multadd+0x88>)
 800b518:	21ba      	movs	r1, #186	; 0xba
 800b51a:	f7ff f879 	bl	800a610 <__assert_func>
 800b51e:	6922      	ldr	r2, [r4, #16]
 800b520:	3202      	adds	r2, #2
 800b522:	f104 010c 	add.w	r1, r4, #12
 800b526:	0092      	lsls	r2, r2, #2
 800b528:	300c      	adds	r0, #12
 800b52a:	f7ff f862 	bl	800a5f2 <memcpy>
 800b52e:	4621      	mov	r1, r4
 800b530:	4638      	mov	r0, r7
 800b532:	f7ff ffa5 	bl	800b480 <_Bfree>
 800b536:	4644      	mov	r4, r8
 800b538:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b53c:	3501      	adds	r5, #1
 800b53e:	615e      	str	r6, [r3, #20]
 800b540:	6125      	str	r5, [r4, #16]
 800b542:	4620      	mov	r0, r4
 800b544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b548:	0801f57f 	.word	0x0801f57f
 800b54c:	0801f590 	.word	0x0801f590

0800b550 <__hi0bits>:
 800b550:	0c03      	lsrs	r3, r0, #16
 800b552:	041b      	lsls	r3, r3, #16
 800b554:	b9d3      	cbnz	r3, 800b58c <__hi0bits+0x3c>
 800b556:	0400      	lsls	r0, r0, #16
 800b558:	2310      	movs	r3, #16
 800b55a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b55e:	bf04      	itt	eq
 800b560:	0200      	lsleq	r0, r0, #8
 800b562:	3308      	addeq	r3, #8
 800b564:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b568:	bf04      	itt	eq
 800b56a:	0100      	lsleq	r0, r0, #4
 800b56c:	3304      	addeq	r3, #4
 800b56e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b572:	bf04      	itt	eq
 800b574:	0080      	lsleq	r0, r0, #2
 800b576:	3302      	addeq	r3, #2
 800b578:	2800      	cmp	r0, #0
 800b57a:	db05      	blt.n	800b588 <__hi0bits+0x38>
 800b57c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b580:	f103 0301 	add.w	r3, r3, #1
 800b584:	bf08      	it	eq
 800b586:	2320      	moveq	r3, #32
 800b588:	4618      	mov	r0, r3
 800b58a:	4770      	bx	lr
 800b58c:	2300      	movs	r3, #0
 800b58e:	e7e4      	b.n	800b55a <__hi0bits+0xa>

0800b590 <__lo0bits>:
 800b590:	6803      	ldr	r3, [r0, #0]
 800b592:	f013 0207 	ands.w	r2, r3, #7
 800b596:	d00c      	beq.n	800b5b2 <__lo0bits+0x22>
 800b598:	07d9      	lsls	r1, r3, #31
 800b59a:	d422      	bmi.n	800b5e2 <__lo0bits+0x52>
 800b59c:	079a      	lsls	r2, r3, #30
 800b59e:	bf49      	itett	mi
 800b5a0:	085b      	lsrmi	r3, r3, #1
 800b5a2:	089b      	lsrpl	r3, r3, #2
 800b5a4:	6003      	strmi	r3, [r0, #0]
 800b5a6:	2201      	movmi	r2, #1
 800b5a8:	bf5c      	itt	pl
 800b5aa:	6003      	strpl	r3, [r0, #0]
 800b5ac:	2202      	movpl	r2, #2
 800b5ae:	4610      	mov	r0, r2
 800b5b0:	4770      	bx	lr
 800b5b2:	b299      	uxth	r1, r3
 800b5b4:	b909      	cbnz	r1, 800b5ba <__lo0bits+0x2a>
 800b5b6:	0c1b      	lsrs	r3, r3, #16
 800b5b8:	2210      	movs	r2, #16
 800b5ba:	b2d9      	uxtb	r1, r3
 800b5bc:	b909      	cbnz	r1, 800b5c2 <__lo0bits+0x32>
 800b5be:	3208      	adds	r2, #8
 800b5c0:	0a1b      	lsrs	r3, r3, #8
 800b5c2:	0719      	lsls	r1, r3, #28
 800b5c4:	bf04      	itt	eq
 800b5c6:	091b      	lsreq	r3, r3, #4
 800b5c8:	3204      	addeq	r2, #4
 800b5ca:	0799      	lsls	r1, r3, #30
 800b5cc:	bf04      	itt	eq
 800b5ce:	089b      	lsreq	r3, r3, #2
 800b5d0:	3202      	addeq	r2, #2
 800b5d2:	07d9      	lsls	r1, r3, #31
 800b5d4:	d403      	bmi.n	800b5de <__lo0bits+0x4e>
 800b5d6:	085b      	lsrs	r3, r3, #1
 800b5d8:	f102 0201 	add.w	r2, r2, #1
 800b5dc:	d003      	beq.n	800b5e6 <__lo0bits+0x56>
 800b5de:	6003      	str	r3, [r0, #0]
 800b5e0:	e7e5      	b.n	800b5ae <__lo0bits+0x1e>
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	e7e3      	b.n	800b5ae <__lo0bits+0x1e>
 800b5e6:	2220      	movs	r2, #32
 800b5e8:	e7e1      	b.n	800b5ae <__lo0bits+0x1e>
	...

0800b5ec <__i2b>:
 800b5ec:	b510      	push	{r4, lr}
 800b5ee:	460c      	mov	r4, r1
 800b5f0:	2101      	movs	r1, #1
 800b5f2:	f7ff ff05 	bl	800b400 <_Balloc>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	b928      	cbnz	r0, 800b606 <__i2b+0x1a>
 800b5fa:	4b05      	ldr	r3, [pc, #20]	; (800b610 <__i2b+0x24>)
 800b5fc:	4805      	ldr	r0, [pc, #20]	; (800b614 <__i2b+0x28>)
 800b5fe:	f240 1145 	movw	r1, #325	; 0x145
 800b602:	f7ff f805 	bl	800a610 <__assert_func>
 800b606:	2301      	movs	r3, #1
 800b608:	6144      	str	r4, [r0, #20]
 800b60a:	6103      	str	r3, [r0, #16]
 800b60c:	bd10      	pop	{r4, pc}
 800b60e:	bf00      	nop
 800b610:	0801f57f 	.word	0x0801f57f
 800b614:	0801f590 	.word	0x0801f590

0800b618 <__multiply>:
 800b618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61c:	4691      	mov	r9, r2
 800b61e:	690a      	ldr	r2, [r1, #16]
 800b620:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b624:	429a      	cmp	r2, r3
 800b626:	bfb8      	it	lt
 800b628:	460b      	movlt	r3, r1
 800b62a:	460c      	mov	r4, r1
 800b62c:	bfbc      	itt	lt
 800b62e:	464c      	movlt	r4, r9
 800b630:	4699      	movlt	r9, r3
 800b632:	6927      	ldr	r7, [r4, #16]
 800b634:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b638:	68a3      	ldr	r3, [r4, #8]
 800b63a:	6861      	ldr	r1, [r4, #4]
 800b63c:	eb07 060a 	add.w	r6, r7, sl
 800b640:	42b3      	cmp	r3, r6
 800b642:	b085      	sub	sp, #20
 800b644:	bfb8      	it	lt
 800b646:	3101      	addlt	r1, #1
 800b648:	f7ff feda 	bl	800b400 <_Balloc>
 800b64c:	b930      	cbnz	r0, 800b65c <__multiply+0x44>
 800b64e:	4602      	mov	r2, r0
 800b650:	4b44      	ldr	r3, [pc, #272]	; (800b764 <__multiply+0x14c>)
 800b652:	4845      	ldr	r0, [pc, #276]	; (800b768 <__multiply+0x150>)
 800b654:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b658:	f7fe ffda 	bl	800a610 <__assert_func>
 800b65c:	f100 0514 	add.w	r5, r0, #20
 800b660:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b664:	462b      	mov	r3, r5
 800b666:	2200      	movs	r2, #0
 800b668:	4543      	cmp	r3, r8
 800b66a:	d321      	bcc.n	800b6b0 <__multiply+0x98>
 800b66c:	f104 0314 	add.w	r3, r4, #20
 800b670:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b674:	f109 0314 	add.w	r3, r9, #20
 800b678:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b67c:	9202      	str	r2, [sp, #8]
 800b67e:	1b3a      	subs	r2, r7, r4
 800b680:	3a15      	subs	r2, #21
 800b682:	f022 0203 	bic.w	r2, r2, #3
 800b686:	3204      	adds	r2, #4
 800b688:	f104 0115 	add.w	r1, r4, #21
 800b68c:	428f      	cmp	r7, r1
 800b68e:	bf38      	it	cc
 800b690:	2204      	movcc	r2, #4
 800b692:	9201      	str	r2, [sp, #4]
 800b694:	9a02      	ldr	r2, [sp, #8]
 800b696:	9303      	str	r3, [sp, #12]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d80c      	bhi.n	800b6b6 <__multiply+0x9e>
 800b69c:	2e00      	cmp	r6, #0
 800b69e:	dd03      	ble.n	800b6a8 <__multiply+0x90>
 800b6a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d05b      	beq.n	800b760 <__multiply+0x148>
 800b6a8:	6106      	str	r6, [r0, #16]
 800b6aa:	b005      	add	sp, #20
 800b6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b0:	f843 2b04 	str.w	r2, [r3], #4
 800b6b4:	e7d8      	b.n	800b668 <__multiply+0x50>
 800b6b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b6ba:	f1ba 0f00 	cmp.w	sl, #0
 800b6be:	d024      	beq.n	800b70a <__multiply+0xf2>
 800b6c0:	f104 0e14 	add.w	lr, r4, #20
 800b6c4:	46a9      	mov	r9, r5
 800b6c6:	f04f 0c00 	mov.w	ip, #0
 800b6ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b6ce:	f8d9 1000 	ldr.w	r1, [r9]
 800b6d2:	fa1f fb82 	uxth.w	fp, r2
 800b6d6:	b289      	uxth	r1, r1
 800b6d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b6dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b6e0:	f8d9 2000 	ldr.w	r2, [r9]
 800b6e4:	4461      	add	r1, ip
 800b6e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b6ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800b6ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b6f2:	b289      	uxth	r1, r1
 800b6f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b6f8:	4577      	cmp	r7, lr
 800b6fa:	f849 1b04 	str.w	r1, [r9], #4
 800b6fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b702:	d8e2      	bhi.n	800b6ca <__multiply+0xb2>
 800b704:	9a01      	ldr	r2, [sp, #4]
 800b706:	f845 c002 	str.w	ip, [r5, r2]
 800b70a:	9a03      	ldr	r2, [sp, #12]
 800b70c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b710:	3304      	adds	r3, #4
 800b712:	f1b9 0f00 	cmp.w	r9, #0
 800b716:	d021      	beq.n	800b75c <__multiply+0x144>
 800b718:	6829      	ldr	r1, [r5, #0]
 800b71a:	f104 0c14 	add.w	ip, r4, #20
 800b71e:	46ae      	mov	lr, r5
 800b720:	f04f 0a00 	mov.w	sl, #0
 800b724:	f8bc b000 	ldrh.w	fp, [ip]
 800b728:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b72c:	fb09 220b 	mla	r2, r9, fp, r2
 800b730:	4452      	add	r2, sl
 800b732:	b289      	uxth	r1, r1
 800b734:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b738:	f84e 1b04 	str.w	r1, [lr], #4
 800b73c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b740:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b744:	f8be 1000 	ldrh.w	r1, [lr]
 800b748:	fb09 110a 	mla	r1, r9, sl, r1
 800b74c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b750:	4567      	cmp	r7, ip
 800b752:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b756:	d8e5      	bhi.n	800b724 <__multiply+0x10c>
 800b758:	9a01      	ldr	r2, [sp, #4]
 800b75a:	50a9      	str	r1, [r5, r2]
 800b75c:	3504      	adds	r5, #4
 800b75e:	e799      	b.n	800b694 <__multiply+0x7c>
 800b760:	3e01      	subs	r6, #1
 800b762:	e79b      	b.n	800b69c <__multiply+0x84>
 800b764:	0801f57f 	.word	0x0801f57f
 800b768:	0801f590 	.word	0x0801f590

0800b76c <__pow5mult>:
 800b76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b770:	4615      	mov	r5, r2
 800b772:	f012 0203 	ands.w	r2, r2, #3
 800b776:	4606      	mov	r6, r0
 800b778:	460f      	mov	r7, r1
 800b77a:	d007      	beq.n	800b78c <__pow5mult+0x20>
 800b77c:	4c25      	ldr	r4, [pc, #148]	; (800b814 <__pow5mult+0xa8>)
 800b77e:	3a01      	subs	r2, #1
 800b780:	2300      	movs	r3, #0
 800b782:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b786:	f7ff fe9d 	bl	800b4c4 <__multadd>
 800b78a:	4607      	mov	r7, r0
 800b78c:	10ad      	asrs	r5, r5, #2
 800b78e:	d03d      	beq.n	800b80c <__pow5mult+0xa0>
 800b790:	69f4      	ldr	r4, [r6, #28]
 800b792:	b97c      	cbnz	r4, 800b7b4 <__pow5mult+0x48>
 800b794:	2010      	movs	r0, #16
 800b796:	f7fd fe81 	bl	800949c <malloc>
 800b79a:	4602      	mov	r2, r0
 800b79c:	61f0      	str	r0, [r6, #28]
 800b79e:	b928      	cbnz	r0, 800b7ac <__pow5mult+0x40>
 800b7a0:	4b1d      	ldr	r3, [pc, #116]	; (800b818 <__pow5mult+0xac>)
 800b7a2:	481e      	ldr	r0, [pc, #120]	; (800b81c <__pow5mult+0xb0>)
 800b7a4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b7a8:	f7fe ff32 	bl	800a610 <__assert_func>
 800b7ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7b0:	6004      	str	r4, [r0, #0]
 800b7b2:	60c4      	str	r4, [r0, #12]
 800b7b4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b7b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7bc:	b94c      	cbnz	r4, 800b7d2 <__pow5mult+0x66>
 800b7be:	f240 2171 	movw	r1, #625	; 0x271
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	f7ff ff12 	bl	800b5ec <__i2b>
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	6003      	str	r3, [r0, #0]
 800b7d2:	f04f 0900 	mov.w	r9, #0
 800b7d6:	07eb      	lsls	r3, r5, #31
 800b7d8:	d50a      	bpl.n	800b7f0 <__pow5mult+0x84>
 800b7da:	4639      	mov	r1, r7
 800b7dc:	4622      	mov	r2, r4
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f7ff ff1a 	bl	800b618 <__multiply>
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	4680      	mov	r8, r0
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f7ff fe49 	bl	800b480 <_Bfree>
 800b7ee:	4647      	mov	r7, r8
 800b7f0:	106d      	asrs	r5, r5, #1
 800b7f2:	d00b      	beq.n	800b80c <__pow5mult+0xa0>
 800b7f4:	6820      	ldr	r0, [r4, #0]
 800b7f6:	b938      	cbnz	r0, 800b808 <__pow5mult+0x9c>
 800b7f8:	4622      	mov	r2, r4
 800b7fa:	4621      	mov	r1, r4
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	f7ff ff0b 	bl	800b618 <__multiply>
 800b802:	6020      	str	r0, [r4, #0]
 800b804:	f8c0 9000 	str.w	r9, [r0]
 800b808:	4604      	mov	r4, r0
 800b80a:	e7e4      	b.n	800b7d6 <__pow5mult+0x6a>
 800b80c:	4638      	mov	r0, r7
 800b80e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b812:	bf00      	nop
 800b814:	0801f6e0 	.word	0x0801f6e0
 800b818:	0801f510 	.word	0x0801f510
 800b81c:	0801f590 	.word	0x0801f590

0800b820 <__lshift>:
 800b820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b824:	460c      	mov	r4, r1
 800b826:	6849      	ldr	r1, [r1, #4]
 800b828:	6923      	ldr	r3, [r4, #16]
 800b82a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b82e:	68a3      	ldr	r3, [r4, #8]
 800b830:	4607      	mov	r7, r0
 800b832:	4691      	mov	r9, r2
 800b834:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b838:	f108 0601 	add.w	r6, r8, #1
 800b83c:	42b3      	cmp	r3, r6
 800b83e:	db0b      	blt.n	800b858 <__lshift+0x38>
 800b840:	4638      	mov	r0, r7
 800b842:	f7ff fddd 	bl	800b400 <_Balloc>
 800b846:	4605      	mov	r5, r0
 800b848:	b948      	cbnz	r0, 800b85e <__lshift+0x3e>
 800b84a:	4602      	mov	r2, r0
 800b84c:	4b28      	ldr	r3, [pc, #160]	; (800b8f0 <__lshift+0xd0>)
 800b84e:	4829      	ldr	r0, [pc, #164]	; (800b8f4 <__lshift+0xd4>)
 800b850:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b854:	f7fe fedc 	bl	800a610 <__assert_func>
 800b858:	3101      	adds	r1, #1
 800b85a:	005b      	lsls	r3, r3, #1
 800b85c:	e7ee      	b.n	800b83c <__lshift+0x1c>
 800b85e:	2300      	movs	r3, #0
 800b860:	f100 0114 	add.w	r1, r0, #20
 800b864:	f100 0210 	add.w	r2, r0, #16
 800b868:	4618      	mov	r0, r3
 800b86a:	4553      	cmp	r3, sl
 800b86c:	db33      	blt.n	800b8d6 <__lshift+0xb6>
 800b86e:	6920      	ldr	r0, [r4, #16]
 800b870:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b874:	f104 0314 	add.w	r3, r4, #20
 800b878:	f019 091f 	ands.w	r9, r9, #31
 800b87c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b880:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b884:	d02b      	beq.n	800b8de <__lshift+0xbe>
 800b886:	f1c9 0e20 	rsb	lr, r9, #32
 800b88a:	468a      	mov	sl, r1
 800b88c:	2200      	movs	r2, #0
 800b88e:	6818      	ldr	r0, [r3, #0]
 800b890:	fa00 f009 	lsl.w	r0, r0, r9
 800b894:	4310      	orrs	r0, r2
 800b896:	f84a 0b04 	str.w	r0, [sl], #4
 800b89a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b89e:	459c      	cmp	ip, r3
 800b8a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8a4:	d8f3      	bhi.n	800b88e <__lshift+0x6e>
 800b8a6:	ebac 0304 	sub.w	r3, ip, r4
 800b8aa:	3b15      	subs	r3, #21
 800b8ac:	f023 0303 	bic.w	r3, r3, #3
 800b8b0:	3304      	adds	r3, #4
 800b8b2:	f104 0015 	add.w	r0, r4, #21
 800b8b6:	4584      	cmp	ip, r0
 800b8b8:	bf38      	it	cc
 800b8ba:	2304      	movcc	r3, #4
 800b8bc:	50ca      	str	r2, [r1, r3]
 800b8be:	b10a      	cbz	r2, 800b8c4 <__lshift+0xa4>
 800b8c0:	f108 0602 	add.w	r6, r8, #2
 800b8c4:	3e01      	subs	r6, #1
 800b8c6:	4638      	mov	r0, r7
 800b8c8:	612e      	str	r6, [r5, #16]
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	f7ff fdd8 	bl	800b480 <_Bfree>
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b8da:	3301      	adds	r3, #1
 800b8dc:	e7c5      	b.n	800b86a <__lshift+0x4a>
 800b8de:	3904      	subs	r1, #4
 800b8e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8e8:	459c      	cmp	ip, r3
 800b8ea:	d8f9      	bhi.n	800b8e0 <__lshift+0xc0>
 800b8ec:	e7ea      	b.n	800b8c4 <__lshift+0xa4>
 800b8ee:	bf00      	nop
 800b8f0:	0801f57f 	.word	0x0801f57f
 800b8f4:	0801f590 	.word	0x0801f590

0800b8f8 <__mcmp>:
 800b8f8:	b530      	push	{r4, r5, lr}
 800b8fa:	6902      	ldr	r2, [r0, #16]
 800b8fc:	690c      	ldr	r4, [r1, #16]
 800b8fe:	1b12      	subs	r2, r2, r4
 800b900:	d10e      	bne.n	800b920 <__mcmp+0x28>
 800b902:	f100 0314 	add.w	r3, r0, #20
 800b906:	3114      	adds	r1, #20
 800b908:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b90c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b910:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b914:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b918:	42a5      	cmp	r5, r4
 800b91a:	d003      	beq.n	800b924 <__mcmp+0x2c>
 800b91c:	d305      	bcc.n	800b92a <__mcmp+0x32>
 800b91e:	2201      	movs	r2, #1
 800b920:	4610      	mov	r0, r2
 800b922:	bd30      	pop	{r4, r5, pc}
 800b924:	4283      	cmp	r3, r0
 800b926:	d3f3      	bcc.n	800b910 <__mcmp+0x18>
 800b928:	e7fa      	b.n	800b920 <__mcmp+0x28>
 800b92a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b92e:	e7f7      	b.n	800b920 <__mcmp+0x28>

0800b930 <__mdiff>:
 800b930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b934:	460c      	mov	r4, r1
 800b936:	4606      	mov	r6, r0
 800b938:	4611      	mov	r1, r2
 800b93a:	4620      	mov	r0, r4
 800b93c:	4690      	mov	r8, r2
 800b93e:	f7ff ffdb 	bl	800b8f8 <__mcmp>
 800b942:	1e05      	subs	r5, r0, #0
 800b944:	d110      	bne.n	800b968 <__mdiff+0x38>
 800b946:	4629      	mov	r1, r5
 800b948:	4630      	mov	r0, r6
 800b94a:	f7ff fd59 	bl	800b400 <_Balloc>
 800b94e:	b930      	cbnz	r0, 800b95e <__mdiff+0x2e>
 800b950:	4b3a      	ldr	r3, [pc, #232]	; (800ba3c <__mdiff+0x10c>)
 800b952:	4602      	mov	r2, r0
 800b954:	f240 2137 	movw	r1, #567	; 0x237
 800b958:	4839      	ldr	r0, [pc, #228]	; (800ba40 <__mdiff+0x110>)
 800b95a:	f7fe fe59 	bl	800a610 <__assert_func>
 800b95e:	2301      	movs	r3, #1
 800b960:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b964:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b968:	bfa4      	itt	ge
 800b96a:	4643      	movge	r3, r8
 800b96c:	46a0      	movge	r8, r4
 800b96e:	4630      	mov	r0, r6
 800b970:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b974:	bfa6      	itte	ge
 800b976:	461c      	movge	r4, r3
 800b978:	2500      	movge	r5, #0
 800b97a:	2501      	movlt	r5, #1
 800b97c:	f7ff fd40 	bl	800b400 <_Balloc>
 800b980:	b920      	cbnz	r0, 800b98c <__mdiff+0x5c>
 800b982:	4b2e      	ldr	r3, [pc, #184]	; (800ba3c <__mdiff+0x10c>)
 800b984:	4602      	mov	r2, r0
 800b986:	f240 2145 	movw	r1, #581	; 0x245
 800b98a:	e7e5      	b.n	800b958 <__mdiff+0x28>
 800b98c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b990:	6926      	ldr	r6, [r4, #16]
 800b992:	60c5      	str	r5, [r0, #12]
 800b994:	f104 0914 	add.w	r9, r4, #20
 800b998:	f108 0514 	add.w	r5, r8, #20
 800b99c:	f100 0e14 	add.w	lr, r0, #20
 800b9a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b9a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b9a8:	f108 0210 	add.w	r2, r8, #16
 800b9ac:	46f2      	mov	sl, lr
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b9b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b9b8:	fa11 f88b 	uxtah	r8, r1, fp
 800b9bc:	b299      	uxth	r1, r3
 800b9be:	0c1b      	lsrs	r3, r3, #16
 800b9c0:	eba8 0801 	sub.w	r8, r8, r1
 800b9c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b9c8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b9cc:	fa1f f888 	uxth.w	r8, r8
 800b9d0:	1419      	asrs	r1, r3, #16
 800b9d2:	454e      	cmp	r6, r9
 800b9d4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b9d8:	f84a 3b04 	str.w	r3, [sl], #4
 800b9dc:	d8e8      	bhi.n	800b9b0 <__mdiff+0x80>
 800b9de:	1b33      	subs	r3, r6, r4
 800b9e0:	3b15      	subs	r3, #21
 800b9e2:	f023 0303 	bic.w	r3, r3, #3
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	3415      	adds	r4, #21
 800b9ea:	42a6      	cmp	r6, r4
 800b9ec:	bf38      	it	cc
 800b9ee:	2304      	movcc	r3, #4
 800b9f0:	441d      	add	r5, r3
 800b9f2:	4473      	add	r3, lr
 800b9f4:	469e      	mov	lr, r3
 800b9f6:	462e      	mov	r6, r5
 800b9f8:	4566      	cmp	r6, ip
 800b9fa:	d30e      	bcc.n	800ba1a <__mdiff+0xea>
 800b9fc:	f10c 0203 	add.w	r2, ip, #3
 800ba00:	1b52      	subs	r2, r2, r5
 800ba02:	f022 0203 	bic.w	r2, r2, #3
 800ba06:	3d03      	subs	r5, #3
 800ba08:	45ac      	cmp	ip, r5
 800ba0a:	bf38      	it	cc
 800ba0c:	2200      	movcc	r2, #0
 800ba0e:	4413      	add	r3, r2
 800ba10:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ba14:	b17a      	cbz	r2, 800ba36 <__mdiff+0x106>
 800ba16:	6107      	str	r7, [r0, #16]
 800ba18:	e7a4      	b.n	800b964 <__mdiff+0x34>
 800ba1a:	f856 8b04 	ldr.w	r8, [r6], #4
 800ba1e:	fa11 f288 	uxtah	r2, r1, r8
 800ba22:	1414      	asrs	r4, r2, #16
 800ba24:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ba28:	b292      	uxth	r2, r2
 800ba2a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ba2e:	f84e 2b04 	str.w	r2, [lr], #4
 800ba32:	1421      	asrs	r1, r4, #16
 800ba34:	e7e0      	b.n	800b9f8 <__mdiff+0xc8>
 800ba36:	3f01      	subs	r7, #1
 800ba38:	e7ea      	b.n	800ba10 <__mdiff+0xe0>
 800ba3a:	bf00      	nop
 800ba3c:	0801f57f 	.word	0x0801f57f
 800ba40:	0801f590 	.word	0x0801f590

0800ba44 <__d2b>:
 800ba44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba48:	460f      	mov	r7, r1
 800ba4a:	2101      	movs	r1, #1
 800ba4c:	ec59 8b10 	vmov	r8, r9, d0
 800ba50:	4616      	mov	r6, r2
 800ba52:	f7ff fcd5 	bl	800b400 <_Balloc>
 800ba56:	4604      	mov	r4, r0
 800ba58:	b930      	cbnz	r0, 800ba68 <__d2b+0x24>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	4b24      	ldr	r3, [pc, #144]	; (800baf0 <__d2b+0xac>)
 800ba5e:	4825      	ldr	r0, [pc, #148]	; (800baf4 <__d2b+0xb0>)
 800ba60:	f240 310f 	movw	r1, #783	; 0x30f
 800ba64:	f7fe fdd4 	bl	800a610 <__assert_func>
 800ba68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba70:	bb2d      	cbnz	r5, 800babe <__d2b+0x7a>
 800ba72:	9301      	str	r3, [sp, #4]
 800ba74:	f1b8 0300 	subs.w	r3, r8, #0
 800ba78:	d026      	beq.n	800bac8 <__d2b+0x84>
 800ba7a:	4668      	mov	r0, sp
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	f7ff fd87 	bl	800b590 <__lo0bits>
 800ba82:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ba86:	b1e8      	cbz	r0, 800bac4 <__d2b+0x80>
 800ba88:	f1c0 0320 	rsb	r3, r0, #32
 800ba8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba90:	430b      	orrs	r3, r1
 800ba92:	40c2      	lsrs	r2, r0
 800ba94:	6163      	str	r3, [r4, #20]
 800ba96:	9201      	str	r2, [sp, #4]
 800ba98:	9b01      	ldr	r3, [sp, #4]
 800ba9a:	61a3      	str	r3, [r4, #24]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	bf14      	ite	ne
 800baa0:	2202      	movne	r2, #2
 800baa2:	2201      	moveq	r2, #1
 800baa4:	6122      	str	r2, [r4, #16]
 800baa6:	b1bd      	cbz	r5, 800bad8 <__d2b+0x94>
 800baa8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800baac:	4405      	add	r5, r0
 800baae:	603d      	str	r5, [r7, #0]
 800bab0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bab4:	6030      	str	r0, [r6, #0]
 800bab6:	4620      	mov	r0, r4
 800bab8:	b003      	add	sp, #12
 800baba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800babe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bac2:	e7d6      	b.n	800ba72 <__d2b+0x2e>
 800bac4:	6161      	str	r1, [r4, #20]
 800bac6:	e7e7      	b.n	800ba98 <__d2b+0x54>
 800bac8:	a801      	add	r0, sp, #4
 800baca:	f7ff fd61 	bl	800b590 <__lo0bits>
 800bace:	9b01      	ldr	r3, [sp, #4]
 800bad0:	6163      	str	r3, [r4, #20]
 800bad2:	3020      	adds	r0, #32
 800bad4:	2201      	movs	r2, #1
 800bad6:	e7e5      	b.n	800baa4 <__d2b+0x60>
 800bad8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800badc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bae0:	6038      	str	r0, [r7, #0]
 800bae2:	6918      	ldr	r0, [r3, #16]
 800bae4:	f7ff fd34 	bl	800b550 <__hi0bits>
 800bae8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800baec:	e7e2      	b.n	800bab4 <__d2b+0x70>
 800baee:	bf00      	nop
 800baf0:	0801f57f 	.word	0x0801f57f
 800baf4:	0801f590 	.word	0x0801f590

0800baf8 <_malloc_usable_size_r>:
 800baf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bafc:	1f18      	subs	r0, r3, #4
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	bfbc      	itt	lt
 800bb02:	580b      	ldrlt	r3, [r1, r0]
 800bb04:	18c0      	addlt	r0, r0, r3
 800bb06:	4770      	bx	lr

0800bb08 <__ascii_wctomb>:
 800bb08:	b149      	cbz	r1, 800bb1e <__ascii_wctomb+0x16>
 800bb0a:	2aff      	cmp	r2, #255	; 0xff
 800bb0c:	bf85      	ittet	hi
 800bb0e:	238a      	movhi	r3, #138	; 0x8a
 800bb10:	6003      	strhi	r3, [r0, #0]
 800bb12:	700a      	strbls	r2, [r1, #0]
 800bb14:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bb18:	bf98      	it	ls
 800bb1a:	2001      	movls	r0, #1
 800bb1c:	4770      	bx	lr
 800bb1e:	4608      	mov	r0, r1
 800bb20:	4770      	bx	lr

0800bb22 <__ssputs_r>:
 800bb22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb26:	688e      	ldr	r6, [r1, #8]
 800bb28:	461f      	mov	r7, r3
 800bb2a:	42be      	cmp	r6, r7
 800bb2c:	680b      	ldr	r3, [r1, #0]
 800bb2e:	4682      	mov	sl, r0
 800bb30:	460c      	mov	r4, r1
 800bb32:	4690      	mov	r8, r2
 800bb34:	d82c      	bhi.n	800bb90 <__ssputs_r+0x6e>
 800bb36:	898a      	ldrh	r2, [r1, #12]
 800bb38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb3c:	d026      	beq.n	800bb8c <__ssputs_r+0x6a>
 800bb3e:	6965      	ldr	r5, [r4, #20]
 800bb40:	6909      	ldr	r1, [r1, #16]
 800bb42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb46:	eba3 0901 	sub.w	r9, r3, r1
 800bb4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb4e:	1c7b      	adds	r3, r7, #1
 800bb50:	444b      	add	r3, r9
 800bb52:	106d      	asrs	r5, r5, #1
 800bb54:	429d      	cmp	r5, r3
 800bb56:	bf38      	it	cc
 800bb58:	461d      	movcc	r5, r3
 800bb5a:	0553      	lsls	r3, r2, #21
 800bb5c:	d527      	bpl.n	800bbae <__ssputs_r+0x8c>
 800bb5e:	4629      	mov	r1, r5
 800bb60:	f7fd fcc4 	bl	80094ec <_malloc_r>
 800bb64:	4606      	mov	r6, r0
 800bb66:	b360      	cbz	r0, 800bbc2 <__ssputs_r+0xa0>
 800bb68:	6921      	ldr	r1, [r4, #16]
 800bb6a:	464a      	mov	r2, r9
 800bb6c:	f7fe fd41 	bl	800a5f2 <memcpy>
 800bb70:	89a3      	ldrh	r3, [r4, #12]
 800bb72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb7a:	81a3      	strh	r3, [r4, #12]
 800bb7c:	6126      	str	r6, [r4, #16]
 800bb7e:	6165      	str	r5, [r4, #20]
 800bb80:	444e      	add	r6, r9
 800bb82:	eba5 0509 	sub.w	r5, r5, r9
 800bb86:	6026      	str	r6, [r4, #0]
 800bb88:	60a5      	str	r5, [r4, #8]
 800bb8a:	463e      	mov	r6, r7
 800bb8c:	42be      	cmp	r6, r7
 800bb8e:	d900      	bls.n	800bb92 <__ssputs_r+0x70>
 800bb90:	463e      	mov	r6, r7
 800bb92:	6820      	ldr	r0, [r4, #0]
 800bb94:	4632      	mov	r2, r6
 800bb96:	4641      	mov	r1, r8
 800bb98:	f000 fac2 	bl	800c120 <memmove>
 800bb9c:	68a3      	ldr	r3, [r4, #8]
 800bb9e:	1b9b      	subs	r3, r3, r6
 800bba0:	60a3      	str	r3, [r4, #8]
 800bba2:	6823      	ldr	r3, [r4, #0]
 800bba4:	4433      	add	r3, r6
 800bba6:	6023      	str	r3, [r4, #0]
 800bba8:	2000      	movs	r0, #0
 800bbaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbae:	462a      	mov	r2, r5
 800bbb0:	f7fd fd28 	bl	8009604 <_realloc_r>
 800bbb4:	4606      	mov	r6, r0
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	d1e0      	bne.n	800bb7c <__ssputs_r+0x5a>
 800bbba:	6921      	ldr	r1, [r4, #16]
 800bbbc:	4650      	mov	r0, sl
 800bbbe:	f7ff fbc1 	bl	800b344 <_free_r>
 800bbc2:	230c      	movs	r3, #12
 800bbc4:	f8ca 3000 	str.w	r3, [sl]
 800bbc8:	89a3      	ldrh	r3, [r4, #12]
 800bbca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbce:	81a3      	strh	r3, [r4, #12]
 800bbd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbd4:	e7e9      	b.n	800bbaa <__ssputs_r+0x88>
	...

0800bbd8 <_svfiprintf_r>:
 800bbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbdc:	4698      	mov	r8, r3
 800bbde:	898b      	ldrh	r3, [r1, #12]
 800bbe0:	061b      	lsls	r3, r3, #24
 800bbe2:	b09d      	sub	sp, #116	; 0x74
 800bbe4:	4607      	mov	r7, r0
 800bbe6:	460d      	mov	r5, r1
 800bbe8:	4614      	mov	r4, r2
 800bbea:	d50e      	bpl.n	800bc0a <_svfiprintf_r+0x32>
 800bbec:	690b      	ldr	r3, [r1, #16]
 800bbee:	b963      	cbnz	r3, 800bc0a <_svfiprintf_r+0x32>
 800bbf0:	2140      	movs	r1, #64	; 0x40
 800bbf2:	f7fd fc7b 	bl	80094ec <_malloc_r>
 800bbf6:	6028      	str	r0, [r5, #0]
 800bbf8:	6128      	str	r0, [r5, #16]
 800bbfa:	b920      	cbnz	r0, 800bc06 <_svfiprintf_r+0x2e>
 800bbfc:	230c      	movs	r3, #12
 800bbfe:	603b      	str	r3, [r7, #0]
 800bc00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc04:	e0d0      	b.n	800bda8 <_svfiprintf_r+0x1d0>
 800bc06:	2340      	movs	r3, #64	; 0x40
 800bc08:	616b      	str	r3, [r5, #20]
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc0e:	2320      	movs	r3, #32
 800bc10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc14:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc18:	2330      	movs	r3, #48	; 0x30
 800bc1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bdc0 <_svfiprintf_r+0x1e8>
 800bc1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc22:	f04f 0901 	mov.w	r9, #1
 800bc26:	4623      	mov	r3, r4
 800bc28:	469a      	mov	sl, r3
 800bc2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc2e:	b10a      	cbz	r2, 800bc34 <_svfiprintf_r+0x5c>
 800bc30:	2a25      	cmp	r2, #37	; 0x25
 800bc32:	d1f9      	bne.n	800bc28 <_svfiprintf_r+0x50>
 800bc34:	ebba 0b04 	subs.w	fp, sl, r4
 800bc38:	d00b      	beq.n	800bc52 <_svfiprintf_r+0x7a>
 800bc3a:	465b      	mov	r3, fp
 800bc3c:	4622      	mov	r2, r4
 800bc3e:	4629      	mov	r1, r5
 800bc40:	4638      	mov	r0, r7
 800bc42:	f7ff ff6e 	bl	800bb22 <__ssputs_r>
 800bc46:	3001      	adds	r0, #1
 800bc48:	f000 80a9 	beq.w	800bd9e <_svfiprintf_r+0x1c6>
 800bc4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc4e:	445a      	add	r2, fp
 800bc50:	9209      	str	r2, [sp, #36]	; 0x24
 800bc52:	f89a 3000 	ldrb.w	r3, [sl]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f000 80a1 	beq.w	800bd9e <_svfiprintf_r+0x1c6>
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc66:	f10a 0a01 	add.w	sl, sl, #1
 800bc6a:	9304      	str	r3, [sp, #16]
 800bc6c:	9307      	str	r3, [sp, #28]
 800bc6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc72:	931a      	str	r3, [sp, #104]	; 0x68
 800bc74:	4654      	mov	r4, sl
 800bc76:	2205      	movs	r2, #5
 800bc78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc7c:	4850      	ldr	r0, [pc, #320]	; (800bdc0 <_svfiprintf_r+0x1e8>)
 800bc7e:	f7f4 facf 	bl	8000220 <memchr>
 800bc82:	9a04      	ldr	r2, [sp, #16]
 800bc84:	b9d8      	cbnz	r0, 800bcbe <_svfiprintf_r+0xe6>
 800bc86:	06d0      	lsls	r0, r2, #27
 800bc88:	bf44      	itt	mi
 800bc8a:	2320      	movmi	r3, #32
 800bc8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc90:	0711      	lsls	r1, r2, #28
 800bc92:	bf44      	itt	mi
 800bc94:	232b      	movmi	r3, #43	; 0x2b
 800bc96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc9a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc9e:	2b2a      	cmp	r3, #42	; 0x2a
 800bca0:	d015      	beq.n	800bcce <_svfiprintf_r+0xf6>
 800bca2:	9a07      	ldr	r2, [sp, #28]
 800bca4:	4654      	mov	r4, sl
 800bca6:	2000      	movs	r0, #0
 800bca8:	f04f 0c0a 	mov.w	ip, #10
 800bcac:	4621      	mov	r1, r4
 800bcae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcb2:	3b30      	subs	r3, #48	; 0x30
 800bcb4:	2b09      	cmp	r3, #9
 800bcb6:	d94d      	bls.n	800bd54 <_svfiprintf_r+0x17c>
 800bcb8:	b1b0      	cbz	r0, 800bce8 <_svfiprintf_r+0x110>
 800bcba:	9207      	str	r2, [sp, #28]
 800bcbc:	e014      	b.n	800bce8 <_svfiprintf_r+0x110>
 800bcbe:	eba0 0308 	sub.w	r3, r0, r8
 800bcc2:	fa09 f303 	lsl.w	r3, r9, r3
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	9304      	str	r3, [sp, #16]
 800bcca:	46a2      	mov	sl, r4
 800bccc:	e7d2      	b.n	800bc74 <_svfiprintf_r+0x9c>
 800bcce:	9b03      	ldr	r3, [sp, #12]
 800bcd0:	1d19      	adds	r1, r3, #4
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	9103      	str	r1, [sp, #12]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	bfbb      	ittet	lt
 800bcda:	425b      	neglt	r3, r3
 800bcdc:	f042 0202 	orrlt.w	r2, r2, #2
 800bce0:	9307      	strge	r3, [sp, #28]
 800bce2:	9307      	strlt	r3, [sp, #28]
 800bce4:	bfb8      	it	lt
 800bce6:	9204      	strlt	r2, [sp, #16]
 800bce8:	7823      	ldrb	r3, [r4, #0]
 800bcea:	2b2e      	cmp	r3, #46	; 0x2e
 800bcec:	d10c      	bne.n	800bd08 <_svfiprintf_r+0x130>
 800bcee:	7863      	ldrb	r3, [r4, #1]
 800bcf0:	2b2a      	cmp	r3, #42	; 0x2a
 800bcf2:	d134      	bne.n	800bd5e <_svfiprintf_r+0x186>
 800bcf4:	9b03      	ldr	r3, [sp, #12]
 800bcf6:	1d1a      	adds	r2, r3, #4
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	9203      	str	r2, [sp, #12]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	bfb8      	it	lt
 800bd00:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bd04:	3402      	adds	r4, #2
 800bd06:	9305      	str	r3, [sp, #20]
 800bd08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bdd0 <_svfiprintf_r+0x1f8>
 800bd0c:	7821      	ldrb	r1, [r4, #0]
 800bd0e:	2203      	movs	r2, #3
 800bd10:	4650      	mov	r0, sl
 800bd12:	f7f4 fa85 	bl	8000220 <memchr>
 800bd16:	b138      	cbz	r0, 800bd28 <_svfiprintf_r+0x150>
 800bd18:	9b04      	ldr	r3, [sp, #16]
 800bd1a:	eba0 000a 	sub.w	r0, r0, sl
 800bd1e:	2240      	movs	r2, #64	; 0x40
 800bd20:	4082      	lsls	r2, r0
 800bd22:	4313      	orrs	r3, r2
 800bd24:	3401      	adds	r4, #1
 800bd26:	9304      	str	r3, [sp, #16]
 800bd28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd2c:	4825      	ldr	r0, [pc, #148]	; (800bdc4 <_svfiprintf_r+0x1ec>)
 800bd2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd32:	2206      	movs	r2, #6
 800bd34:	f7f4 fa74 	bl	8000220 <memchr>
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	d038      	beq.n	800bdae <_svfiprintf_r+0x1d6>
 800bd3c:	4b22      	ldr	r3, [pc, #136]	; (800bdc8 <_svfiprintf_r+0x1f0>)
 800bd3e:	bb1b      	cbnz	r3, 800bd88 <_svfiprintf_r+0x1b0>
 800bd40:	9b03      	ldr	r3, [sp, #12]
 800bd42:	3307      	adds	r3, #7
 800bd44:	f023 0307 	bic.w	r3, r3, #7
 800bd48:	3308      	adds	r3, #8
 800bd4a:	9303      	str	r3, [sp, #12]
 800bd4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd4e:	4433      	add	r3, r6
 800bd50:	9309      	str	r3, [sp, #36]	; 0x24
 800bd52:	e768      	b.n	800bc26 <_svfiprintf_r+0x4e>
 800bd54:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd58:	460c      	mov	r4, r1
 800bd5a:	2001      	movs	r0, #1
 800bd5c:	e7a6      	b.n	800bcac <_svfiprintf_r+0xd4>
 800bd5e:	2300      	movs	r3, #0
 800bd60:	3401      	adds	r4, #1
 800bd62:	9305      	str	r3, [sp, #20]
 800bd64:	4619      	mov	r1, r3
 800bd66:	f04f 0c0a 	mov.w	ip, #10
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd70:	3a30      	subs	r2, #48	; 0x30
 800bd72:	2a09      	cmp	r2, #9
 800bd74:	d903      	bls.n	800bd7e <_svfiprintf_r+0x1a6>
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d0c6      	beq.n	800bd08 <_svfiprintf_r+0x130>
 800bd7a:	9105      	str	r1, [sp, #20]
 800bd7c:	e7c4      	b.n	800bd08 <_svfiprintf_r+0x130>
 800bd7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd82:	4604      	mov	r4, r0
 800bd84:	2301      	movs	r3, #1
 800bd86:	e7f0      	b.n	800bd6a <_svfiprintf_r+0x192>
 800bd88:	ab03      	add	r3, sp, #12
 800bd8a:	9300      	str	r3, [sp, #0]
 800bd8c:	462a      	mov	r2, r5
 800bd8e:	4b0f      	ldr	r3, [pc, #60]	; (800bdcc <_svfiprintf_r+0x1f4>)
 800bd90:	a904      	add	r1, sp, #16
 800bd92:	4638      	mov	r0, r7
 800bd94:	f7fd fd06 	bl	80097a4 <_printf_float>
 800bd98:	1c42      	adds	r2, r0, #1
 800bd9a:	4606      	mov	r6, r0
 800bd9c:	d1d6      	bne.n	800bd4c <_svfiprintf_r+0x174>
 800bd9e:	89ab      	ldrh	r3, [r5, #12]
 800bda0:	065b      	lsls	r3, r3, #25
 800bda2:	f53f af2d 	bmi.w	800bc00 <_svfiprintf_r+0x28>
 800bda6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bda8:	b01d      	add	sp, #116	; 0x74
 800bdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdae:	ab03      	add	r3, sp, #12
 800bdb0:	9300      	str	r3, [sp, #0]
 800bdb2:	462a      	mov	r2, r5
 800bdb4:	4b05      	ldr	r3, [pc, #20]	; (800bdcc <_svfiprintf_r+0x1f4>)
 800bdb6:	a904      	add	r1, sp, #16
 800bdb8:	4638      	mov	r0, r7
 800bdba:	f7fd ff97 	bl	8009cec <_printf_i>
 800bdbe:	e7eb      	b.n	800bd98 <_svfiprintf_r+0x1c0>
 800bdc0:	0801f6ec 	.word	0x0801f6ec
 800bdc4:	0801f6f6 	.word	0x0801f6f6
 800bdc8:	080097a5 	.word	0x080097a5
 800bdcc:	0800bb23 	.word	0x0800bb23
 800bdd0:	0801f6f2 	.word	0x0801f6f2

0800bdd4 <__sfputc_r>:
 800bdd4:	6893      	ldr	r3, [r2, #8]
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	b410      	push	{r4}
 800bddc:	6093      	str	r3, [r2, #8]
 800bdde:	da08      	bge.n	800bdf2 <__sfputc_r+0x1e>
 800bde0:	6994      	ldr	r4, [r2, #24]
 800bde2:	42a3      	cmp	r3, r4
 800bde4:	db01      	blt.n	800bdea <__sfputc_r+0x16>
 800bde6:	290a      	cmp	r1, #10
 800bde8:	d103      	bne.n	800bdf2 <__sfputc_r+0x1e>
 800bdea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdee:	f7fe ba98 	b.w	800a322 <__swbuf_r>
 800bdf2:	6813      	ldr	r3, [r2, #0]
 800bdf4:	1c58      	adds	r0, r3, #1
 800bdf6:	6010      	str	r0, [r2, #0]
 800bdf8:	7019      	strb	r1, [r3, #0]
 800bdfa:	4608      	mov	r0, r1
 800bdfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be00:	4770      	bx	lr

0800be02 <__sfputs_r>:
 800be02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be04:	4606      	mov	r6, r0
 800be06:	460f      	mov	r7, r1
 800be08:	4614      	mov	r4, r2
 800be0a:	18d5      	adds	r5, r2, r3
 800be0c:	42ac      	cmp	r4, r5
 800be0e:	d101      	bne.n	800be14 <__sfputs_r+0x12>
 800be10:	2000      	movs	r0, #0
 800be12:	e007      	b.n	800be24 <__sfputs_r+0x22>
 800be14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be18:	463a      	mov	r2, r7
 800be1a:	4630      	mov	r0, r6
 800be1c:	f7ff ffda 	bl	800bdd4 <__sfputc_r>
 800be20:	1c43      	adds	r3, r0, #1
 800be22:	d1f3      	bne.n	800be0c <__sfputs_r+0xa>
 800be24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be28 <_vfiprintf_r>:
 800be28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be2c:	460d      	mov	r5, r1
 800be2e:	b09d      	sub	sp, #116	; 0x74
 800be30:	4614      	mov	r4, r2
 800be32:	4698      	mov	r8, r3
 800be34:	4606      	mov	r6, r0
 800be36:	b118      	cbz	r0, 800be40 <_vfiprintf_r+0x18>
 800be38:	6a03      	ldr	r3, [r0, #32]
 800be3a:	b90b      	cbnz	r3, 800be40 <_vfiprintf_r+0x18>
 800be3c:	f7fe f9b2 	bl	800a1a4 <__sinit>
 800be40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be42:	07d9      	lsls	r1, r3, #31
 800be44:	d405      	bmi.n	800be52 <_vfiprintf_r+0x2a>
 800be46:	89ab      	ldrh	r3, [r5, #12]
 800be48:	059a      	lsls	r2, r3, #22
 800be4a:	d402      	bmi.n	800be52 <_vfiprintf_r+0x2a>
 800be4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be4e:	f7fe fbce 	bl	800a5ee <__retarget_lock_acquire_recursive>
 800be52:	89ab      	ldrh	r3, [r5, #12]
 800be54:	071b      	lsls	r3, r3, #28
 800be56:	d501      	bpl.n	800be5c <_vfiprintf_r+0x34>
 800be58:	692b      	ldr	r3, [r5, #16]
 800be5a:	b99b      	cbnz	r3, 800be84 <_vfiprintf_r+0x5c>
 800be5c:	4629      	mov	r1, r5
 800be5e:	4630      	mov	r0, r6
 800be60:	f7fe fa9c 	bl	800a39c <__swsetup_r>
 800be64:	b170      	cbz	r0, 800be84 <_vfiprintf_r+0x5c>
 800be66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be68:	07dc      	lsls	r4, r3, #31
 800be6a:	d504      	bpl.n	800be76 <_vfiprintf_r+0x4e>
 800be6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be70:	b01d      	add	sp, #116	; 0x74
 800be72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be76:	89ab      	ldrh	r3, [r5, #12]
 800be78:	0598      	lsls	r0, r3, #22
 800be7a:	d4f7      	bmi.n	800be6c <_vfiprintf_r+0x44>
 800be7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be7e:	f7fe fbb7 	bl	800a5f0 <__retarget_lock_release_recursive>
 800be82:	e7f3      	b.n	800be6c <_vfiprintf_r+0x44>
 800be84:	2300      	movs	r3, #0
 800be86:	9309      	str	r3, [sp, #36]	; 0x24
 800be88:	2320      	movs	r3, #32
 800be8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800be92:	2330      	movs	r3, #48	; 0x30
 800be94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c048 <_vfiprintf_r+0x220>
 800be98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be9c:	f04f 0901 	mov.w	r9, #1
 800bea0:	4623      	mov	r3, r4
 800bea2:	469a      	mov	sl, r3
 800bea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bea8:	b10a      	cbz	r2, 800beae <_vfiprintf_r+0x86>
 800beaa:	2a25      	cmp	r2, #37	; 0x25
 800beac:	d1f9      	bne.n	800bea2 <_vfiprintf_r+0x7a>
 800beae:	ebba 0b04 	subs.w	fp, sl, r4
 800beb2:	d00b      	beq.n	800becc <_vfiprintf_r+0xa4>
 800beb4:	465b      	mov	r3, fp
 800beb6:	4622      	mov	r2, r4
 800beb8:	4629      	mov	r1, r5
 800beba:	4630      	mov	r0, r6
 800bebc:	f7ff ffa1 	bl	800be02 <__sfputs_r>
 800bec0:	3001      	adds	r0, #1
 800bec2:	f000 80a9 	beq.w	800c018 <_vfiprintf_r+0x1f0>
 800bec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bec8:	445a      	add	r2, fp
 800beca:	9209      	str	r2, [sp, #36]	; 0x24
 800becc:	f89a 3000 	ldrb.w	r3, [sl]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f000 80a1 	beq.w	800c018 <_vfiprintf_r+0x1f0>
 800bed6:	2300      	movs	r3, #0
 800bed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bedc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bee0:	f10a 0a01 	add.w	sl, sl, #1
 800bee4:	9304      	str	r3, [sp, #16]
 800bee6:	9307      	str	r3, [sp, #28]
 800bee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800beec:	931a      	str	r3, [sp, #104]	; 0x68
 800beee:	4654      	mov	r4, sl
 800bef0:	2205      	movs	r2, #5
 800bef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bef6:	4854      	ldr	r0, [pc, #336]	; (800c048 <_vfiprintf_r+0x220>)
 800bef8:	f7f4 f992 	bl	8000220 <memchr>
 800befc:	9a04      	ldr	r2, [sp, #16]
 800befe:	b9d8      	cbnz	r0, 800bf38 <_vfiprintf_r+0x110>
 800bf00:	06d1      	lsls	r1, r2, #27
 800bf02:	bf44      	itt	mi
 800bf04:	2320      	movmi	r3, #32
 800bf06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf0a:	0713      	lsls	r3, r2, #28
 800bf0c:	bf44      	itt	mi
 800bf0e:	232b      	movmi	r3, #43	; 0x2b
 800bf10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf14:	f89a 3000 	ldrb.w	r3, [sl]
 800bf18:	2b2a      	cmp	r3, #42	; 0x2a
 800bf1a:	d015      	beq.n	800bf48 <_vfiprintf_r+0x120>
 800bf1c:	9a07      	ldr	r2, [sp, #28]
 800bf1e:	4654      	mov	r4, sl
 800bf20:	2000      	movs	r0, #0
 800bf22:	f04f 0c0a 	mov.w	ip, #10
 800bf26:	4621      	mov	r1, r4
 800bf28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf2c:	3b30      	subs	r3, #48	; 0x30
 800bf2e:	2b09      	cmp	r3, #9
 800bf30:	d94d      	bls.n	800bfce <_vfiprintf_r+0x1a6>
 800bf32:	b1b0      	cbz	r0, 800bf62 <_vfiprintf_r+0x13a>
 800bf34:	9207      	str	r2, [sp, #28]
 800bf36:	e014      	b.n	800bf62 <_vfiprintf_r+0x13a>
 800bf38:	eba0 0308 	sub.w	r3, r0, r8
 800bf3c:	fa09 f303 	lsl.w	r3, r9, r3
 800bf40:	4313      	orrs	r3, r2
 800bf42:	9304      	str	r3, [sp, #16]
 800bf44:	46a2      	mov	sl, r4
 800bf46:	e7d2      	b.n	800beee <_vfiprintf_r+0xc6>
 800bf48:	9b03      	ldr	r3, [sp, #12]
 800bf4a:	1d19      	adds	r1, r3, #4
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	9103      	str	r1, [sp, #12]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	bfbb      	ittet	lt
 800bf54:	425b      	neglt	r3, r3
 800bf56:	f042 0202 	orrlt.w	r2, r2, #2
 800bf5a:	9307      	strge	r3, [sp, #28]
 800bf5c:	9307      	strlt	r3, [sp, #28]
 800bf5e:	bfb8      	it	lt
 800bf60:	9204      	strlt	r2, [sp, #16]
 800bf62:	7823      	ldrb	r3, [r4, #0]
 800bf64:	2b2e      	cmp	r3, #46	; 0x2e
 800bf66:	d10c      	bne.n	800bf82 <_vfiprintf_r+0x15a>
 800bf68:	7863      	ldrb	r3, [r4, #1]
 800bf6a:	2b2a      	cmp	r3, #42	; 0x2a
 800bf6c:	d134      	bne.n	800bfd8 <_vfiprintf_r+0x1b0>
 800bf6e:	9b03      	ldr	r3, [sp, #12]
 800bf70:	1d1a      	adds	r2, r3, #4
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	9203      	str	r2, [sp, #12]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	bfb8      	it	lt
 800bf7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bf7e:	3402      	adds	r4, #2
 800bf80:	9305      	str	r3, [sp, #20]
 800bf82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c058 <_vfiprintf_r+0x230>
 800bf86:	7821      	ldrb	r1, [r4, #0]
 800bf88:	2203      	movs	r2, #3
 800bf8a:	4650      	mov	r0, sl
 800bf8c:	f7f4 f948 	bl	8000220 <memchr>
 800bf90:	b138      	cbz	r0, 800bfa2 <_vfiprintf_r+0x17a>
 800bf92:	9b04      	ldr	r3, [sp, #16]
 800bf94:	eba0 000a 	sub.w	r0, r0, sl
 800bf98:	2240      	movs	r2, #64	; 0x40
 800bf9a:	4082      	lsls	r2, r0
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	3401      	adds	r4, #1
 800bfa0:	9304      	str	r3, [sp, #16]
 800bfa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfa6:	4829      	ldr	r0, [pc, #164]	; (800c04c <_vfiprintf_r+0x224>)
 800bfa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfac:	2206      	movs	r2, #6
 800bfae:	f7f4 f937 	bl	8000220 <memchr>
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	d03f      	beq.n	800c036 <_vfiprintf_r+0x20e>
 800bfb6:	4b26      	ldr	r3, [pc, #152]	; (800c050 <_vfiprintf_r+0x228>)
 800bfb8:	bb1b      	cbnz	r3, 800c002 <_vfiprintf_r+0x1da>
 800bfba:	9b03      	ldr	r3, [sp, #12]
 800bfbc:	3307      	adds	r3, #7
 800bfbe:	f023 0307 	bic.w	r3, r3, #7
 800bfc2:	3308      	adds	r3, #8
 800bfc4:	9303      	str	r3, [sp, #12]
 800bfc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfc8:	443b      	add	r3, r7
 800bfca:	9309      	str	r3, [sp, #36]	; 0x24
 800bfcc:	e768      	b.n	800bea0 <_vfiprintf_r+0x78>
 800bfce:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfd2:	460c      	mov	r4, r1
 800bfd4:	2001      	movs	r0, #1
 800bfd6:	e7a6      	b.n	800bf26 <_vfiprintf_r+0xfe>
 800bfd8:	2300      	movs	r3, #0
 800bfda:	3401      	adds	r4, #1
 800bfdc:	9305      	str	r3, [sp, #20]
 800bfde:	4619      	mov	r1, r3
 800bfe0:	f04f 0c0a 	mov.w	ip, #10
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfea:	3a30      	subs	r2, #48	; 0x30
 800bfec:	2a09      	cmp	r2, #9
 800bfee:	d903      	bls.n	800bff8 <_vfiprintf_r+0x1d0>
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d0c6      	beq.n	800bf82 <_vfiprintf_r+0x15a>
 800bff4:	9105      	str	r1, [sp, #20]
 800bff6:	e7c4      	b.n	800bf82 <_vfiprintf_r+0x15a>
 800bff8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bffc:	4604      	mov	r4, r0
 800bffe:	2301      	movs	r3, #1
 800c000:	e7f0      	b.n	800bfe4 <_vfiprintf_r+0x1bc>
 800c002:	ab03      	add	r3, sp, #12
 800c004:	9300      	str	r3, [sp, #0]
 800c006:	462a      	mov	r2, r5
 800c008:	4b12      	ldr	r3, [pc, #72]	; (800c054 <_vfiprintf_r+0x22c>)
 800c00a:	a904      	add	r1, sp, #16
 800c00c:	4630      	mov	r0, r6
 800c00e:	f7fd fbc9 	bl	80097a4 <_printf_float>
 800c012:	4607      	mov	r7, r0
 800c014:	1c78      	adds	r0, r7, #1
 800c016:	d1d6      	bne.n	800bfc6 <_vfiprintf_r+0x19e>
 800c018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c01a:	07d9      	lsls	r1, r3, #31
 800c01c:	d405      	bmi.n	800c02a <_vfiprintf_r+0x202>
 800c01e:	89ab      	ldrh	r3, [r5, #12]
 800c020:	059a      	lsls	r2, r3, #22
 800c022:	d402      	bmi.n	800c02a <_vfiprintf_r+0x202>
 800c024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c026:	f7fe fae3 	bl	800a5f0 <__retarget_lock_release_recursive>
 800c02a:	89ab      	ldrh	r3, [r5, #12]
 800c02c:	065b      	lsls	r3, r3, #25
 800c02e:	f53f af1d 	bmi.w	800be6c <_vfiprintf_r+0x44>
 800c032:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c034:	e71c      	b.n	800be70 <_vfiprintf_r+0x48>
 800c036:	ab03      	add	r3, sp, #12
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	462a      	mov	r2, r5
 800c03c:	4b05      	ldr	r3, [pc, #20]	; (800c054 <_vfiprintf_r+0x22c>)
 800c03e:	a904      	add	r1, sp, #16
 800c040:	4630      	mov	r0, r6
 800c042:	f7fd fe53 	bl	8009cec <_printf_i>
 800c046:	e7e4      	b.n	800c012 <_vfiprintf_r+0x1ea>
 800c048:	0801f6ec 	.word	0x0801f6ec
 800c04c:	0801f6f6 	.word	0x0801f6f6
 800c050:	080097a5 	.word	0x080097a5
 800c054:	0800be03 	.word	0x0800be03
 800c058:	0801f6f2 	.word	0x0801f6f2

0800c05c <__swhatbuf_r>:
 800c05c:	b570      	push	{r4, r5, r6, lr}
 800c05e:	460c      	mov	r4, r1
 800c060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c064:	2900      	cmp	r1, #0
 800c066:	b096      	sub	sp, #88	; 0x58
 800c068:	4615      	mov	r5, r2
 800c06a:	461e      	mov	r6, r3
 800c06c:	da0d      	bge.n	800c08a <__swhatbuf_r+0x2e>
 800c06e:	89a3      	ldrh	r3, [r4, #12]
 800c070:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c074:	f04f 0100 	mov.w	r1, #0
 800c078:	bf0c      	ite	eq
 800c07a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c07e:	2340      	movne	r3, #64	; 0x40
 800c080:	2000      	movs	r0, #0
 800c082:	6031      	str	r1, [r6, #0]
 800c084:	602b      	str	r3, [r5, #0]
 800c086:	b016      	add	sp, #88	; 0x58
 800c088:	bd70      	pop	{r4, r5, r6, pc}
 800c08a:	466a      	mov	r2, sp
 800c08c:	f000 f862 	bl	800c154 <_fstat_r>
 800c090:	2800      	cmp	r0, #0
 800c092:	dbec      	blt.n	800c06e <__swhatbuf_r+0x12>
 800c094:	9901      	ldr	r1, [sp, #4]
 800c096:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c09a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c09e:	4259      	negs	r1, r3
 800c0a0:	4159      	adcs	r1, r3
 800c0a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0a6:	e7eb      	b.n	800c080 <__swhatbuf_r+0x24>

0800c0a8 <__smakebuf_r>:
 800c0a8:	898b      	ldrh	r3, [r1, #12]
 800c0aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0ac:	079d      	lsls	r5, r3, #30
 800c0ae:	4606      	mov	r6, r0
 800c0b0:	460c      	mov	r4, r1
 800c0b2:	d507      	bpl.n	800c0c4 <__smakebuf_r+0x1c>
 800c0b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0b8:	6023      	str	r3, [r4, #0]
 800c0ba:	6123      	str	r3, [r4, #16]
 800c0bc:	2301      	movs	r3, #1
 800c0be:	6163      	str	r3, [r4, #20]
 800c0c0:	b002      	add	sp, #8
 800c0c2:	bd70      	pop	{r4, r5, r6, pc}
 800c0c4:	ab01      	add	r3, sp, #4
 800c0c6:	466a      	mov	r2, sp
 800c0c8:	f7ff ffc8 	bl	800c05c <__swhatbuf_r>
 800c0cc:	9900      	ldr	r1, [sp, #0]
 800c0ce:	4605      	mov	r5, r0
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	f7fd fa0b 	bl	80094ec <_malloc_r>
 800c0d6:	b948      	cbnz	r0, 800c0ec <__smakebuf_r+0x44>
 800c0d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0dc:	059a      	lsls	r2, r3, #22
 800c0de:	d4ef      	bmi.n	800c0c0 <__smakebuf_r+0x18>
 800c0e0:	f023 0303 	bic.w	r3, r3, #3
 800c0e4:	f043 0302 	orr.w	r3, r3, #2
 800c0e8:	81a3      	strh	r3, [r4, #12]
 800c0ea:	e7e3      	b.n	800c0b4 <__smakebuf_r+0xc>
 800c0ec:	89a3      	ldrh	r3, [r4, #12]
 800c0ee:	6020      	str	r0, [r4, #0]
 800c0f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0f4:	81a3      	strh	r3, [r4, #12]
 800c0f6:	9b00      	ldr	r3, [sp, #0]
 800c0f8:	6163      	str	r3, [r4, #20]
 800c0fa:	9b01      	ldr	r3, [sp, #4]
 800c0fc:	6120      	str	r0, [r4, #16]
 800c0fe:	b15b      	cbz	r3, 800c118 <__smakebuf_r+0x70>
 800c100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c104:	4630      	mov	r0, r6
 800c106:	f000 f837 	bl	800c178 <_isatty_r>
 800c10a:	b128      	cbz	r0, 800c118 <__smakebuf_r+0x70>
 800c10c:	89a3      	ldrh	r3, [r4, #12]
 800c10e:	f023 0303 	bic.w	r3, r3, #3
 800c112:	f043 0301 	orr.w	r3, r3, #1
 800c116:	81a3      	strh	r3, [r4, #12]
 800c118:	89a3      	ldrh	r3, [r4, #12]
 800c11a:	431d      	orrs	r5, r3
 800c11c:	81a5      	strh	r5, [r4, #12]
 800c11e:	e7cf      	b.n	800c0c0 <__smakebuf_r+0x18>

0800c120 <memmove>:
 800c120:	4288      	cmp	r0, r1
 800c122:	b510      	push	{r4, lr}
 800c124:	eb01 0402 	add.w	r4, r1, r2
 800c128:	d902      	bls.n	800c130 <memmove+0x10>
 800c12a:	4284      	cmp	r4, r0
 800c12c:	4623      	mov	r3, r4
 800c12e:	d807      	bhi.n	800c140 <memmove+0x20>
 800c130:	1e43      	subs	r3, r0, #1
 800c132:	42a1      	cmp	r1, r4
 800c134:	d008      	beq.n	800c148 <memmove+0x28>
 800c136:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c13a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c13e:	e7f8      	b.n	800c132 <memmove+0x12>
 800c140:	4402      	add	r2, r0
 800c142:	4601      	mov	r1, r0
 800c144:	428a      	cmp	r2, r1
 800c146:	d100      	bne.n	800c14a <memmove+0x2a>
 800c148:	bd10      	pop	{r4, pc}
 800c14a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c14e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c152:	e7f7      	b.n	800c144 <memmove+0x24>

0800c154 <_fstat_r>:
 800c154:	b538      	push	{r3, r4, r5, lr}
 800c156:	4d07      	ldr	r5, [pc, #28]	; (800c174 <_fstat_r+0x20>)
 800c158:	2300      	movs	r3, #0
 800c15a:	4604      	mov	r4, r0
 800c15c:	4608      	mov	r0, r1
 800c15e:	4611      	mov	r1, r2
 800c160:	602b      	str	r3, [r5, #0]
 800c162:	f7f6 fb28 	bl	80027b6 <_fstat>
 800c166:	1c43      	adds	r3, r0, #1
 800c168:	d102      	bne.n	800c170 <_fstat_r+0x1c>
 800c16a:	682b      	ldr	r3, [r5, #0]
 800c16c:	b103      	cbz	r3, 800c170 <_fstat_r+0x1c>
 800c16e:	6023      	str	r3, [r4, #0]
 800c170:	bd38      	pop	{r3, r4, r5, pc}
 800c172:	bf00      	nop
 800c174:	20014848 	.word	0x20014848

0800c178 <_isatty_r>:
 800c178:	b538      	push	{r3, r4, r5, lr}
 800c17a:	4d06      	ldr	r5, [pc, #24]	; (800c194 <_isatty_r+0x1c>)
 800c17c:	2300      	movs	r3, #0
 800c17e:	4604      	mov	r4, r0
 800c180:	4608      	mov	r0, r1
 800c182:	602b      	str	r3, [r5, #0]
 800c184:	f7f6 fb27 	bl	80027d6 <_isatty>
 800c188:	1c43      	adds	r3, r0, #1
 800c18a:	d102      	bne.n	800c192 <_isatty_r+0x1a>
 800c18c:	682b      	ldr	r3, [r5, #0]
 800c18e:	b103      	cbz	r3, 800c192 <_isatty_r+0x1a>
 800c190:	6023      	str	r3, [r4, #0]
 800c192:	bd38      	pop	{r3, r4, r5, pc}
 800c194:	20014848 	.word	0x20014848

0800c198 <_calloc_r>:
 800c198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c19a:	fba1 2402 	umull	r2, r4, r1, r2
 800c19e:	b94c      	cbnz	r4, 800c1b4 <_calloc_r+0x1c>
 800c1a0:	4611      	mov	r1, r2
 800c1a2:	9201      	str	r2, [sp, #4]
 800c1a4:	f7fd f9a2 	bl	80094ec <_malloc_r>
 800c1a8:	9a01      	ldr	r2, [sp, #4]
 800c1aa:	4605      	mov	r5, r0
 800c1ac:	b930      	cbnz	r0, 800c1bc <_calloc_r+0x24>
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	b003      	add	sp, #12
 800c1b2:	bd30      	pop	{r4, r5, pc}
 800c1b4:	220c      	movs	r2, #12
 800c1b6:	6002      	str	r2, [r0, #0]
 800c1b8:	2500      	movs	r5, #0
 800c1ba:	e7f8      	b.n	800c1ae <_calloc_r+0x16>
 800c1bc:	4621      	mov	r1, r4
 800c1be:	f7fe f945 	bl	800a44c <memset>
 800c1c2:	e7f4      	b.n	800c1ae <_calloc_r+0x16>

0800c1c4 <_init>:
 800c1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1c6:	bf00      	nop
 800c1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ca:	bc08      	pop	{r3}
 800c1cc:	469e      	mov	lr, r3
 800c1ce:	4770      	bx	lr

0800c1d0 <_fini>:
 800c1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1d2:	bf00      	nop
 800c1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1d6:	bc08      	pop	{r3}
 800c1d8:	469e      	mov	lr, r3
 800c1da:	4770      	bx	lr
